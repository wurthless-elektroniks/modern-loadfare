0000: store_word 0xe0000000, 0xd0008010
0008: store_half 2, 0xd0008004
000c: %r12_0 = load_half -7
0010: sync
0014: store_word 0, 0xe0020000
001c: %r10_0 = *(0xe0020000)
0024: sync
0028: store_word 0xc0000000, 0xe0020004
0034: %r10_0 = *(0xe0020004)
003c: sync
0040: store_word 0x00000018, 0xe1020004
0048: %r12_0 = *(0xe1020004)
004c: sync
0050: store_word 0x5f076009, 0xe1010000
0058: %r10_0 = *(0xe1010010)
005c: sync
0060: store_word 0x00004000, 0xe1018020
0068: %r10_0 = *(0xe1018000)
006c: sync
0070: store_word 0xe4000000, 0xd0010010
0078: store_half 2, 0xd0010004
007c: %r12_0 = load_half -7
0080: sync
0084: %r10_1 = 0x20000000
008c: store_word %r10_1, 0xe4000284
0090: %r12_0 = *(0xe4000284)
0094: sync
0098: store_word 0, 0xe4000200
009c: store_word %r10_1, 0xe4000210
00a0: store_word %r10_1, 0xe4000244
00a4: store_word_0_100 0, MC0_CNTL
00a8: store_word 0, 0xe40002a4
00ac: %r12_0 = *(0xe40002a4)
00b0: sync
00b4: store_word 0x00020100, 0xd0000018
00bc: store_word 0xea001000, 0xd0150010
00c8: store_half 2, 0xd0150004
00d0: %r10_0 = load_half -7
00d8: sync
00dc: store_word 0x000001e6, 0xea00101c
00e4: %r10_0 = *(0xea00101c)
00ec: sync
00f0: call 0x0c88
00f4: call 0x0c8c
00f8: store_word %r10_0, 0xe40015e0
00fc: %r10_0 = *(0xe40015e8)
0100: %r10_0 = and %r10_0, -2
0104: %r10_0 = or %r10_0, 1
0108: store_word %r10_0, 0xe40015e8
010c: %r10_0 = *(0xe40015e0)
0110: store_word %r10_0, 0xe40015e0
0114: %r10_0 = *(0xe40015e8)
0118: %r10_0 = and %r10_0, -3
011c: %r10_0 = or %r10_0, 0
0120: store_word %r10_0, 0xe40015e8
0124: %r10_0 = *(0xe40015e0)
0128: store_word %r10_0, 0xe40015e0
012c: %r10_0 = *(0xe40015e8)
0130: %r10_0 = and %r10_0, -2
0134: %r10_0 = or %r10_0, 0
0138: store_word %r10_0, 0xe40015e8
013c: %r10_0 = *(0xe40015e0)
0140: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
0148: store_word 0x00000012, SMC_FIFO_INBOX_DATA
0150: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
0158: %r10_0 = *(SMC_FIFO_OUTBOX_CTRL_STATUS)
0160: %r10_1 = and %r10_0, 4
0164: beq %r10_1, 0 -> 0x0158 ^
0168: store_word 4, SMC_FIFO_OUTBOX_CTRL_STATUS
0170: %r10_0 = *(SMC_FIFO_OUTBOX_DATA)
0178: %r10_0 = *(SMC_FIFO_OUTBOX_DATA)
0180: store_word 0, SMC_FIFO_OUTBOX_CTRL_STATUS
0188: %r10_0 = and %r10_0, 0x000000ff
0190: store_word %r10_0, 0xe400002c
0194: call 0x1210
0198: store_word 0, 0xe1020004
019c: store_half 6, 0xd0008004
01a0: %r12_0 = load_half -7
01a4: sync
01a8: delay -7
01ac: store_word 0xff60ffce, 0xe1013100
01b4: store_word 0, 0xe1013000
01b8: store_word 0, 0xe1013200
01bc: store_word 0x001d0031, 0xe1013300
01c4: store_word 0x00000030, 0xe1003100
01cc: store_word 0, 0xe1003000
01d4: store_word 0, 0xe1003200
01dc: store_word 0xe0f7fd00, 0xe1003300
01e8: return
01ec: %r10_1 = 0x001ff306
01f4: store_word %r10_0, 0xe40015e0
01f8: %r12_0 = *(0xe40015ec)
01fc: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0204: beq %r10_0, 1 -> 0x0210 v
0208: %r10_0 = *(0xe40015e0)
020c: jmp 0x021c v
0210: %r10_0 = *(0xe40015e0)
0214: %r10_1 = 0x001ff306
021c: store_word %r10_0, 0xe40015e0
0220: %r12_0 = *(0xe40015ec)
0224: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
022c: beq %r10_0, 2 -> 0x0238 v
0230: %r10_0 = *(0xe40015e0)
0234: jmp 0x0244 v
0238: %r10_0 = *(0xe40015e0)
023c: %r10_1 = 0x001bb306
0244: store_word %r10_0, 0xe40015e0
0248: %r12_0 = *(0xe40015ec)
024c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0254: beq %r10_0, 6 -> 0x0260 v
0258: %r10_0 = *(0xe40015e0)
025c: jmp 0x026c v
0260: %r10_0 = *(0xe40015e0)
0264: %r10_1 = 0x001fa306
026c: return
0270: %r10_1 = 0x06208089
0278: store_word %r10_0, 0xe40015e0
027c: %r12_0 = *(0xe40015ec)
0280: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0288: beq %r10_0, 1 -> 0x0294 v
028c: %r10_0 = *(0xe40015e0)
0290: jmp 0x02c8 v
0294: %r10_0 = *(0xe40015e0)
0298: %r10_1 = 0x06228089
02a0: store_word %r10_0, 0xe40015e0
02a4: %r12_0 = *(0xe40015ec)
02a8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
02b0: branch_cond0 %r10_0, 4 -> 0x02bc v
02b4: %r10_0 = *(0xe40015e0)
02b8: jmp 0x02c8 v
02bc: %r10_0 = *(0xe40015e0)
02c0: %r10_1 = 0x06208089
02c8: store_word %r10_0, 0xe40015e0
02cc: %r12_0 = *(0xe40015ec)
02d0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
02d8: beq %r10_0, 2 -> 0x02e4 v
02dc: %r10_0 = *(0xe40015e0)
02e0: jmp 0x0318 v
02e4: %r10_0 = *(0xe40015e0)
02e8: %r10_1 = 0x0622808a
02f0: store_word %r10_0, 0xe40015e0
02f4: %r12_0 = *(0xe40015ec)
02f8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0300: branch_cond0 %r10_0, 4 -> 0x030c v
0304: %r10_0 = *(0xe40015e0)
0308: jmp 0x0318 v
030c: %r10_0 = *(0xe40015e0)
0310: %r10_1 = 0x0620808a
0318: store_word %r10_0, 0xe40015e0
031c: %r12_0 = *(0xe40015ec)
0320: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0328: beq %r10_0, 6 -> 0x0334 v
032c: %r10_0 = *(0xe40015e0)
0330: jmp 0x0340 v
0334: %r10_0 = *(0xe40015e0)
0338: %r10_1 = 0x06208089
0340: store_word %r10_0, 0xe40015e0
0344: %r10_0 = *(0xe40015e8)
0348: %r10_0 = rotlw_by_29_then_and %r10_0, 1
034c: branch_cond0 %r10_0, 1 -> 0x0358 v
0350: %r10_0 = *(0xe40015e0)
0354: jmp 0x037c v
0358: %r10_0 = *(0xe40015e0)
035c: store_word %r10_0, 0xe40015e0
0360: %r10_0 = *(0xe40015e8)
0364: %r10_0 = rotlw_by_30_then_and %r10_0, 1
0368: branch_cond0 %r10_0, 1 -> 0x0374 v
036c: %r10_0 = *(0xe40015e0)
0370: jmp 0x037c v
0374: %r10_0 = *(0xe40015e0)
0378: %r10_1 = or %r10_1, 4
037c: return
0380: %r10_1 = 0x06208009
0388: store_word %r10_0, 0xe40015e0
038c: %r12_0 = *(0xe40015ec)
0390: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0398: beq %r10_0, 1 -> 0x03a4 v
039c: %r10_0 = *(0xe40015e0)
03a0: jmp 0x03d8 v
03a4: %r10_0 = *(0xe40015e0)
03a8: %r10_1 = 0x06228009
03b0: store_word %r10_0, 0xe40015e0
03b4: %r12_0 = *(0xe40015ec)
03b8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
03c0: branch_cond0 %r10_0, 4 -> 0x03cc v
03c4: %r10_0 = *(0xe40015e0)
03c8: jmp 0x03d8 v
03cc: %r10_0 = *(0xe40015e0)
03d0: %r10_1 = 0x06208009
03d8: store_word %r10_0, 0xe40015e0
03dc: %r12_0 = *(0xe40015ec)
03e0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
03e8: beq %r10_0, 2 -> 0x03f4 v
03ec: %r10_0 = *(0xe40015e0)
03f0: jmp 0x0450 v
03f4: %r10_0 = *(0xe40015e0)
03f8: %r10_1 = 0x06208009
0400: store_word %r10_0, 0xe40015e0
0404: %r12_0 = *(0xe40015ec)
0408: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0410: branch_cond0 %r10_0, 3 -> 0x041c v
0414: %r10_0 = *(0xe40015e0)
0418: jmp 0x0450 v
041c: %r10_0 = *(0xe40015e0)
0420: %r10_1 = 0x06228009
0428: store_word %r10_0, 0xe40015e0
042c: %r12_0 = *(0xe40015ec)
0430: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0438: branch_cond0 %r10_0, 4 -> 0x0444 v
043c: %r10_0 = *(0xe40015e0)
0440: jmp 0x0450 v
0444: %r10_0 = *(0xe40015e0)
0448: %r10_1 = 0x0620800a
0450: store_word %r10_0, 0xe40015e0
0454: %r12_0 = *(0xe40015ec)
0458: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0460: beq %r10_0, 6 -> 0x046c v
0464: %r10_0 = *(0xe40015e0)
0468: jmp 0x04a0 v
046c: %r10_0 = *(0xe40015e0)
0470: %r10_1 = 0x062080b9
0478: store_word %r10_0, 0xe40015e0
047c: %r12_0 = *(0xe40015ec)
0480: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0488: branch_cond0 %r10_0, 2 -> 0x0494 v
048c: %r10_0 = *(0xe40015e0)
0490: jmp 0x04a0 v
0494: %r10_0 = *(0xe40015e0)
0498: %r10_1 = 0x062080b9
04a0: store_word %r10_0, 0xe40015e0
04a4: %r10_0 = *(0xe40015e8)
04a8: %r10_0 = rotlw_by_29_then_and %r10_0, 1
04ac: branch_cond0 %r10_0, 1 -> 0x04b8 v
04b0: %r10_0 = *(0xe40015e0)
04b4: jmp 0x04dc v
04b8: %r10_0 = *(0xe40015e0)
04bc: store_word %r10_0, 0xe40015e0
04c0: %r10_0 = *(0xe40015e8)
04c4: %r10_0 = rotlw_by_30_then_and %r10_0, 1
04c8: branch_cond0 %r10_0, 1 -> 0x04d4 v
04cc: %r10_0 = *(0xe40015e0)
04d0: jmp 0x04dc v
04d4: %r10_0 = *(0xe40015e0)
04d8: %r10_1 = or %r10_1, 4
04dc: return
04e0: %r10_1 = 0x06210001
04e8: store_word %r10_0, 0xe40015e0
04ec: %r12_0 = *(0xe40015ec)
04f0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
04f8: branch_cond0 %r10_0, 2 -> 0x0504 v
04fc: %r10_0 = *(0xe40015e0)
0500: jmp 0x0510 v
0504: %r10_0 = *(0xe40015e0)
0508: %r10_1 = 0x0621001b
0510: return
0514: %r10_0 = load_word -3
0518: %r12_1 = and %r12_0, 0x000000ff
0520: %r12_0 = and %r12_0, 0xffffff00
0528: %r12_1 = mul %r12_1, %r11_1
052c: %r12_0 = and %r10_1, 0x000000ff
0534: %r12_1 = add %r12_1, %r13_0
0538: %r12_1 = and %r12_1, 0x000000ff
0540: %r12_0 = and %r12_1, 0x00000080
0548: beq %r13_0, 0 -> 0x0550 v
054c: %r12_1 = 0
0550: %r12_0 = rotlw_by_0_then_and %r11_0, -1
0554: branch_cond5 %r12_1, %r13_0 -> 0x055c v
0558: %r12_1 = and %r13_0, -1
055c: %r12_0 = or %r12_0, %r12_1
0560: %r12_1 = and %r12_0, 0x0000ff00
0568: %r12_0 = and %r12_0, 0xffff00ff
0570: %r12_1 = mul %r12_1, %r11_1
0574: %r12_0 = and %r10_1, 0x0000ff00
057c: %r12_1 = add %r12_1, %r13_0
0580: %r12_1 = and %r12_1, 0x0000ff00
0588: %r12_0 = and %r12_1, 0x00008000
0590: beq %r13_0, 0 -> 0x0598 v
0594: %r12_1 = 0
0598: %r12_0 = rotlw_by_8_then_and %r11_0, -1
059c: branch_cond5 %r12_1, %r13_0 -> 0x05a4 v
05a0: %r12_1 = and %r13_0, -1
05a4: %r12_0 = or %r12_0, %r12_1
05a8: %r12_1 = and %r12_0, 0x00ff0000
05b0: %r12_0 = and %r12_0, 0xff00ffff
05b8: %r12_1 = mul %r12_1, %r11_1
05bc: %r12_0 = and %r10_1, 0x00ff0000
05c4: %r12_1 = add %r12_1, %r13_0
05c8: %r12_1 = and %r12_1, 0x00ff0000
05d0: %r12_0 = and %r12_1, 0x00800000
05d8: beq %r13_0, 0 -> 0x05e0 v
05dc: %r12_1 = 0
05e0: %r12_0 = rotlw_by_16_then_and %r11_0, -1
05e4: branch_cond5 %r12_1, %r13_0 -> 0x05ec v
05e8: %r12_1 = and %r13_0, -1
05ec: %r12_0 = or %r12_0, %r12_1
05f0: %r12_1 = and %r12_0, 0xff000000
05f8: %r12_0 = and %r12_0, 0x00ffffff
0600: %r12_1 = mul %r12_1, %r11_1
0604: %r12_0 = and %r10_1, 0xff000000
060c: %r12_1 = add %r12_1, %r13_0
0610: %r12_1 = and %r12_1, 0xff000000
0618: %r12_0 = and %r12_1, 0x80000000
0620: beq %r13_0, 0 -> 0x0628 v
0624: %r12_1 = 0
0628: %r12_0 = rotlw_by_24_then_and %r11_0, -1
062c: branch_cond5 %r12_1, %r13_0 -> 0x0634 v
0630: %r12_1 = and %r13_0, -1
0634: %r12_0 = or %r12_0, %r12_1
0638: store_word %r12_0, %r10_0
063c: return
0640: store_word %r10_0, 0xe40015e0
0644: %r12_0 = *(0xe40015ec)
0648: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
0650: beq %r10_0, 1 -> 0x065c v
0654: %r10_0 = *(0xe40015e0)
0658: jmp 0x0778 v
065c: %r10_0 = *(0xe40015e0)
0660: store_word %r10_0, 0xe40015e0
0664: %r12_0 = *(0xe40015ec)
0668: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0670: beq %r10_0, 1 -> 0x067c v
0674: %r10_0 = *(0xe40015e0)
0678: jmp 0x06bc v
067c: %r10_0 = *(0xe40015e0)
0680: beq %r11_0, 0 -> 0x0690 v
0684: beq %r11_0, 1 -> 0x069c v
0688: beq %r11_0, 2 -> 0x06a8 v
068c: beq %r11_0, 3 -> 0x06b4 v
0690: %r11_1 = 0x001ff306
0698: jmp 0x06bc v
069c: %r11_1 = 0x001bb306
06a4: jmp 0x06bc v
06a8: %r11_1 = 0x001fa306
06b0: jmp 0x06bc v
06b4: %r11_1 = 0x0018f306
06bc: store_word %r10_0, 0xe40015e0
06c0: %r12_0 = *(0xe40015ec)
06c4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
06cc: beq %r10_0, 2 -> 0x06d8 v
06d0: %r10_0 = *(0xe40015e0)
06d4: jmp 0x0718 v
06d8: %r10_0 = *(0xe40015e0)
06dc: beq %r11_0, 0 -> 0x06ec v
06e0: beq %r11_0, 1 -> 0x06f8 v
06e4: beq %r11_0, 2 -> 0x0704 v
06e8: beq %r11_0, 3 -> 0x0710 v
06ec: %r11_1 = 0x001ff306
06f4: jmp 0x0718 v
06f8: %r11_1 = 0x001bb306
0700: jmp 0x0718 v
0704: %r11_1 = 0x001fa306
070c: jmp 0x0718 v
0710: %r11_1 = 0x0018f306
0718: store_word %r10_0, 0xe40015e0
071c: %r12_0 = *(0xe40015ec)
0720: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0728: beq %r10_0, 6 -> 0x0734 v
072c: %r10_0 = *(0xe40015e0)
0730: jmp 0x0774 v
0734: %r10_0 = *(0xe40015e0)
0738: beq %r11_0, 0 -> 0x0748 v
073c: beq %r11_0, 1 -> 0x0754 v
0740: beq %r11_0, 2 -> 0x0760 v
0744: beq %r11_0, 3 -> 0x076c v
0748: %r11_1 = 0x001ff306
0750: jmp 0x0774 v
0754: %r11_1 = 0x001bb306
075c: jmp 0x0774 v
0760: %r11_1 = 0x001fa306
0768: jmp 0x0774 v
076c: %r11_1 = 0x0018f306
0774: jmp 0x0b10 v
0778: store_word %r10_0, 0xe40015e0
077c: %r12_0 = *(0xe40015ec)
0780: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
0788: beq %r10_0, 2 -> 0x0794 v
078c: %r10_0 = *(0xe40015e0)
0790: jmp 0x0b04 v
0794: %r10_0 = *(0xe40015e0)
0798: store_word %r10_0, 0xe40015e0
079c: %r12_0 = *(0xe40015ec)
07a0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
07a8: beq %r10_0, 1 -> 0x07b4 v
07ac: %r10_0 = *(0xe40015e0)
07b0: jmp 0x0814 v
07b4: %r10_0 = *(0xe40015e0)
07b8: store_word %r10_0, 0xe40015e0
07bc: %r12_0 = *(0xe40015ec)
07c0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
07c8: beq %r10_0, 4 -> 0x07d4 v
07cc: %r10_0 = *(0xe40015e0)
07d0: jmp 0x0814 v
07d4: %r10_0 = *(0xe40015e0)
07d8: beq %r11_0, 0 -> 0x07e8 v
07dc: beq %r11_0, 1 -> 0x07f4 v
07e0: beq %r11_0, 2 -> 0x0800 v
07e4: beq %r11_0, 3 -> 0x080c v
07e8: %r11_1 = 0x000af306
07f0: jmp 0x0814 v
07f4: %r11_1 = 0x0008f306
07fc: jmp 0x0814 v
0800: %r11_1 = 0x0006f306
0808: jmp 0x0814 v
080c: %r11_1 = 0x0004f306
0814: store_word %r10_0, 0xe40015e0
0818: %r12_0 = *(0xe40015ec)
081c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0824: beq %r10_0, 1 -> 0x0830 v
0828: %r10_0 = *(0xe40015e0)
082c: jmp 0x0894 v
0830: %r10_0 = *(0xe40015e0)
0834: store_word %r10_0, 0xe40015e0
0838: %r12_0 = *(0xe40015ec)
083c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0844: beq %r10_0, 0x00000009 -> 0x0854 v
084c: %r10_0 = *(0xe40015e0)
0850: jmp 0x0894 v
0854: %r10_0 = *(0xe40015e0)
0858: beq %r11_0, 0 -> 0x0868 v
085c: beq %r11_0, 1 -> 0x0874 v
0860: beq %r11_0, 2 -> 0x0880 v
0864: beq %r11_0, 3 -> 0x088c v
0868: %r11_1 = 0x000af306
0870: jmp 0x0894 v
0874: %r11_1 = 0x0008f306
087c: jmp 0x0894 v
0880: %r11_1 = 0x0006f306
0888: jmp 0x0894 v
088c: %r11_1 = 0x0004f306
0894: store_word %r10_0, 0xe40015e0
0898: %r12_0 = *(0xe40015ec)
089c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
08a4: beq %r10_0, 2 -> 0x08b0 v
08a8: %r10_0 = *(0xe40015e0)
08ac: jmp 0x0910 v
08b0: %r10_0 = *(0xe40015e0)
08b4: store_word %r10_0, 0xe40015e0
08b8: %r12_0 = *(0xe40015ec)
08bc: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
08c4: beq %r10_0, 0 -> 0x08d0 v
08c8: %r10_0 = *(0xe40015e0)
08cc: jmp 0x0910 v
08d0: %r10_0 = *(0xe40015e0)
08d4: beq %r11_0, 0 -> 0x08e4 v
08d8: beq %r11_0, 1 -> 0x08f0 v
08dc: beq %r11_0, 2 -> 0x08fc v
08e0: beq %r11_0, 3 -> 0x0908 v
08e4: %r11_1 = 0x005ff306
08ec: jmp 0x0910 v
08f0: %r11_1 = 0x005bb306
08f8: jmp 0x0910 v
08fc: %r11_1 = 0x005fa306
0904: jmp 0x0910 v
0908: %r11_1 = 0x0058f306
0910: store_word %r10_0, 0xe40015e0
0914: %r12_0 = *(0xe40015ec)
0918: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0920: beq %r10_0, 2 -> 0x092c v
0924: %r10_0 = *(0xe40015e0)
0928: jmp 0x098c v
092c: %r10_0 = *(0xe40015e0)
0930: store_word %r10_0, 0xe40015e0
0934: %r12_0 = *(0xe40015ec)
0938: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0940: beq %r10_0, 3 -> 0x094c v
0944: %r10_0 = *(0xe40015e0)
0948: jmp 0x098c v
094c: %r10_0 = *(0xe40015e0)
0950: beq %r11_0, 0 -> 0x0960 v
0954: beq %r11_0, 1 -> 0x096c v
0958: beq %r11_0, 2 -> 0x0978 v
095c: beq %r11_0, 3 -> 0x0984 v
0960: %r11_1 = 0x005ff306
0968: jmp 0x098c v
096c: %r11_1 = 0x005bb306
0974: jmp 0x098c v
0978: %r11_1 = 0x005fa306
0980: jmp 0x098c v
0984: %r11_1 = 0x005f6306
098c: store_word %r10_0, 0xe40015e0
0990: %r12_0 = *(0xe40015ec)
0994: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
099c: beq %r10_0, 2 -> 0x09a8 v
09a0: %r10_0 = *(0xe40015e0)
09a4: jmp 0x0a08 v
09a8: %r10_0 = *(0xe40015e0)
09ac: store_word %r10_0, 0xe40015e0
09b0: %r12_0 = *(0xe40015ec)
09b4: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
09bc: beq %r10_0, 4 -> 0x09c8 v
09c0: %r10_0 = *(0xe40015e0)
09c4: jmp 0x0a08 v
09c8: %r10_0 = *(0xe40015e0)
09cc: beq %r11_0, 0 -> 0x09dc v
09d0: beq %r11_0, 1 -> 0x09e8 v
09d4: beq %r11_0, 2 -> 0x09f4 v
09d8: beq %r11_0, 3 -> 0x0a00 v
09dc: %r11_1 = 0x005ff306
09e4: jmp 0x0a08 v
09e8: %r11_1 = 0x005bb306
09f0: jmp 0x0a08 v
09f4: %r11_1 = 0x005fa306
09fc: jmp 0x0a08 v
0a00: %r11_1 = 0x005f6306
0a08: store_word %r10_0, 0xe40015e0
0a0c: %r12_0 = *(0xe40015ec)
0a10: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0a18: beq %r10_0, 6 -> 0x0a24 v
0a1c: %r10_0 = *(0xe40015e0)
0a20: jmp 0x0a84 v
0a24: %r10_0 = *(0xe40015e0)
0a28: store_word %r10_0, 0xe40015e0
0a2c: %r12_0 = *(0xe40015ec)
0a30: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0a38: beq %r10_0, 1 -> 0x0a44 v
0a3c: %r10_0 = *(0xe40015e0)
0a40: jmp 0x0a84 v
0a44: %r10_0 = *(0xe40015e0)
0a48: beq %r11_0, 0 -> 0x0a58 v
0a4c: beq %r11_0, 1 -> 0x0a64 v
0a50: beq %r11_0, 2 -> 0x0a70 v
0a54: beq %r11_0, 3 -> 0x0a7c v
0a58: %r11_1 = 0x00faf306
0a60: jmp 0x0a84 v
0a64: %r11_1 = 0x00faf306
0a6c: jmp 0x0a84 v
0a70: %r11_1 = 0x00fef306
0a78: jmp 0x0a84 v
0a7c: %r11_1 = 0x00fef306
0a84: store_word %r10_0, 0xe40015e0
0a88: %r12_0 = *(0xe40015ec)
0a8c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0a94: beq %r10_0, 6 -> 0x0aa0 v
0a98: %r10_0 = *(0xe40015e0)
0a9c: jmp 0x0b00 v
0aa0: %r10_0 = *(0xe40015e0)
0aa4: store_word %r10_0, 0xe40015e0
0aa8: %r12_0 = *(0xe40015ec)
0aac: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0ab4: beq %r10_0, 2 -> 0x0ac0 v
0ab8: %r10_0 = *(0xe40015e0)
0abc: jmp 0x0b00 v
0ac0: %r10_0 = *(0xe40015e0)
0ac4: beq %r11_0, 0 -> 0x0ad4 v
0ac8: beq %r11_0, 1 -> 0x0ae0 v
0acc: beq %r11_0, 2 -> 0x0aec v
0ad0: beq %r11_0, 3 -> 0x0af8 v
0ad4: %r11_1 = 0x00faf306
0adc: jmp 0x0b00 v
0ae0: %r11_1 = 0x00faf306
0ae8: jmp 0x0b00 v
0aec: %r11_1 = 0x00fef306
0af4: jmp 0x0b00 v
0af8: %r11_1 = 0x00fef306
0b00: jmp 0x0b10 v
0b04: delay -7
0b0c: jmp 0x0b04 ^
0b10: return
0b14: %r10_0 = 0
0b18: branch_cond0 %r10_0, 5 -> 0x0b28 v
0b1c: store_word 0x0015159a, 0xe4000024
0b24: jmp 0x100c v
0b28: %r10_0 = add %r10_0, 1
0b2c: store_word_0_100 %r11_1, MC0_PAD_CAL_CNTL
0b30: %r10_0 = load_word -6
0b34: sync
0b38: delay -7
0b3c: %r10_1 = and %r11_1, -7
0b40: store_word_0_100 %r10_1, MC0_PAD_CAL_CNTL
0b44: %r10_0 = load_word -6
0b48: sync
0b4c: delay -7
0b50: store_word 0x00000200, MC0_PAD_CAL_CNTL
0b58: %r10_0 = load_word -6
0b5c: %r10_0 = rotlw_by_20_then_and %r10_1, 0x00f00000
0b64: store_word 0, MC0_PAD_CAL_CNTL
0b68: %r10_0 = load_word -6
0b6c: %r10_1 = rotlw_by_5_then_and %r10_1, 0x00000200
0b74: %r10_0 = or %r11_0, %r10_1
0b78: %r10_0 = load_word -6
0b7c: %r10_1 = xor %r10_1, 0x0000000f
0b84: %r10_1 = rotlw_by_16_then_and %r10_1, 0x000f0000
0b8c: %r10_0 = or %r11_0, %r10_1
0b90: store_word 0x00000100, MC0_PAD_CAL_CNTL
0b98: %r10_0 = load_word -6
0b9c: %r10_1 = rotlw_by_4_then_and %r10_1, 0x00000100
0ba4: %r10_0 = or %r11_0, %r10_1
0ba8: %r10_0 = load_word -6
0bac: %r10_1 = rotlw_by_12_then_and %r10_1, 0x0000f000
0bb4: %r10_0 = or %r11_0, %r10_1
0bb8: %r10_1 = and %r11_1, 0x00fff300
0bc0: branch_cond0 %r10_1, %r11_0 -> 0x0b18 ^
0bc4: store_word 0x00000200, MC1_PAD_CAL_CNTL
0bcc: %r10_0 = load_word -6
0bd0: %r10_0 = rotlw_by_20_then_and %r10_1, 0x00f00000
0bd8: store_word 0, MC1_PAD_CAL_CNTL
0bdc: %r10_0 = load_word -6
0be0: %r10_1 = rotlw_by_5_then_and %r10_1, 0x00000200
0be8: %r10_0 = or %r11_0, %r10_1
0bec: %r10_0 = load_word -6
0bf0: %r10_1 = xor %r10_1, 0x0000000f
0bf8: %r10_1 = rotlw_by_16_then_and %r10_1, 0x000f0000
0c00: %r10_0 = or %r11_0, %r10_1
0c04: store_word 0x00000100, MC1_PAD_CAL_CNTL
0c0c: %r10_0 = load_word -6
0c10: %r10_1 = rotlw_by_4_then_and %r10_1, 0x00000100
0c18: %r10_0 = or %r11_0, %r10_1
0c1c: %r10_0 = load_word -6
0c20: %r10_1 = rotlw_by_12_then_and %r10_1, 0x0000f000
0c28: %r10_0 = or %r11_0, %r10_1
0c2c: %r10_1 = and %r11_1, 0x00fff300
0c34: branch_cond0 %r10_1, %r11_0 -> 0x0b18 ^
0c38: return
0c3c: %r12_0 = load_word -5
0c40: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
0c48: branch_cond2 %r11_1, %r11_0 -> 0x0c50 v
0c4c: %r10_0 = %r11_1
0c50: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
0c58: branch_cond2 %r11_1, %r11_0 -> 0x0c60 v
0c5c: %r10_0 = %r11_1
0c60: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
0c68: branch_cond2 %r11_1, %r11_0 -> 0x0c70 v
0c6c: %r10_0 = %r11_1
0c70: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
0c78: branch_cond2 %r11_1, %r11_0 -> 0x0c80 v
0c7c: %r10_0 = %r11_1
0c80: store_word %r11_0, 0xe4000024
0c84: return
0c88: return
0c8c: return
0c90: store_word 0x0010109a, 0xe4000024
0c98: call 0x100c
0c9c: jmp 0x1874 v
0ca0: %r10_0 = *(SMC_FIFO_INBOX_CTRL_STATUS)
0ca8: %r10_0 = and %r10_0, 4
0cac: beq %r10_0, 0 -> 0x0ca0 ^
0cb0: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
0cb8: store_word %r10_1, SMC_FIFO_INBOX_DATA
0cc0: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
0cc8: return
0ccc: beq %r10_0, 3 -> 0x0d5c v
0cd0: beq %r10_0, 2 -> 0x0d30 v
0cd4: beq %r10_0, 1 -> 0x0d04 v
0cd8: %r10_1 = 0x000f0199
0ce0: call 0x0ca0
0ce4: delay -7
0cec: %r10_1 = 0x00000099
0cf4: call 0x0ca0
0cf8: delay -7
0d00: return
0d04: %r10_1 = 0x00010199
0d0c: call 0x0ca0
0d10: delay -7
0d18: %r10_1 = 0x00000099
0d20: call 0x0ca0
0d24: delay -7
0d2c: return
0d30: %r10_1 = 0x00030199
0d38: call 0x0ca0
0d3c: delay -7
0d44: %r10_1 = 0x00000099
0d4c: call 0x0ca0
0d50: delay -7
0d58: return
0d5c: %r10_1 = 0x00070199
0d64: call 0x0ca0
0d68: delay -7
0d70: %r10_1 = 0x00000099
0d78: call 0x0ca0
0d7c: delay -7
0d84: return
0d88: beq %r10_0, 3 -> 0x0e18 v
0d8c: beq %r10_0, 2 -> 0x0dec v
0d90: beq %r10_0, 1 -> 0x0dc0 v
0d94: %r10_1 = 0x00f00199
0d9c: call 0x0ca0
0da0: delay -7
0da8: %r10_1 = 0x00000099
0db0: call 0x0ca0
0db4: delay -7
0dbc: return
0dc0: %r10_1 = 0x00100199
0dc8: call 0x0ca0
0dcc: delay -7
0dd4: %r10_1 = 0x00000099
0ddc: call 0x0ca0
0de0: delay -7
0de8: return
0dec: %r10_1 = 0x00300199
0df4: call 0x0ca0
0df8: delay -7
0e00: %r10_1 = 0x00000099
0e08: call 0x0ca0
0e0c: delay -7
0e14: return
0e18: %r10_1 = 0x00700199
0e20: call 0x0ca0
0e24: delay -7
0e2c: %r10_1 = 0x00000099
0e34: call 0x0ca0
0e38: delay -7
0e40: return
0e44: beq %r10_0, 3 -> 0x0ed4 v
0e48: beq %r10_0, 2 -> 0x0ea8 v
0e4c: beq %r10_0, 1 -> 0x0e7c v
0e50: %r10_1 = 0x00ff0199
0e58: call 0x0ca0
0e5c: delay -7
0e64: %r10_1 = 0x00000099
0e6c: call 0x0ca0
0e70: delay -7
0e78: return
0e7c: %r10_1 = 0x00110199
0e84: call 0x0ca0
0e88: delay -7
0e90: %r10_1 = 0x00000099
0e98: call 0x0ca0
0e9c: delay -7
0ea4: return
0ea8: %r10_1 = 0x00330199
0eb0: call 0x0ca0
0eb4: delay -7
0ebc: %r10_1 = 0x00000099
0ec4: call 0x0ca0
0ec8: delay -7
0ed0: return
0ed4: %r10_1 = 0x00770199
0edc: call 0x0ca0
0ee0: delay -7
0ee8: %r10_1 = 0x00000099
0ef0: call 0x0ca0
0ef4: delay -7
0efc: return
0f00: %r10_1 = 1
0f04: call 0x0ca0
0f08: %r10_1 = 0x0000038c
0f10: call 0x0ca0
0f14: delay -7
0f1c: %r11_1 = 0
0f20: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0f24: call 0x0e44
0f28: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0f2c: call 0x0e44
0f30: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0f34: call 0x0e44
0f38: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0f3c: call 0x0e44
0f40: delay -7
0f48: %r11_1 = 0x00000032
0f50: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0f54: call 0x0d88
0f58: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0f5c: call 0x0d88
0f60: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0f64: call 0x0d88
0f68: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0f6c: call 0x0d88
0f70: delay -7
0f78: %r10_1 = 0x0000018c
0f80: call 0x0ca0
0f84: delay -7
0f8c: return
0f90: call 0x0f00
0f94: %r12_0 = load_word -4
0f98: %r11_1 = rotlw_by_24_then_and %r11_1, 0x000000ff
0fa0: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0fa4: call 0x0ccc
0fa8: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0fac: call 0x0ccc
0fb0: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0fb4: call 0x0ccc
0fb8: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0fbc: call 0x0ccc
0fc0: delay -7
0fc8: %r12_0 = load_word -4
0fcc: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0fd0: call 0x0d88
0fd4: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0fd8: call 0x0d88
0fdc: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0fe0: call 0x0d88
0fe4: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0fe8: call 0x0d88
0fec: delay -7
0ff4: jmp 0x0f94 ^
0ff8: call 0x0f00
0ffc: %r10_1 = 0x00ff0199
1004: call 0x0ca0
1008: jmp 0x1008 ^
100c: store_word %r10_0, 0xe4000028
1010: store_word %r10_0, 0xe40015e0
1014: %r10_0 = *(0xe40015e8)
1018: %r10_0 = rotlw_by_0_then_and %r10_0, 1
101c: branch_cond0 %r10_0, 1 -> 0x1028 v
1020: %r10_0 = *(0xe40015e0)
1024: jmp 0x1058 v
1028: %r10_0 = *(0xe40015e0)
102c: %r10_0 = *(SMC_FIFO_INBOX_CTRL_STATUS)
1034: %r10_0 = and %r10_0, 4
1038: beq %r10_0, 0 -> 0x102c ^
103c: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
1044: %r12_0 = *(0xe4000024)
1048: store_word %r10_0, SMC_FIFO_INBOX_DATA
1050: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
1058: %r10_0 = *(0xe4000028)
105c: return
1060: %r11_1 = rotlw_by_31_then_and %r11_1, 0x0000007f
1068: branch_cond0 %r10_0, %r10_1 -> 0x1070 v
106c: return
1070: %r11_1 = or %r11_1, 0x00000080
1078: return
107c: %r11_1 = rotlw_by_31_then_and %r11_1, 7
1080: %r10_0 = rotlw_by_0_then_and %r13_0, 0x000000ff
1088: beq %r10_0, 0 -> 0x10b4 v
108c: %r10_0 = rotlw_by_24_then_and %r13_0, 0x000000ff
1094: beq %r10_0, 0 -> 0x10b4 v
1098: %r10_0 = rotlw_by_16_then_and %r13_0, 0x000000ff
10a0: beq %r10_0, 0 -> 0x10b4 v
10a4: %r10_0 = rotlw_by_8_then_and %r13_0, 0x000000ff
10ac: beq %r10_0, 0 -> 0x10b4 v
10b0: return
10b4: %r11_1 = or %r11_1, 0x00000008
10bc: return
10c0: %r10_1 = 0
10c4: %r10_0 = and %r12_0, 0x000000ff
10cc: branch_cond0 %r10_0, 0 -> 0x10d4 v
10d0: %r10_1 = or %r10_1, 1
10d4: %r10_0 = and %r12_0, 0x0000ff00
10dc: branch_cond0 %r10_0, 0 -> 0x10e4 v
10e0: %r10_1 = or %r10_1, 2
10e4: %r10_0 = and %r12_0, 0x00ff0000
10ec: branch_cond0 %r10_0, 0 -> 0x10f4 v
10f0: %r10_1 = or %r10_1, 4
10f4: %r10_0 = and %r12_0, 0xff000000
10fc: branch_cond0 %r10_0, 0 -> 0x1108 v
1100: %r10_1 = or %r10_1, 0x00000008
1108: %r10_0 = and %r12_1, 0x000000ff
1110: branch_cond0 %r10_0, 0 -> 0x1118 v
1114: %r10_1 = or %r10_1, 1
1118: %r10_0 = and %r12_1, 0x0000ff00
1120: branch_cond0 %r10_0, 0 -> 0x1128 v
1124: %r10_1 = or %r10_1, 2
1128: %r10_0 = and %r12_1, 0x00ff0000
1130: branch_cond0 %r10_0, 0 -> 0x1138 v
1134: %r10_1 = or %r10_1, 4
1138: %r10_0 = and %r12_1, 0xff000000
1140: branch_cond0 %r10_0, 0 -> 0x114c v
1144: %r10_1 = or %r10_1, 0x00000008
114c: return
1150: %r12_0 = 0
1154: %r10_0 = and %r13_1, 0x0000000f
115c: beq %r10_0, 0x0000000f -> 0x1168 v
1164: %r12_0 = or %r12_0, 1
1168: %r10_0 = and %r13_1, 0x000000f0
1170: beq %r10_0, 0x000000f0 -> 0x117c v
1178: %r12_0 = or %r12_0, 2
117c: %r10_0 = and %r13_1, 0x00000f00
1184: beq %r10_0, 0x00000f00 -> 0x1190 v
118c: %r12_0 = or %r12_0, 4
1190: %r10_0 = and %r13_1, 0x0000f000
1198: beq %r10_0, 0x0000f000 -> 0x11a8 v
11a0: %r12_0 = or %r12_0, 0x00000008
11a8: %r10_0 = and %r13_1, 0x000f0000
11b0: beq %r10_0, 0x000f0000 -> 0x11c0 v
11b8: %r12_0 = or %r12_0, 0x00000010
11c0: %r10_0 = and %r13_1, 0x00f00000
11c8: beq %r10_0, 0x00f00000 -> 0x11d8 v
11d0: %r12_0 = or %r12_0, 0x00000020
11d8: %r10_0 = and %r13_1, 0x0f000000
11e0: beq %r10_0, 0x0f000000 -> 0x11f0 v
11e8: %r12_0 = or %r12_0, 0x00000040
11f0: %r10_0 = and %r13_1, 0xf0000000
11f8: beq %r10_0, 0xf0000000 -> 0x1208 v
1200: %r12_0 = or %r12_0, 0x00000080
1208: return
120c: return
1210: store_word 0x20000000, 0xe1020000
1218: store_word 0x20000000, 0xe1040000
1220: store_word 0, 0xe4002800
1224: store_word 0x08000000, 0xe4002804
122c: %r12_0 = load_word -4
1230: %r11_1 = rotlw_by_28_then_and %r11_1, 7
1234: branch_cond0 %r11_1, 5 -> 0x1240 v
1238: %r10_1 = 0x20003021
1240: branch_cond0 %r11_1, 6 -> 0x124c v
1244: %r10_1 = 0x20001011
124c: branch_cond0 %r11_1, 7 -> 0x1258 v
1250: %r10_1 = 0x20003025
1258: branch_cond0 %r11_1, 0 -> 0x1264 v
125c: %r10_1 = 0x20000009
1264: branch_cond0 %r11_1, 1 -> 0x1270 v
1268: %r10_1 = 0x20003029
1270: branch_cond0 %r11_1, 2 -> 0x127c v
1274: %r10_1 = 0x20001015
127c: branch_cond0 %r11_1, 3 -> 0x1288 v
1280: %r10_1 = 0x2000302d
1288: branch_cond0 %r11_1, 4 -> 0x1294 v
128c: %r10_1 = 0x2000000b
1294: store_word %r10_1, 0xe4000210
1298: %r10_1 = or %r10_1, 0x000c0000
12a0: store_word %r10_1, 0xe4000210
12a4: %r10_0 = *(0xe4000210)
12a8: sync
12ac: delay -7
12b0: %r10_1 = and %r10_1, 0xdff3ffff
12b8: store_word %r10_1, 0xe4000210
12bc: store_word 0x00000200, 0xe4000200
12c4: store_word %r10_1, 0xe4000284
12c8: %r10_1 = or %r10_1, 0x000c0000
12d0: store_word %r10_1, 0xe4000284
12d4: %r12_0 = *(0xe4000284)
12d8: sync
12dc: delay -7
12e0: %r10_1 = and %r10_1, 0xdff3ffff
12e8: store_word %r10_1, 0xe4000284
12ec: call 0x3bb4
12f0: %r10_1 = 0x20000013
12f8: store_word %r10_1, 0xe4000244
12fc: %r10_1 = or %r10_1, 0x000c0000
1304: store_word %r10_1, 0xe4000244
1308: %r12_0 = *(0xe4000244)
130c: sync
1310: delay -7
1314: %r10_1 = and %r10_1, 0xdff3ffff
131c: store_word %r10_1, 0xe4000244
1320: store_word 0, 0xe40001a8
1324: %r10_0 = *(0xd0008000)
1328: %r10_0 = rotlw_by_16_then_and %r10_0, 0x0000ffff
1330: %r10_1 = rotlw_by_28_then_and %r10_0, 0x0000000f
1338: store_word %r10_0, 0xe40015e0
133c: store_word %r10_1, 0xe40015e4
1340: %r10_1 = and %r10_1, 0x0000000f
1348: %r12_0 = *(0xe40015ec)
134c: %r10_0 = rotlw_by_24_then_and %r10_0, 0xfffffff0
1354: %r10_0 = or %r10_0, %r10_1
1358: %r10_0 = rotlw_by_8_then_and %r10_0, -1
135c: store_word %r10_0, 0xe40015ec
1360: %r10_0 = *(0xe40015e0)
1364: %r12_0 = load_word -6
1368: %r10_0 = *(0xd0008008)
136c: %r10_0 = and %r10_0, 0x000000ff
1374: store_word %r10_0, 0xe40015e0
1378: %r12_0 = *(0xe40015ec)
137c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1384: branch_cond0 %r10_0, 1 -> 0x1390 v
1388: %r10_0 = *(0xe40015e0)
138c: jmp 0x13d8 v
1390: %r10_0 = *(0xe40015e0)
1394: store_word %r10_0, 0xe40015e0
1398: %r12_0 = *(0xe40015ec)
139c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
13a4: branch_cond0 %r10_0, 2 -> 0x13b0 v
13a8: %r10_0 = *(0xe40015e0)
13ac: jmp 0x13d8 v
13b0: %r10_0 = *(0xe40015e0)
13b4: store_word %r10_0, 0xe40015e0
13b8: %r12_0 = *(0xe40015ec)
13bc: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
13c4: branch_cond0 %r10_0, 3 -> 0x13d0 v
13c8: %r10_0 = *(0xe40015e0)
13cc: jmp 0x13d8 v
13d0: %r10_0 = *(0xe40015e0)
13d4: jmp 0x13d4 ^
13d8: store_word %r10_0, 0xe40015e0
13dc: %r12_0 = *(0xe40015ec)
13e0: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
13e8: beq %r10_0, 2 -> 0x13f4 v
13ec: %r10_0 = *(0xe40015e0)
13f0: jmp 0x1434 v
13f4: %r10_0 = *(0xe40015e0)
13f8: store_word 0x0000000e, 0xe1016100
1400: delay -7
1404: sync
1408: store_word 0x00000009, 0xe1016000
1410: %r10_0 = *(0xe1016000)
1414: sync
1418: store_word 0x00000401, 0xe1016100
1420: delay -7
1424: sync
1428: store_word 3, 0xe1016000
142c: %r10_0 = *(0xe1016000)
1430: sync
1434: store_word %r10_0, 0xe40015e0
1438: %r12_0 = *(0xe40015ec)
143c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1444: beq %r10_0, 3 -> 0x1450 v
1448: %r10_0 = *(0xe40015e0)
144c: jmp 0x14b8 v
1450: %r10_0 = *(0xe40015e0)
1454: %r10_0 = load_word -6
1458: %r10_1 = and %r10_1, 0xffefffff
1460: store_word %r10_1, 0xe4000248
1464: store_word 4, 0xe1016100
1468: delay -7
146c: sync
1470: store_word 4, 0xe1016000
1474: %r10_0 = *(0xe1016000)
1478: sync
147c: store_word 0x00001027, 0xe1016000
1484: %r10_0 = *(0xe1016000)
1488: sync
148c: %r10_0 = *(0xe1016200)
1490: sync
1494: %r10_0 = and %r10_0, 0xbfffffff
149c: store_word %r10_0, 0xe1016100
14a0: delay -7
14a4: sync
14a8: store_word 0x00000027, 0xe1016000
14b0: %r10_0 = *(0xe1016000)
14b4: sync
14b8: store_word 0x00024024, 0xe40002a0
14c0: store_word 0x00024024, 0xe40002a8
14c8: store_word_0_100 0x00000342, MC0_PAD_IF_CNTL
14d0: %r10_0 = 0
14d4: store_word %r10_0, 0xe40015e0
14d8: %r12_0 = *(0xe40015ec)
14dc: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
14e4: beq %r10_0, 3 -> 0x14f0 v
14e8: %r10_0 = *(0xe40015e0)
14ec: jmp 0x14fc v
14f0: %r10_0 = *(0xe40015e0)
14f4: %r10_0 = 0x11111111
14fc: store_word_0_100 %r10_0, MC0_PAD_IF_CNTL_2
1500: %r10_0 = 0x50505050
1508: store_word_0_100 %r10_0, MC0_DLL_MASTER_ADJ_0
150c: store_word_0_100 %r10_0, MC0_DLL_MASTER_ADJ_1
1510: %r10_0 = 0x0a0a0a0a
1518: store_word_0_100 %r10_0, MC0_RD_STR_DLY_0
151c: store_word_0_100 %r10_0, MC0_RD_STR_DLY_1
1520: %r10_0 = 0x0f0f0f0f
1528: store_word_0_100 %r10_0, MC0_WR_STR_DLL_0
152c: store_word_0_100 %r10_0, MC0_WR_STR_DLL_1
1530: %r12_0 = *(MC1_WR_STR_DLL_1)
1534: sync
1538: delay -7
153c: call 0x3bb4
1540: %r10_0 = 0
1544: %r10_1 = -1
1548: store_word %r10_0, 0xe40015e0
154c: %r12_0 = *(0xe40015ec)
1550: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1558: beq %r10_0, 3 -> 0x1564 v
155c: %r10_0 = *(0xe40015e0)
1560: jmp 0x1578 v
1564: %r10_0 = *(0xe40015e0)
1568: %r10_0 = 0x00009000
1570: %r10_1 = 0x22222222
1578: store_word_0_100 %r10_0, MC0_TERM_CNTL
157c: store_word_0_100 %r10_1, MC0_WR_STR_DLY
1580: store_word %r10_0, 0xe40015e0
1584: %r12_0 = *(0xe40015ec)
1588: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1590: branch_cond0 %r10_0, 3 -> 0x159c v
1594: %r10_0 = *(0xe40015e0)
1598: jmp 0x15c0 v
159c: %r10_0 = *(0xe40015e0)
15a0: store_word_0_100 1, MC0_PAD_CAL_CNTL
15a4: %r10_0 = *(MC1_PAD_CAL_CNTL)
15a8: sync
15ac: delay -7
15b0: store_word_0_100 0, MC0_PAD_CAL_CNTL
15b4: %r11_1 = 0x000ff306
15bc: call 0x0b14
15c0: store_word %r10_0, 0xe40015e0
15c4: %r12_0 = *(0xe40015ec)
15c8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
15d0: beq %r10_0, 3 -> 0x15dc v
15d4: %r10_0 = *(0xe40015e0)
15d8: jmp 0x15ec v
15dc: %r10_0 = *(0xe40015e0)
15e0: store_word_0_100 1, MC0_PAD_CAL_CNTL
15e4: store_word_0_100 0x00000008, MC0_PAD_CAL_CNTL
15ec: store_word 0, 0xe40002a4
15f0: store_word_0_100 0, MC0_CNTL
15f4: store_word_0_100 0, MC0_POINTER
15f8: store_word_0_100 0x001c0000, MC0_DRAM_CMD
1600: store_word_0_100 2, MC0_CNTL
1604: %r10_0 = *(MC1_CNTL)
1608: sync
160c: delay -7
1610: %r10_0 = 0x00000019
1618: store_word %r10_0, 0xe40015e0
161c: %r12_0 = *(0xe40015ec)
1620: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1628: beq %r10_0, 3 -> 0x1634 v
162c: %r10_0 = *(0xe40015e0)
1630: jmp 0x163c v
1634: %r10_0 = *(0xe40015e0)
1638: %r10_0 = 1
163c: store_word %r10_0, 0xe40002a4
1640: %r12_0 = *(0xe40002a4)
1644: sync
1648: delay -7
164c: store_word_0_100 0, MC0_POINTER
1650: store_word_0_100 0x423c0000, MC0_DRAM_CMD
1658: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1660: store_word_0_100 0x06200221, MC0_DRAM_CMD
1668: store_word_0_100 0x0620808d, MC0_DRAM_CMD
1670: store_word_0_100 0x06200772, MC0_DRAM_CMD
1678: store_word_0_100 2, MC0_CNTL
167c: %r10_0 = *(MC1_CNTL)
1680: sync
1684: delay -7
1688: store_word_0_100 0, MC0_POINTER
168c: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1694: store_word_0_100 0x2f240000, MC0_DRAM_CMD
169c: store_word_0_100 0x2f240000, MC0_DRAM_CMD
16a4: store_word_0_100 0x0620c48d, MC0_DRAM_CMD
16ac: store_word_0_100 2, MC0_CNTL
16b0: %r10_0 = *(MC1_CNTL)
16b4: sync
16b8: %r12_0 = load_word -3
16bc: %r12_0 = load_word -2
16c0: store_word_0_100 0, MC0_POINTER
16c4: store_word_0_100 0x0620c08d, MC0_DRAM_CMD
16cc: store_word_0_100 2, MC0_CNTL
16d0: store_word_0_100 0, MC0_POINTER
16d4: store_word_0_100 0x0620a48d, MC0_DRAM_CMD
16dc: store_word_0_100 2, MC0_CNTL
16e0: %r10_0 = *(MC1_CNTL)
16e4: sync
16e8: %r12_0 = load_word -1
16ec: %r12_0 = load_word 0
16f0: store_word_0_100 0, MC0_POINTER
16f4: store_word_0_100 0x0620a08d, MC0_DRAM_CMD
16fc: store_word_0_100 2, MC0_CNTL
1700: %r10_1 = and %r12_0, 0x00ff00ff
1708: %r10_0 = and %r12_1, 0x00ff00ff
1710: branch_cond0 %r10_1, %r11_0 -> 0x0c90 ^
1714: %r10_0 = rotlw_by_16_then_and %r11_0, -1
1718: branch_cond0 %r10_1, %r11_0 -> 0x0c90 ^
171c: %r10_1 = and %r13_0, 0xff00ff00
1724: %r10_0 = and %r13_1, 0xff00ff00
172c: branch_cond0 %r10_1, %r11_0 -> 0x0c90 ^
1730: %r10_0 = rotlw_by_16_then_and %r11_0, -1
1734: branch_cond0 %r10_1, %r11_0 -> 0x0c90 ^
1738: %r10_1 = rotlw_by_28_then_and %r12_0, 0x0000000f
1740: store_word %r10_0, 0xe40015e0
1744: store_word %r10_1, 0xe40015e4
1748: %r10_1 = and %r10_1, 0x0000000f
1750: %r12_0 = *(0xe40015ec)
1754: %r10_0 = rotlw_by_28_then_and %r10_0, 0xfffffff0
175c: %r10_0 = or %r10_0, %r10_1
1760: %r10_0 = rotlw_by_4_then_and %r10_0, -1
1764: store_word %r10_0, 0xe40015ec
1768: %r10_0 = *(0xe40015e0)
176c: %r12_0 = load_word -6
1770: %r10_1 = and %r12_0, 0x0000000f
1778: store_word %r10_0, 0xe40015e0
177c: %r10_0 = *(0xe40015e8)
1780: %r10_0 = and %r10_0, 0xfffffff7
1788: %r10_0 = or %r10_0, 0
178c: store_word %r10_0, 0xe40015e8
1790: %r10_0 = *(0xe40015e0)
1794: branch_cond0 %r10_1, 1 -> 0x17f4 v
1798: store_word %r10_0, 0xe40015e0
179c: %r12_0 = *(0xe40015ec)
17a0: %r10_0 = and %r10_0, 0xfffffff0
17a8: %r10_0 = or %r10_0, 1
17ac: store_word %r10_0, 0xe40015ec
17b0: %r10_0 = *(0xe40015e0)
17b4: store_word %r10_0, 0xe40015e0
17b8: %r12_0 = *(0xe40015ec)
17bc: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
17c4: beq %r10_0, 4 -> 0x17d0 v
17c8: %r10_0 = *(0xe40015e0)
17cc: jmp 0x17f4 v
17d0: %r10_0 = *(0xe40015e0)
17d4: store_word %r10_0, 0xe40015e0
17d8: %r10_0 = *(0xe40015e8)
17dc: %r10_0 = and %r10_0, 0xfffffff7
17e4: %r10_0 = or %r10_0, 0x00000008
17ec: store_word %r10_0, 0xe40015e8
17f0: %r10_0 = *(0xe40015e0)
17f4: branch_cond0 %r10_1, 2 -> 0x1854 v
17f8: store_word %r10_0, 0xe40015e0
17fc: %r12_0 = *(0xe40015ec)
1800: %r10_0 = and %r10_0, 0xfffffff0
1808: %r10_0 = or %r10_0, 2
180c: store_word %r10_0, 0xe40015ec
1810: %r10_0 = *(0xe40015e0)
1814: store_word %r10_0, 0xe40015e0
1818: %r12_0 = *(0xe40015ec)
181c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1824: beq %r10_0, 4 -> 0x1830 v
1828: %r10_0 = *(0xe40015e0)
182c: jmp 0x1854 v
1830: %r10_0 = *(0xe40015e0)
1834: store_word %r10_0, 0xe40015e0
1838: %r10_0 = *(0xe40015e8)
183c: %r10_0 = and %r10_0, 0xfffffff7
1844: %r10_0 = or %r10_0, 0x00000008
184c: store_word %r10_0, 0xe40015e8
1850: %r10_0 = *(0xe40015e0)
1854: branch_cond0 %r10_1, 6 -> 0x1874 v
1858: store_word %r10_0, 0xe40015e0
185c: %r12_0 = *(0xe40015ec)
1860: %r10_0 = and %r10_0, 0xfffffff0
1868: %r10_0 = or %r10_0, 6
186c: store_word %r10_0, 0xe40015ec
1870: %r10_0 = *(0xe40015e0)
1874: store_word %r10_0, 0xe40015e0
1878: %r10_0 = *(0xe40015e8)
187c: %r10_0 = and %r10_0, -5
1880: %r10_0 = or %r10_0, 0
1884: store_word %r10_0, 0xe40015e8
1888: %r10_0 = *(0xe40015e0)
188c: store_word %r10_0, 0xe40015e0
1890: %r10_0 = *(0xe40015e8)
1894: %r10_0 = rotlw_by_29_then_and %r10_0, 1
1898: branch_cond0 %r10_0, 1 -> 0x18a4 v
189c: %r10_0 = *(0xe40015e0)
18a0: jmp 0x18e4 v
18a4: %r10_0 = *(0xe40015e0)
18a8: beq %r12_0, %r13_0 -> 0x18e4 v
18ac: store_word %r10_0, 0xe40015e0
18b0: %r10_0 = *(0xe40015e8)
18b4: %r10_0 = and %r10_0, -5
18b8: %r10_0 = or %r10_0, 4
18bc: store_word %r10_0, 0xe40015e8
18c0: %r10_0 = *(0xe40015e0)
18c4: beq %r12_0, -1 -> 0x18e4 v
18c8: beq %r13_0, -1 -> 0x18e4 v
18cc: store_word %r10_0, 0xe40015e0
18d0: %r10_0 = *(0xe40015e8)
18d4: %r10_0 = and %r10_0, -5
18d8: %r10_0 = or %r10_0, 0
18dc: store_word %r10_0, 0xe40015e8
18e0: %r10_0 = *(0xe40015e0)
18e4: %r10_1 = 0
18e8: %r10_0 = 0x20000000
18f0: store_word %r10_0, 0xe40015e0
18f4: %r10_0 = *(0xe40015e8)
18f8: %r10_0 = rotlw_by_30_then_and %r10_0, 1
18fc: branch_cond0 %r10_0, 0 -> 0x1908 v
1900: %r10_0 = *(0xe40015e0)
1904: jmp 0x191c v
1908: %r10_0 = *(0xe40015e0)
190c: %r10_1 = 0x00000018
1914: %r10_0 = 0x10000000
191c: store_word %r10_0, 0xe40015e0
1920: %r12_0 = *(0xe40015ec)
1924: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
192c: beq %r10_0, 3 -> 0x1938 v
1930: %r10_0 = *(0xe40015e0)
1934: jmp 0x1940 v
1938: %r10_0 = *(0xe40015e0)
193c: %r10_1 = 0
1940: %r12_0 = load_word -4
1944: %r11_1 = and %r11_1, 0xffffffe7
194c: %r11_1 = or %r11_1, %r10_1
1950: store_word %r11_1, 0xe40002a4
1954: store_word %r11_0, 0xe1020000
1958: store_word %r11_0, 0xe1040000
195c: store_word %r10_0, 0xe40015e0
1960: %r12_0 = *(0xe40015ec)
1964: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
196c: beq %r10_0, 3 -> 0x1978 v
1970: %r10_0 = *(0xe40015e0)
1974: jmp 0x1980 v
1978: %r10_0 = *(0xe40015e0)
197c: jmp 0x1990 v
1980: call 0x01ec
1984: %r11_1 = %r10_1
1988: call 0x0b14
198c: %r10_1 = %r11_1
1990: %r12_0 = load_word -6
1994: %r10_1 = and %r10_1, -2
1998: store_word %r10_1, 0xe40002a4
199c: store_word_0_100 0, MC0_POINTER
19a0: store_word_0_100 0x001c0000, MC0_DRAM_CMD
19a8: store_word_0_100 2, MC0_CNTL
19ac: %r10_0 = *(MC1_CNTL)
19b0: sync
19b4: delay -7
19b8: %r10_1 = or %r10_1, 1
19bc: store_word %r10_1, 0xe40002a4
19c0: %r12_0 = *(0xe40002a4)
19c4: sync
19c8: delay -7
19cc: %r10_1 = 0x040e3202
19d4: store_word %r10_0, 0xe40015e0
19d8: %r10_0 = *(0xe40015e8)
19dc: %r10_0 = rotlw_by_30_then_and %r10_0, 1
19e0: branch_cond0 %r10_0, 1 -> 0x19ec v
19e4: %r10_0 = *(0xe40015e0)
19e8: jmp 0x19f4 v
19ec: %r10_0 = *(0xe40015e0)
19f0: %r10_1 = or %r10_1, 1
19f4: store_word_0_100 %r10_1, MC0_DRAM_CONFIG
19f8: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
1a00: store_word_0_100 0x00348084, MC0_TUNING_0
1a08: store_word_0_100 0x0000007a, MC0_TUNING_1
1a10: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1a18: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
1a20: store_word_0_100 0x01283446, MC0_TIMING_CNTL_0
1a28: store_word_0_100 0x03620991, MC0_TIMING_CNTL_1
1a30: store_word_0_100 0x0c958107, MC0_TIMING_CNTL_2
1a38: store_word_0_100 0x00000018, MC0_WR_DATA_DLY_0
1a40: store_word %r10_0, 0xe40015e0
1a44: %r12_0 = *(0xe40015ec)
1a48: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1a50: beq %r10_0, 3 -> 0x1a5c v
1a54: %r10_0 = *(0xe40015e0)
1a58: jmp 0x1a78 v
1a5c: %r10_0 = *(0xe40015e0)
1a60: delay -7
1a64: store_word 0x00000100, 0xe40000f0
1a6c: delay -7
1a70: store_word 0, 0xe40000f0
1a74: delay -7
1a78: store_word_0_100 0x00000030, MC0_INTERRUPT_MASK
1a80: store_word %r10_0, 0xe40015e0
1a84: %r12_0 = *(0xe40015ec)
1a88: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1a90: beq %r10_0, 3 -> 0x1a9c v
1a94: %r10_0 = *(0xe40015e0)
1a98: jmp 0x1aa4 v
1a9c: %r10_0 = *(0xe40015e0)
1aa0: call 0x3bb4
1aa4: store_word_0_100 0, MC0_POINTER
1aa8: store_word_0_100 0x423c0000, MC0_DRAM_CMD
1ab0: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1ab8: store_word_0_100 0x06200221, MC0_DRAM_CMD
1ac0: call 0x0270
1ac4: store_word_0_100 %r10_1, MC0_DRAM_CMD
1ac8: store_word_0_100 0x06200772, MC0_DRAM_CMD
1ad0: store_word %r10_0, 0xe40015e0
1ad4: %r12_0 = *(0xe40015ec)
1ad8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1ae0: branch_cond0 %r10_0, 1 -> 0x1aec v
1ae4: %r10_0 = *(0xe40015e0)
1ae8: jmp 0x1b18 v
1aec: %r10_0 = *(0xe40015e0)
1af0: store_word %r10_0, 0xe40015e0
1af4: %r12_0 = *(0xe40015ec)
1af8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1b00: beq %r10_0, 6 -> 0x1b0c v
1b04: %r10_0 = *(0xe40015e0)
1b08: jmp 0x1b18 v
1b0c: %r10_0 = *(0xe40015e0)
1b10: call 0x04e0
1b14: store_word_0_100 %r10_1, MC0_DRAM_CMD
1b18: store_word_0_100 2, MC0_CNTL
1b1c: %r10_0 = *(MC1_CNTL)
1b20: sync
1b24: delay -7
1b28: store_word_0_100 0, MC0_POINTER
1b2c: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1b34: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1b3c: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1b44: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1b4c: store_word_0_100 2, MC0_CNTL
1b50: store_word_0_100 0x00001000, MC0_CNTL
1b58: store_word_0_100 0x00000605, MC0_CNTL
1b60: %r10_0 = *(MC1_CNTL)
1b64: sync
1b68: delay -7
1b6c: store_word %r12_0, 4
1b70: store_word %r12_1, 0x00000008
1b74: store_word %r13_0, 0x0000000c
1b78: store_word %r13_1, 0x00000010
1b7c: call 0x3400
1b80: beq %r11_0, 0 -> 0x1b90 v
1b84: store_word 0x0011119a, 0xe4000024
1b8c: call 0x100c
1b90: store_word_0_100 0, MC0_CNTL
1b94: store_word_0_100 0, MC0_POINTER
1b98: store_word_0_100 0x00040000, MC0_DRAM_CMD
1ba0: store_word_0_100 2, MC0_CNTL
1ba4: %r10_0 = *(MC1_CNTL)
1ba8: sync
1bac: delay -7
1bb0: %r10_0 = 0x040e3202
1bb8: %r12_0 = load_word -4
1bbc: %r11_1 = and %r11_1, 0x0000000f
1bc4: branch_cond0 %r11_1, 0x0000000c -> 0x1bdc v
1bcc: %r10_1 = 0x2000000b
1bd4: %r10_0 = 0x04113202
1bdc: branch_cond0 %r11_1, 0x0000000d -> 0x1bf4 v
1be4: %r10_1 = 0x20007061
1bec: %r10_0 = 0x04113202
1bf4: branch_cond0 %r11_1, 0x0000000e -> 0x1c0c v
1bfc: %r10_1 = 0x20003031
1c04: %r10_0 = 0x04123202
1c0c: branch_cond0 %r11_1, 0x0000000f -> 0x1c24 v
1c14: %r10_1 = 0x20007065
1c1c: %r10_0 = 0x04123202
1c24: branch_cond0 %r11_1, 0 -> 0x1c38 v
1c28: %r10_1 = 0x20001019
1c30: %r10_0 = 0x04123202
1c38: branch_cond0 %r11_1, 1 -> 0x1c4c v
1c3c: %r10_1 = 0x20007069
1c44: %r10_0 = 0x04133202
1c4c: branch_cond0 %r11_1, 2 -> 0x1c60 v
1c50: %r10_1 = 0x20003035
1c58: %r10_0 = 0x04133202
1c60: branch_cond0 %r11_1, 3 -> 0x1c74 v
1c64: %r10_1 = 0x2000706d
1c6c: %r10_0 = 0x04133202
1c74: branch_cond0 %r11_1, 4 -> 0x1c88 v
1c78: %r10_1 = 0x2000000d
1c80: %r10_0 = 0x04143202
1c88: branch_cond0 %r11_1, 5 -> 0x1c9c v
1c8c: %r10_1 = 0x20007071
1c94: %r10_0 = 0x04143202
1c9c: branch_cond0 %r11_1, 6 -> 0x1cb0 v
1ca0: %r10_1 = 0x20003039
1ca8: %r10_0 = 0x04153202
1cb0: branch_cond0 %r11_1, 7 -> 0x1cc4 v
1cb4: %r10_1 = 0x20007075
1cbc: %r10_0 = 0x04153202
1cc4: branch_cond0 %r11_1, 0x00000008 -> 0x1cdc v
1ccc: %r10_1 = 0x2000101d
1cd4: %r10_0 = 0x04153202
1cdc: branch_cond0 %r11_1, 0x00000009 -> 0x1cf4 v
1ce4: %r10_1 = 0x20007079
1cec: %r10_0 = 0x04163202
1cf4: branch_cond0 %r11_1, 0x0000000a -> 0x1d0c v
1cfc: %r10_1 = 0x2000303d
1d04: %r10_0 = 0x04163202
1d0c: branch_cond0 %r11_1, 0x0000000b -> 0x1d24 v
1d14: %r10_1 = 0x2000707d
1d1c: %r10_0 = 0x04163202
1d24: store_word %r10_1, 0xe4000284
1d28: %r10_1 = or %r10_1, 0x000c0000
1d30: store_word %r10_1, 0xe4000284
1d34: %r12_0 = *(0xe4000284)
1d38: sync
1d3c: delay -7
1d40: %r10_1 = and %r10_1, 0xdff3ffff
1d48: store_word %r10_1, 0xe4000284
1d4c: call 0x3bb4
1d50: store_word %r10_0, 0xe40015e0
1d54: %r10_0 = *(0xe40015e8)
1d58: %r10_0 = rotlw_by_30_then_and %r10_0, 1
1d5c: branch_cond0 %r10_0, 1 -> 0x1d68 v
1d60: %r10_0 = *(0xe40015e0)
1d64: jmp 0x1d70 v
1d68: %r10_0 = *(0xe40015e0)
1d6c: %r10_0 = or %r11_0, 1
1d70: store_word_0_100 %r11_0, MC0_DRAM_CONFIG
1d74: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
1d7c: store_word_0_100 0x20988088, MC0_TUNING_0
1d84: store_word_0_100 0x0000007a, MC0_TUNING_1
1d8c: store_word_0_100 1, MC0_ARBITRATION_CNTL
1d90: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1d98: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
1da0: store_word_0_100 0x0128d87b, MC0_TIMING_CNTL_0
1da8: store_word_0_100 0x03820edb, MC0_TIMING_CNTL_1
1db0: store_word_0_100 0x0c97914b, MC0_TIMING_CNTL_2
1db8: store_word_0_100 0x00000025, MC0_WR_DATA_DLY_0
1dc0: store_word %r10_0, 0xe40015e0
1dc4: %r12_0 = *(0xe40015ec)
1dc8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1dd0: beq %r10_0, 3 -> 0x1ddc v
1dd4: %r10_0 = *(0xe40015e0)
1dd8: jmp 0x1df8 v
1ddc: %r10_0 = *(0xe40015e0)
1de0: delay -7
1de4: store_word 0x00000100, 0xe40000f0
1dec: delay -7
1df0: store_word 0, 0xe40000f0
1df4: delay -7
1df8: store_word_0_100 0x00000030, MC0_INTERRUPT_MASK
1e00: store_word_0_100 0, MC0_POINTER
1e04: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1e0c: store_word_0_100 2, MC0_CNTL
1e10: %r10_0 = *(MC1_CNTL)
1e14: sync
1e18: delay -7
1e1c: store_word_0_100 0, MC0_POINTER
1e20: store_word_0_100 0x0c280100, MC0_DRAM_CMD
1e28: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1e30: call 0x0380
1e34: store_word %r10_1, 0xe4000014
1e38: store_word_0_100 %r10_1, MC0_DRAM_CMD
1e3c: %r10_1 = 0x06200712
1e44: store_word %r10_1, 0xe4000010
1e48: store_word_0_100 %r10_1, MC0_DRAM_CMD
1e4c: store_word %r10_0, 0xe40015e0
1e50: %r12_0 = *(0xe40015ec)
1e54: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1e5c: branch_cond0 %r10_0, 1 -> 0x1e68 v
1e60: %r10_0 = *(0xe40015e0)
1e64: jmp 0x1e94 v
1e68: %r10_0 = *(0xe40015e0)
1e6c: store_word %r10_0, 0xe40015e0
1e70: %r12_0 = *(0xe40015ec)
1e74: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1e7c: beq %r10_0, 6 -> 0x1e88 v
1e80: %r10_0 = *(0xe40015e0)
1e84: jmp 0x1e94 v
1e88: %r10_0 = *(0xe40015e0)
1e8c: call 0x04e0
1e90: store_word_0_100 %r10_1, MC0_DRAM_CMD
1e94: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1e9c: store_word_0_100 2, MC0_CNTL
1ea0: store_word_0_100 0x00001000, MC0_CNTL
1ea8: store_word_0_100 0x00000605, MC0_CNTL
1eb0: %r10_0 = *(MC1_CNTL)
1eb4: sync
1eb8: delay -7
1ebc: call 0x34b0
1ec0: op_1E 0, -7
1ec4: store_word %r13_1, MC0_RD_STR_DLY_0
1ec8: op_1E 0, -7
1ecc: op_1E 1, -7
1ed0: store_word %r13_1, MC0_RD_STR_DLY_1
1ed4: op_1E 1, -7
1ed8: op_1E 2, -7
1edc: store_word %r13_1, MC1_RD_STR_DLY_0
1ee0: op_1E 2, -7
1ee4: op_1E 3, -7
1ee8: store_word %r13_1, MC1_RD_STR_DLY_1
1eec: op_1E 3, -7
1ef0: store_word %r10_0, 0xe40015e0
1ef4: %r12_0 = *(0xe40015ec)
1ef8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1f00: beq %r10_0, 1 -> 0x1f0c v
1f04: %r10_0 = *(0xe40015e0)
1f08: jmp 0x207c v
1f0c: %r10_0 = *(0xe40015e0)
1f10: store_word %r10_0, 0xe40015e0
1f14: %r12_0 = *(0xe40015ec)
1f18: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1f20: beq %r10_0, 1 -> 0x1f2c v
1f24: %r10_0 = *(0xe40015e0)
1f28: jmp 0x1f88 v
1f2c: %r10_0 = *(0xe40015e0)
1f30: %r10_0 = 0
1f34: %r11_1 = 0
1f38: %r10_0 = MC0_RD_STR_DLY_0
1f40: %r10_1 = 0x0a0a0a0a
1f48: call 0x0514
1f4c: %r10_0 = MC0_RD_STR_DLY_1
1f54: %r10_1 = 0x0a0a0a0a
1f5c: call 0x0514
1f60: %r10_0 = MC1_RD_STR_DLY_0
1f68: %r10_1 = 0x0a0a0a0a
1f70: call 0x0514
1f74: %r10_0 = MC1_RD_STR_DLY_1
1f7c: %r10_1 = 0x0a0a0a0a
1f84: call 0x0514
1f88: store_word %r10_0, 0xe40015e0
1f8c: %r12_0 = *(0xe40015ec)
1f90: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1f98: beq %r10_0, 2 -> 0x1fa4 v
1f9c: %r10_0 = *(0xe40015e0)
1fa0: jmp 0x2000 v
1fa4: %r10_0 = *(0xe40015e0)
1fa8: %r10_0 = 0
1fac: %r11_1 = 0
1fb0: %r10_0 = MC0_RD_STR_DLY_0
1fb8: %r10_1 = 0x05060505
1fc0: call 0x0514
1fc4: %r10_0 = MC0_RD_STR_DLY_1
1fcc: %r10_1 = 0x03060504
1fd4: call 0x0514
1fd8: %r10_0 = MC1_RD_STR_DLY_0
1fe0: %r10_1 = 0x04060605
1fe8: call 0x0514
1fec: %r10_0 = MC1_RD_STR_DLY_1
1ff4: %r10_1 = 0x05050605
1ffc: call 0x0514
2000: store_word %r10_0, 0xe40015e0
2004: %r12_0 = *(0xe40015ec)
2008: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2010: beq %r10_0, 6 -> 0x201c v
2014: %r10_0 = *(0xe40015e0)
2018: jmp 0x2078 v
201c: %r10_0 = *(0xe40015e0)
2020: %r10_0 = 0
2024: %r11_1 = 0
2028: %r10_0 = MC0_RD_STR_DLY_0
2030: %r10_1 = 0x10101011
2038: call 0x0514
203c: %r10_0 = MC0_RD_STR_DLY_1
2044: %r10_1 = 0x0e100f0e
204c: call 0x0514
2050: %r10_0 = MC1_RD_STR_DLY_0
2058: %r10_1 = 0x0d110f10
2060: call 0x0514
2064: %r10_0 = MC1_RD_STR_DLY_1
206c: %r10_1 = 0x0d0d100d
2074: call 0x0514
2078: jmp 0x27a4 v
207c: store_word %r10_0, 0xe40015e0
2080: %r12_0 = *(0xe40015ec)
2084: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
208c: beq %r10_0, 2 -> 0x2098 v
2090: %r10_0 = *(0xe40015e0)
2094: jmp 0x24cc v
2098: %r10_0 = *(0xe40015e0)
209c: store_word %r10_0, 0xe40015e0
20a0: %r12_0 = *(0xe40015ec)
20a4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
20ac: beq %r10_0, 1 -> 0x20b8 v
20b0: %r10_0 = *(0xe40015e0)
20b4: jmp 0x2134 v
20b8: %r10_0 = *(0xe40015e0)
20bc: store_word %r10_0, 0xe40015e0
20c0: %r12_0 = *(0xe40015ec)
20c4: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
20cc: beq %r10_0, 4 -> 0x20d8 v
20d0: %r10_0 = *(0xe40015e0)
20d4: jmp 0x2134 v
20d8: %r10_0 = *(0xe40015e0)
20dc: %r10_0 = 0
20e0: %r11_1 = 0
20e4: %r10_0 = MC0_RD_STR_DLY_0
20ec: %r10_1 = 0x0a0a0a0a
20f4: call 0x0514
20f8: %r10_0 = MC0_RD_STR_DLY_1
2100: %r10_1 = 0x0a0a0a0a
2108: call 0x0514
210c: %r10_0 = MC1_RD_STR_DLY_0
2114: %r10_1 = 0x0a0a0a0a
211c: call 0x0514
2120: %r10_0 = MC1_RD_STR_DLY_1
2128: %r10_1 = 0x0a0a0a0a
2130: call 0x0514
2134: store_word %r10_0, 0xe40015e0
2138: %r12_0 = *(0xe40015ec)
213c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2144: beq %r10_0, 1 -> 0x2150 v
2148: %r10_0 = *(0xe40015e0)
214c: jmp 0x21d0 v
2150: %r10_0 = *(0xe40015e0)
2154: store_word %r10_0, 0xe40015e0
2158: %r12_0 = *(0xe40015ec)
215c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2164: beq %r10_0, 0x00000009 -> 0x2174 v
216c: %r10_0 = *(0xe40015e0)
2170: jmp 0x21d0 v
2174: %r10_0 = *(0xe40015e0)
2178: %r10_0 = 0
217c: %r11_1 = 0
2180: %r10_0 = MC0_RD_STR_DLY_0
2188: %r10_1 = 0x0a0a0a0a
2190: call 0x0514
2194: %r10_0 = MC0_RD_STR_DLY_1
219c: %r10_1 = 0x0a0a0a0a
21a4: call 0x0514
21a8: %r10_0 = MC1_RD_STR_DLY_0
21b0: %r10_1 = 0x0a0a0a0a
21b8: call 0x0514
21bc: %r10_0 = MC1_RD_STR_DLY_1
21c4: %r10_1 = 0x0a0a0a0a
21cc: call 0x0514
21d0: store_word %r10_0, 0xe40015e0
21d4: %r12_0 = *(0xe40015ec)
21d8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
21e0: beq %r10_0, 2 -> 0x21ec v
21e4: %r10_0 = *(0xe40015e0)
21e8: jmp 0x2268 v
21ec: %r10_0 = *(0xe40015e0)
21f0: store_word %r10_0, 0xe40015e0
21f4: %r12_0 = *(0xe40015ec)
21f8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2200: beq %r10_0, 0 -> 0x220c v
2204: %r10_0 = *(0xe40015e0)
2208: jmp 0x2268 v
220c: %r10_0 = *(0xe40015e0)
2210: %r10_0 = 0
2214: %r11_1 = 0
2218: %r10_0 = MC0_RD_STR_DLY_0
2220: %r10_1 = 0x090c0905
2228: call 0x0514
222c: %r10_0 = MC0_RD_STR_DLY_1
2234: %r10_1 = 0x0a0a0a09
223c: call 0x0514
2240: %r10_0 = MC1_RD_STR_DLY_0
2248: %r10_1 = 0x04050505
2250: call 0x0514
2254: %r10_0 = MC1_RD_STR_DLY_1
225c: %r10_1 = 0x05050906
2264: call 0x0514
2268: store_word %r10_0, 0xe40015e0
226c: %r12_0 = *(0xe40015ec)
2270: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2278: beq %r10_0, 2 -> 0x2284 v
227c: %r10_0 = *(0xe40015e0)
2280: jmp 0x2300 v
2284: %r10_0 = *(0xe40015e0)
2288: store_word %r10_0, 0xe40015e0
228c: %r12_0 = *(0xe40015ec)
2290: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2298: beq %r10_0, 3 -> 0x22a4 v
229c: %r10_0 = *(0xe40015e0)
22a0: jmp 0x2300 v
22a4: %r10_0 = *(0xe40015e0)
22a8: %r10_0 = 0
22ac: %r11_1 = 0
22b0: %r10_0 = MC0_RD_STR_DLY_0
22b8: %r10_1 = 0x06090605
22c0: call 0x0514
22c4: %r10_0 = MC0_RD_STR_DLY_1
22cc: %r10_1 = 0x08050a08
22d4: call 0x0514
22d8: %r10_0 = MC1_RD_STR_DLY_0
22e0: %r10_1 = 0x03040303
22e8: call 0x0514
22ec: %r10_0 = MC1_RD_STR_DLY_1
22f4: %r10_1 = 0x05050706
22fc: call 0x0514
2300: store_word %r10_0, 0xe40015e0
2304: %r12_0 = *(0xe40015ec)
2308: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2310: beq %r10_0, 2 -> 0x231c v
2314: %r10_0 = *(0xe40015e0)
2318: jmp 0x2398 v
231c: %r10_0 = *(0xe40015e0)
2320: store_word %r10_0, 0xe40015e0
2324: %r12_0 = *(0xe40015ec)
2328: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2330: beq %r10_0, 4 -> 0x233c v
2334: %r10_0 = *(0xe40015e0)
2338: jmp 0x2398 v
233c: %r10_0 = *(0xe40015e0)
2340: %r10_0 = 0
2344: %r11_1 = 0
2348: %r10_0 = MC0_RD_STR_DLY_0
2350: %r10_1 = 0x070a0706
2358: call 0x0514
235c: %r10_0 = MC0_RD_STR_DLY_1
2364: %r10_1 = 0x09060b09
236c: call 0x0514
2370: %r10_0 = MC1_RD_STR_DLY_0
2378: %r10_1 = 0x04050404
2380: call 0x0514
2384: %r10_0 = MC1_RD_STR_DLY_1
238c: %r10_1 = 0x06060807
2394: call 0x0514
2398: store_word %r10_0, 0xe40015e0
239c: %r12_0 = *(0xe40015ec)
23a0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
23a8: beq %r10_0, 6 -> 0x23b4 v
23ac: %r10_0 = *(0xe40015e0)
23b0: jmp 0x2430 v
23b4: %r10_0 = *(0xe40015e0)
23b8: store_word %r10_0, 0xe40015e0
23bc: %r12_0 = *(0xe40015ec)
23c0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
23c8: beq %r10_0, 1 -> 0x23d4 v
23cc: %r10_0 = *(0xe40015e0)
23d0: jmp 0x2430 v
23d4: %r10_0 = *(0xe40015e0)
23d8: %r10_0 = 0
23dc: %r11_1 = 0
23e0: %r10_0 = MC0_RD_STR_DLY_0
23e8: %r10_1 = 0x110f0f0f
23f0: call 0x0514
23f4: %r10_0 = MC0_RD_STR_DLY_1
23fc: %r10_1 = 0x0f100f0e
2404: call 0x0514
2408: %r10_0 = MC1_RD_STR_DLY_0
2410: %r10_1 = 0x0a0b0d09
2418: call 0x0514
241c: %r10_0 = MC1_RD_STR_DLY_1
2424: %r10_1 = 0x0f0d0d0d
242c: call 0x0514
2430: store_word %r10_0, 0xe40015e0
2434: %r12_0 = *(0xe40015ec)
2438: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2440: beq %r10_0, 6 -> 0x244c v
2444: %r10_0 = *(0xe40015e0)
2448: jmp 0x24c8 v
244c: %r10_0 = *(0xe40015e0)
2450: store_word %r10_0, 0xe40015e0
2454: %r12_0 = *(0xe40015ec)
2458: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2460: beq %r10_0, 2 -> 0x246c v
2464: %r10_0 = *(0xe40015e0)
2468: jmp 0x24c8 v
246c: %r10_0 = *(0xe40015e0)
2470: %r10_0 = 0
2474: %r11_1 = 0
2478: %r10_0 = MC0_RD_STR_DLY_0
2480: %r10_1 = 0x110f0f0f
2488: call 0x0514
248c: %r10_0 = MC0_RD_STR_DLY_1
2494: %r10_1 = 0x0f100f0e
249c: call 0x0514
24a0: %r10_0 = MC1_RD_STR_DLY_0
24a8: %r10_1 = 0x0a0b0d09
24b0: call 0x0514
24b4: %r10_0 = MC1_RD_STR_DLY_1
24bc: %r10_1 = 0x0f0d0d0d
24c4: call 0x0514
24c8: jmp 0x27a4 v
24cc: store_word %r10_0, 0xe40015e0
24d0: %r12_0 = *(0xe40015ec)
24d4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
24dc: beq %r10_0, 1 -> 0x24e8 v
24e0: %r10_0 = *(0xe40015e0)
24e4: jmp 0x2544 v
24e8: %r10_0 = *(0xe40015e0)
24ec: %r10_0 = 0
24f0: %r11_1 = 0
24f4: %r10_0 = MC0_RD_STR_DLY_0
24fc: %r10_1 = 0x0a0a0a0a
2504: call 0x0514
2508: %r10_0 = MC0_RD_STR_DLY_1
2510: %r10_1 = 0x0a0a0a0a
2518: call 0x0514
251c: %r10_0 = MC1_RD_STR_DLY_0
2524: %r10_1 = 0x0a0a0a0a
252c: call 0x0514
2530: %r10_0 = MC1_RD_STR_DLY_1
2538: %r10_1 = 0x0a0a0a0a
2540: call 0x0514
2544: store_word %r10_0, 0xe40015e0
2548: %r12_0 = *(0xe40015ec)
254c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2554: beq %r10_0, 2 -> 0x2560 v
2558: %r10_0 = *(0xe40015e0)
255c: jmp 0x25dc v
2560: %r10_0 = *(0xe40015e0)
2564: store_word %r10_0, 0xe40015e0
2568: %r12_0 = *(0xe40015ec)
256c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2574: beq %r10_0, 3 -> 0x2580 v
2578: %r10_0 = *(0xe40015e0)
257c: jmp 0x25dc v
2580: %r10_0 = *(0xe40015e0)
2584: %r10_0 = 0
2588: %r11_1 = 0
258c: %r10_0 = MC0_RD_STR_DLY_0
2594: %r10_1 = 0x0b0b0909
259c: call 0x0514
25a0: %r10_0 = MC0_RD_STR_DLY_1
25a8: %r10_1 = 0x090a0a09
25b0: call 0x0514
25b4: %r10_0 = MC1_RD_STR_DLY_0
25bc: %r10_1 = 0x0c0b0b09
25c4: call 0x0514
25c8: %r10_0 = MC1_RD_STR_DLY_1
25d0: %r10_1 = 0x0a0e0c0f
25d8: call 0x0514
25dc: store_word %r10_0, 0xe40015e0
25e0: %r12_0 = *(0xe40015ec)
25e4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
25ec: beq %r10_0, 2 -> 0x25f8 v
25f0: %r10_0 = *(0xe40015e0)
25f4: jmp 0x2674 v
25f8: %r10_0 = *(0xe40015e0)
25fc: store_word %r10_0, 0xe40015e0
2600: %r12_0 = *(0xe40015ec)
2604: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
260c: beq %r10_0, 4 -> 0x2618 v
2610: %r10_0 = *(0xe40015e0)
2614: jmp 0x2674 v
2618: %r10_0 = *(0xe40015e0)
261c: %r10_0 = 0
2620: %r11_1 = 0
2624: %r10_0 = MC0_RD_STR_DLY_0
262c: %r10_1 = 0x0a0a0a0a
2634: call 0x0514
2638: %r10_0 = MC0_RD_STR_DLY_1
2640: %r10_1 = 0x0a0a0a0a
2648: call 0x0514
264c: %r10_0 = MC1_RD_STR_DLY_0
2654: %r10_1 = 0x0a0a0a0a
265c: call 0x0514
2660: %r10_0 = MC1_RD_STR_DLY_1
2668: %r10_1 = 0x0a0a0a0a
2670: call 0x0514
2674: store_word %r10_0, 0xe40015e0
2678: %r12_0 = *(0xe40015ec)
267c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2684: beq %r10_0, 6 -> 0x2690 v
2688: %r10_0 = *(0xe40015e0)
268c: jmp 0x270c v
2690: %r10_0 = *(0xe40015e0)
2694: store_word %r10_0, 0xe40015e0
2698: %r12_0 = *(0xe40015ec)
269c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
26a4: beq %r10_0, 1 -> 0x26b0 v
26a8: %r10_0 = *(0xe40015e0)
26ac: jmp 0x270c v
26b0: %r10_0 = *(0xe40015e0)
26b4: %r10_0 = 0
26b8: %r11_1 = 0
26bc: %r10_0 = MC0_RD_STR_DLY_0
26c4: %r10_1 = 0x0d0d0d0d
26cc: call 0x0514
26d0: %r10_0 = MC0_RD_STR_DLY_1
26d8: %r10_1 = 0x0d0d0d0d
26e0: call 0x0514
26e4: %r10_0 = MC1_RD_STR_DLY_0
26ec: %r10_1 = 0x0d0d0d0d
26f4: call 0x0514
26f8: %r10_0 = MC1_RD_STR_DLY_1
2700: %r10_1 = 0x0e0d0d0d
2708: call 0x0514
270c: store_word %r10_0, 0xe40015e0
2710: %r12_0 = *(0xe40015ec)
2714: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
271c: beq %r10_0, 6 -> 0x2728 v
2720: %r10_0 = *(0xe40015e0)
2724: jmp 0x27a4 v
2728: %r10_0 = *(0xe40015e0)
272c: store_word %r10_0, 0xe40015e0
2730: %r12_0 = *(0xe40015ec)
2734: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
273c: beq %r10_0, 2 -> 0x2748 v
2740: %r10_0 = *(0xe40015e0)
2744: jmp 0x27a4 v
2748: %r10_0 = *(0xe40015e0)
274c: %r10_0 = 0
2750: %r11_1 = 0
2754: %r10_0 = MC0_RD_STR_DLY_0
275c: %r10_1 = 0x0f0f0f0f
2764: call 0x0514
2768: %r10_0 = MC0_RD_STR_DLY_1
2770: %r10_1 = 0x0f0f0f0f
2778: call 0x0514
277c: %r10_0 = MC1_RD_STR_DLY_0
2784: %r10_1 = 0x0f0f0f0f
278c: call 0x0514
2790: %r10_0 = MC1_RD_STR_DLY_1
2798: %r10_1 = 0x0e0f0f0f
27a0: call 0x0514
27a4: %r10_0 = *(MC1_RD_STR_DLY_1)
27a8: sync
27ac: delay -7
27b0: store_word_0_100 0x00001605, MC0_CNTL
27b8: store_word_0_100 0x00000605, MC0_CNTL
27c0: store_word 0, 0xe4000020
27c4: %r11_1 = 0
27c8: store_word %r10_0, 0xe40015e0
27cc: %r12_0 = *(0xe40015ec)
27d0: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
27d8: beq %r10_0, 3 -> 0x27e4 v
27dc: %r10_0 = *(0xe40015e0)
27e0: jmp 0x27ec v
27e4: %r10_0 = *(0xe40015e0)
27e8: %r11_1 = 1
27ec: store_word %r11_1, 0xe4000028
27f0: %r11_1 = and %r11_1, 0x0000000f
27f8: branch_cond0 %r11_1, 0 -> 0x2810 v
27fc: call 0x0c8c
2800: store_word %r11_1, 0xe4000028
2804: %r10_0 = rotlw_by_28_then_and %r11_1, 7
2808: call 0x0640
280c: call 0x0b14
2810: call 0x381c
2814: op_1E 0, -7
2818: store_word %r13_1, MC0_WR_STR_DLL_0
281c: op_1E 0, -7
2820: op_1E 1, -7
2824: store_word %r13_1, MC0_WR_STR_DLL_1
2828: op_1E 1, -7
282c: op_1E 2, -7
2830: store_word %r13_1, MC1_WR_STR_DLL_0
2834: op_1E 2, -7
2838: op_1E 3, -7
283c: store_word %r13_1, MC1_WR_STR_DLL_1
2840: op_1E 3, -7
2844: store_word %r10_0, 0xe40015e0
2848: %r12_0 = *(0xe40015ec)
284c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
2854: beq %r10_0, 1 -> 0x2860 v
2858: %r10_0 = *(0xe40015e0)
285c: jmp 0x29c0 v
2860: %r10_0 = *(0xe40015e0)
2864: store_word %r10_0, 0xe40015e0
2868: %r12_0 = *(0xe40015ec)
286c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2874: beq %r10_0, 1 -> 0x2880 v
2878: %r10_0 = *(0xe40015e0)
287c: jmp 0x28cc v
2880: %r10_0 = *(0xe40015e0)
2884: %r10_0 = 0
2888: %r11_1 = 1
288c: %r10_0 = MC0_WR_STR_DLL_0
2894: %r10_1 = 0
2898: call 0x0514
289c: %r10_0 = MC0_WR_STR_DLL_1
28a4: %r10_1 = 0
28a8: call 0x0514
28ac: %r10_0 = MC1_WR_STR_DLL_0
28b4: %r10_1 = 0
28b8: call 0x0514
28bc: %r10_0 = MC1_WR_STR_DLL_1
28c4: %r10_1 = 0
28c8: call 0x0514
28cc: store_word %r10_0, 0xe40015e0
28d0: %r12_0 = *(0xe40015ec)
28d4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
28dc: beq %r10_0, 2 -> 0x28e8 v
28e0: %r10_0 = *(0xe40015e0)
28e4: jmp 0x2944 v
28e8: %r10_0 = *(0xe40015e0)
28ec: %r10_0 = 0
28f0: %r11_1 = 1
28f4: %r10_0 = MC0_WR_STR_DLL_0
28fc: %r10_1 = 0x01ff0301
2904: call 0x0514
2908: %r10_0 = MC0_WR_STR_DLL_1
2910: %r10_1 = 0x01000101
2918: call 0x0514
291c: %r10_0 = MC1_WR_STR_DLL_0
2924: %r10_1 = 0x01020201
292c: call 0x0514
2930: %r10_0 = MC1_WR_STR_DLL_1
2938: %r10_1 = 0x01010101
2940: call 0x0514
2944: store_word %r10_0, 0xe40015e0
2948: %r12_0 = *(0xe40015ec)
294c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2954: beq %r10_0, 6 -> 0x2960 v
2958: %r10_0 = *(0xe40015e0)
295c: jmp 0x29bc v
2960: %r10_0 = *(0xe40015e0)
2964: %r10_0 = 0
2968: %r11_1 = 1
296c: %r10_0 = MC0_WR_STR_DLL_0
2974: %r10_1 = 0xfafcfefe
297c: call 0x0514
2980: %r10_0 = MC0_WR_STR_DLL_1
2988: %r10_1 = 0xfdfefdfc
2990: call 0x0514
2994: %r10_0 = MC1_WR_STR_DLL_0
299c: %r10_1 = 0xfdfdfe00
29a4: call 0x0514
29a8: %r10_0 = MC1_WR_STR_DLL_1
29b0: %r10_1 = 0xfffdfefd
29b8: call 0x0514
29bc: jmp 0x30c4 v
29c0: store_word %r10_0, 0xe40015e0
29c4: %r12_0 = *(0xe40015ec)
29c8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
29d0: beq %r10_0, 2 -> 0x29dc v
29d4: %r10_0 = *(0xe40015e0)
29d8: jmp 0x2dfc v
29dc: %r10_0 = *(0xe40015e0)
29e0: store_word %r10_0, 0xe40015e0
29e4: %r12_0 = *(0xe40015ec)
29e8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
29f0: beq %r10_0, 1 -> 0x29fc v
29f4: %r10_0 = *(0xe40015e0)
29f8: jmp 0x2a70 v
29fc: %r10_0 = *(0xe40015e0)
2a00: store_word %r10_0, 0xe40015e0
2a04: %r12_0 = *(0xe40015ec)
2a08: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2a10: beq %r10_0, 4 -> 0x2a1c v
2a14: %r10_0 = *(0xe40015e0)
2a18: jmp 0x2a70 v
2a1c: %r10_0 = *(0xe40015e0)
2a20: %r10_0 = 0
2a24: %r11_1 = 1
2a28: %r10_0 = MC0_WR_STR_DLL_0
2a30: %r10_1 = 0
2a34: call 0x0514
2a38: %r10_0 = MC0_WR_STR_DLL_1
2a40: %r10_1 = 0
2a44: call 0x0514
2a48: %r10_0 = MC1_WR_STR_DLL_0
2a50: %r10_1 = 0xfdfe00fe
2a58: call 0x0514
2a5c: %r10_0 = MC1_WR_STR_DLL_1
2a64: %r10_1 = 0xff00fffe
2a6c: call 0x0514
2a70: store_word %r10_0, 0xe40015e0
2a74: %r12_0 = *(0xe40015ec)
2a78: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2a80: beq %r10_0, 1 -> 0x2a8c v
2a84: %r10_0 = *(0xe40015e0)
2a88: jmp 0x2b04 v
2a8c: %r10_0 = *(0xe40015e0)
2a90: store_word %r10_0, 0xe40015e0
2a94: %r12_0 = *(0xe40015ec)
2a98: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2aa0: beq %r10_0, 0x00000009 -> 0x2ab0 v
2aa8: %r10_0 = *(0xe40015e0)
2aac: jmp 0x2b04 v
2ab0: %r10_0 = *(0xe40015e0)
2ab4: %r10_0 = 0
2ab8: %r11_1 = 1
2abc: %r10_0 = MC0_WR_STR_DLL_0
2ac4: %r10_1 = 0
2ac8: call 0x0514
2acc: %r10_0 = MC0_WR_STR_DLL_1
2ad4: %r10_1 = 0
2ad8: call 0x0514
2adc: %r10_0 = MC1_WR_STR_DLL_0
2ae4: %r10_1 = 0xfdfe00fe
2aec: call 0x0514
2af0: %r10_0 = MC1_WR_STR_DLL_1
2af8: %r10_1 = 0xff00fffe
2b00: call 0x0514
2b04: store_word %r10_0, 0xe40015e0
2b08: %r12_0 = *(0xe40015ec)
2b0c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2b14: beq %r10_0, 2 -> 0x2b20 v
2b18: %r10_0 = *(0xe40015e0)
2b1c: jmp 0x2b9c v
2b20: %r10_0 = *(0xe40015e0)
2b24: store_word %r10_0, 0xe40015e0
2b28: %r12_0 = *(0xe40015ec)
2b2c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2b34: beq %r10_0, 0 -> 0x2b40 v
2b38: %r10_0 = *(0xe40015e0)
2b3c: jmp 0x2b9c v
2b40: %r10_0 = *(0xe40015e0)
2b44: %r10_0 = 0
2b48: %r11_1 = 1
2b4c: %r10_0 = MC0_WR_STR_DLL_0
2b54: %r10_1 = 0x00ff0202
2b5c: call 0x0514
2b60: %r10_0 = MC0_WR_STR_DLL_1
2b68: %r10_1 = 0x01000100
2b70: call 0x0514
2b74: %r10_0 = MC1_WR_STR_DLL_0
2b7c: %r10_1 = 0xfeff00ff
2b84: call 0x0514
2b88: %r10_0 = MC1_WR_STR_DLL_1
2b90: %r10_1 = 0x0201ff00
2b98: call 0x0514
2b9c: store_word %r10_0, 0xe40015e0
2ba0: %r12_0 = *(0xe40015ec)
2ba4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2bac: beq %r10_0, 2 -> 0x2bb8 v
2bb0: %r10_0 = *(0xe40015e0)
2bb4: jmp 0x2c34 v
2bb8: %r10_0 = *(0xe40015e0)
2bbc: store_word %r10_0, 0xe40015e0
2bc0: %r12_0 = *(0xe40015ec)
2bc4: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2bcc: beq %r10_0, 3 -> 0x2bd8 v
2bd0: %r10_0 = *(0xe40015e0)
2bd4: jmp 0x2c34 v
2bd8: %r10_0 = *(0xe40015e0)
2bdc: %r10_0 = 0
2be0: %r11_1 = 1
2be4: %r10_0 = MC0_WR_STR_DLL_0
2bec: %r10_1 = 0xfe030202
2bf4: call 0x0514
2bf8: %r10_0 = MC0_WR_STR_DLL_1
2c00: %r10_1 = 0x01000100
2c08: call 0x0514
2c0c: %r10_0 = MC1_WR_STR_DLL_0
2c14: %r10_1 = 0xfdff0000
2c1c: call 0x0514
2c20: %r10_0 = MC1_WR_STR_DLL_1
2c28: %r10_1 = 0x00ffffff
2c30: call 0x0514
2c34: store_word %r10_0, 0xe40015e0
2c38: %r12_0 = *(0xe40015ec)
2c3c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2c44: beq %r10_0, 2 -> 0x2c50 v
2c48: %r10_0 = *(0xe40015e0)
2c4c: jmp 0x2cc8 v
2c50: %r10_0 = *(0xe40015e0)
2c54: store_word %r10_0, 0xe40015e0
2c58: %r12_0 = *(0xe40015ec)
2c5c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2c64: beq %r10_0, 4 -> 0x2c70 v
2c68: %r10_0 = *(0xe40015e0)
2c6c: jmp 0x2cc8 v
2c70: %r10_0 = *(0xe40015e0)
2c74: %r10_0 = 0
2c78: %r11_1 = 1
2c7c: %r10_0 = MC0_WR_STR_DLL_0
2c84: %r10_1 = 0x00010000
2c8c: call 0x0514
2c90: %r10_0 = MC0_WR_STR_DLL_1
2c98: %r10_1 = 0
2c9c: call 0x0514
2ca0: %r10_0 = MC1_WR_STR_DLL_0
2ca8: %r10_1 = 0xfdfffefe
2cb0: call 0x0514
2cb4: %r10_0 = MC1_WR_STR_DLL_1
2cbc: %r10_1 = 0x00fffeff
2cc4: call 0x0514
2cc8: store_word %r10_0, 0xe40015e0
2ccc: %r12_0 = *(0xe40015ec)
2cd0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2cd8: beq %r10_0, 6 -> 0x2ce4 v
2cdc: %r10_0 = *(0xe40015e0)
2ce0: jmp 0x2d60 v
2ce4: %r10_0 = *(0xe40015e0)
2ce8: store_word %r10_0, 0xe40015e0
2cec: %r12_0 = *(0xe40015ec)
2cf0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2cf8: beq %r10_0, 1 -> 0x2d04 v
2cfc: %r10_0 = *(0xe40015e0)
2d00: jmp 0x2d60 v
2d04: %r10_0 = *(0xe40015e0)
2d08: %r10_0 = 0
2d0c: %r11_1 = 1
2d10: %r10_0 = MC0_WR_STR_DLL_0
2d18: %r10_1 = 0xfcfafefc
2d20: call 0x0514
2d24: %r10_0 = MC0_WR_STR_DLL_1
2d2c: %r10_1 = 0xfbfcf8f8
2d34: call 0x0514
2d38: %r10_0 = MC1_WR_STR_DLL_0
2d40: %r10_1 = 0xfcf9fbfc
2d48: call 0x0514
2d4c: %r10_0 = MC1_WR_STR_DLL_1
2d54: %r10_1 = 0xfcfbfafb
2d5c: call 0x0514
2d60: store_word %r10_0, 0xe40015e0
2d64: %r12_0 = *(0xe40015ec)
2d68: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2d70: beq %r10_0, 6 -> 0x2d7c v
2d74: %r10_0 = *(0xe40015e0)
2d78: jmp 0x2df8 v
2d7c: %r10_0 = *(0xe40015e0)
2d80: store_word %r10_0, 0xe40015e0
2d84: %r12_0 = *(0xe40015ec)
2d88: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2d90: beq %r10_0, 2 -> 0x2d9c v
2d94: %r10_0 = *(0xe40015e0)
2d98: jmp 0x2df8 v
2d9c: %r10_0 = *(0xe40015e0)
2da0: %r10_0 = 0
2da4: %r11_1 = 1
2da8: %r10_0 = MC0_WR_STR_DLL_0
2db0: %r10_1 = 0xfcfafefc
2db8: call 0x0514
2dbc: %r10_0 = MC0_WR_STR_DLL_1
2dc4: %r10_1 = 0xfbfcf8f8
2dcc: call 0x0514
2dd0: %r10_0 = MC1_WR_STR_DLL_0
2dd8: %r10_1 = 0xfcf9fbfc
2de0: call 0x0514
2de4: %r10_0 = MC1_WR_STR_DLL_1
2dec: %r10_1 = 0xfcfbfafb
2df4: call 0x0514
2df8: jmp 0x30c4 v
2dfc: store_word %r10_0, 0xe40015e0
2e00: %r12_0 = *(0xe40015ec)
2e04: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2e0c: beq %r10_0, 1 -> 0x2e18 v
2e10: %r10_0 = *(0xe40015e0)
2e14: jmp 0x2e74 v
2e18: %r10_0 = *(0xe40015e0)
2e1c: %r10_0 = 0
2e20: %r11_1 = 1
2e24: %r10_0 = MC0_WR_STR_DLL_0
2e2c: %r10_1 = 0x00000303
2e34: call 0x0514
2e38: %r10_0 = MC0_WR_STR_DLL_1
2e40: %r10_1 = 0x03000000
2e48: call 0x0514
2e4c: %r10_0 = MC1_WR_STR_DLL_0
2e54: %r10_1 = 0x03010304
2e5c: call 0x0514
2e60: %r10_0 = MC1_WR_STR_DLL_1
2e68: %r10_1 = 0x04030003
2e70: call 0x0514
2e74: store_word %r10_0, 0xe40015e0
2e78: %r12_0 = *(0xe40015ec)
2e7c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2e84: beq %r10_0, 2 -> 0x2e90 v
2e88: %r10_0 = *(0xe40015e0)
2e8c: jmp 0x2f0c v
2e90: %r10_0 = *(0xe40015e0)
2e94: store_word %r10_0, 0xe40015e0
2e98: %r12_0 = *(0xe40015ec)
2e9c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2ea4: beq %r10_0, 3 -> 0x2eb0 v
2ea8: %r10_0 = *(0xe40015e0)
2eac: jmp 0x2f0c v
2eb0: %r10_0 = *(0xe40015e0)
2eb4: %r10_0 = 0
2eb8: %r11_1 = 1
2ebc: %r10_0 = MC0_WR_STR_DLL_0
2ec4: %r10_1 = 0xfe030202
2ecc: call 0x0514
2ed0: %r10_0 = MC0_WR_STR_DLL_1
2ed8: %r10_1 = 0x01000100
2ee0: call 0x0514
2ee4: %r10_0 = MC1_WR_STR_DLL_0
2eec: %r10_1 = 0xfdff0000
2ef4: call 0x0514
2ef8: %r10_0 = MC1_WR_STR_DLL_1
2f00: %r10_1 = 0x00ffffff
2f08: call 0x0514
2f0c: store_word %r10_0, 0xe40015e0
2f10: %r12_0 = *(0xe40015ec)
2f14: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2f1c: beq %r10_0, 2 -> 0x2f28 v
2f20: %r10_0 = *(0xe40015e0)
2f24: jmp 0x2fa4 v
2f28: %r10_0 = *(0xe40015e0)
2f2c: store_word %r10_0, 0xe40015e0
2f30: %r12_0 = *(0xe40015ec)
2f34: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2f3c: beq %r10_0, 4 -> 0x2f48 v
2f40: %r10_0 = *(0xe40015e0)
2f44: jmp 0x2fa4 v
2f48: %r10_0 = *(0xe40015e0)
2f4c: %r10_0 = 0
2f50: %r11_1 = 1
2f54: %r10_0 = MC0_WR_STR_DLL_0
2f5c: %r10_1 = 0xfe030202
2f64: call 0x0514
2f68: %r10_0 = MC0_WR_STR_DLL_1
2f70: %r10_1 = 0x01000100
2f78: call 0x0514
2f7c: %r10_0 = MC1_WR_STR_DLL_0
2f84: %r10_1 = 0xfdff0000
2f8c: call 0x0514
2f90: %r10_0 = MC1_WR_STR_DLL_1
2f98: %r10_1 = 0x00ffffff
2fa0: call 0x0514
2fa4: store_word %r10_0, 0xe40015e0
2fa8: %r12_0 = *(0xe40015ec)
2fac: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2fb4: beq %r10_0, 6 -> 0x2fc0 v
2fb8: %r10_0 = *(0xe40015e0)
2fbc: jmp 0x303c v
2fc0: %r10_0 = *(0xe40015e0)
2fc4: store_word %r10_0, 0xe40015e0
2fc8: %r12_0 = *(0xe40015ec)
2fcc: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2fd4: beq %r10_0, 1 -> 0x2fe0 v
2fd8: %r10_0 = *(0xe40015e0)
2fdc: jmp 0x303c v
2fe0: %r10_0 = *(0xe40015e0)
2fe4: %r10_0 = 0
2fe8: %r11_1 = 1
2fec: %r10_0 = MC0_WR_STR_DLL_0
2ff4: %r10_1 = 0xfcfafefc
2ffc: call 0x0514
3000: %r10_0 = MC0_WR_STR_DLL_1
3008: %r10_1 = 0xfbfcf8f8
3010: call 0x0514
3014: %r10_0 = MC1_WR_STR_DLL_0
301c: %r10_1 = 0xfcf9fbfc
3024: call 0x0514
3028: %r10_0 = MC1_WR_STR_DLL_1
3030: %r10_1 = 0xfcfbfafb
3038: call 0x0514
303c: store_word %r10_0, 0xe40015e0
3040: %r12_0 = *(0xe40015ec)
3044: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
304c: beq %r10_0, 6 -> 0x3058 v
3050: %r10_0 = *(0xe40015e0)
3054: jmp 0x30c4 v
3058: %r10_0 = *(0xe40015e0)
305c: store_word %r10_0, 0xe40015e0
3060: %r12_0 = *(0xe40015ec)
3064: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
306c: beq %r10_0, 2 -> 0x3078 v
3070: %r10_0 = *(0xe40015e0)
3074: jmp 0x30c4 v
3078: %r10_0 = *(0xe40015e0)
307c: %r10_0 = 0
3080: %r11_1 = 1
3084: %r10_0 = MC0_WR_STR_DLL_0
308c: %r10_1 = 0
3090: call 0x0514
3094: %r10_0 = MC0_WR_STR_DLL_1
309c: %r10_1 = 0
30a0: call 0x0514
30a4: %r10_0 = MC1_WR_STR_DLL_0
30ac: %r10_1 = 0
30b0: call 0x0514
30b4: %r10_0 = MC1_WR_STR_DLL_1
30bc: %r10_1 = 0
30c0: call 0x0514
30c4: %r12_0 = *(MC1_WR_STR_DLL_1)
30c8: sync
30cc: delay -7
30d0: %r10_0 = load_word -4
30d4: %r10_0 = and %r11_1, 0x0000000f
30dc: branch_cond0 %r11_0, 0 -> 0x31a4 v
30e0: %r12_0 = load_word -4
30e4: %r10_0 = load_word -5
30e8: %r10_0 = and %r11_0, 0x0000ffff
30f0: branch_cond1 %r11_1, %r11_0 -> 0x3108 v
30f4: %r10_0 = load_word -5
30f8: %r10_0 = rotlw_by_12_then_and %r11_0, 0x00070000
3100: %r10_0 = or %r11_1, %r11_0
3104: store_word %r11_0, 0xe4000020
3108: %r10_0 = load_word -4
310c: %r11_1 = add %r11_1, 0x00000010
3114: %r10_0 = rotlw_by_28_then_and %r11_1, 7
3118: branch_cond6 %r11_0, 4 -> 0x27fc ^
311c: %r10_0 = load_word -5
3120: %r10_0 = rotlw_by_16_then_and %r11_0, 7
3124: store_word %r10_0, 0xe40015e0
3128: %r12_0 = *(0xe40015ec)
312c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
3134: beq %r10_0, 1 -> 0x3140 v
3138: %r10_0 = *(0xe40015e0)
313c: jmp 0x316c v
3140: %r10_0 = *(0xe40015e0)
3144: store_word %r10_0, 0xe40015e0
3148: %r12_0 = *(0xe40015ec)
314c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
3154: beq %r10_0, 2 -> 0x3160 v
3158: %r10_0 = *(0xe40015e0)
315c: jmp 0x3168 v
3160: %r10_0 = *(0xe40015e0)
3164: %r10_0 = 1
3168: jmp 0x319c v
316c: store_word %r10_0, 0xe40015e0
3170: %r12_0 = *(0xe40015ec)
3174: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
317c: beq %r10_0, 2 -> 0x3188 v
3180: %r10_0 = *(0xe40015e0)
3184: jmp 0x3190 v
3188: %r10_0 = *(0xe40015e0)
318c: jmp 0x319c v
3190: delay -7
3198: jmp 0x3190 ^
319c: call 0x0640
31a0: call 0x0b14
31a4: %r10_0 = load_word -4
31a8: %r11_1 = add %r11_1, 1
31ac: %r10_0 = and %r11_1, 0x0000000f
31b4: branch_cond6 %r11_0, 2 -> 0x27ec ^
31b8: store_word %r10_0, 0xe40015e0
31bc: %r12_0 = *(0xe40015ec)
31c0: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
31c8: beq %r10_0, 3 -> 0x31d4 v
31cc: %r10_0 = *(0xe40015e0)
31d0: jmp 0x31d8 v
31d4: %r10_0 = *(0xe40015e0)
31d8: call 0x3e0c
31dc: store_word_0_100 0, MC0_CNTL
31e0: store_word_0_100 0, MC0_POINTER
31e4: %r10_0 = load_word -6
31e8: store_word_0_100 %r10_1, MC0_DRAM_CMD
31ec: store_word_0_100 0x003c0000, MC0_DRAM_CMD
31f4: store_word_0_100 2, MC0_CNTL
31f8: store_word %r10_0, 0xe40015e0
31fc: %r12_0 = *(0xe40015ec)
3200: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
3208: beq %r10_0, 6 -> 0x3214 v
320c: %r10_0 = *(0xe40015e0)
3210: jmp 0x32fc v
3214: %r10_0 = *(0xe40015e0)
3218: store_word %r10_0, 0xe40015e0
321c: %r12_0 = *(0xe40015ec)
3220: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
3228: beq %r10_0, 1 -> 0x3234 v
322c: %r10_0 = *(0xe40015e0)
3230: jmp 0x32fc v
3234: %r10_0 = *(0xe40015e0)
3238: store_word_0_100 0, MC0_POINTER
323c: store_word_0_100 0x062003da, MC0_DRAM_CMD
3244: store_word_0_100 0x062006da, MC0_DRAM_CMD
324c: store_word_0_100 0x062001da, MC0_DRAM_CMD
3254: store_word_0_100 0x062003e2, MC0_DRAM_CMD
325c: store_word_0_100 0x062006e2, MC0_DRAM_CMD
3264: store_word_0_100 0x062001e2, MC0_DRAM_CMD
326c: store_word_0_100 0x06200712, MC0_DRAM_CMD
3274: store_word_0_100 2, MC0_CNTL
3278: sync
327c: delay -7
3280: store_word_0_100 0, MC0_POINTER
3284: store_word_0_100 0x062003f6, MC0_DRAM_CMD
328c: store_word_0_100 0x062006f6, MC0_DRAM_CMD
3294: store_word_0_100 0x062001f6, MC0_DRAM_CMD
329c: store_word_0_100 0x062003f2, MC0_DRAM_CMD
32a4: store_word_0_100 0x062006f2, MC0_DRAM_CMD
32ac: store_word_0_100 0x062001f2, MC0_DRAM_CMD
32b4: store_word_0_100 2, MC0_CNTL
32b8: sync
32bc: delay -7
32c0: store_word_0_100 0, MC0_POINTER
32c4: store_word_0_100 0x0620038e, MC0_DRAM_CMD
32cc: store_word_0_100 0x0620068e, MC0_DRAM_CMD
32d4: store_word_0_100 0x0620018e, MC0_DRAM_CMD
32dc: store_word_0_100 0x062003b2, MC0_DRAM_CMD
32e4: store_word_0_100 0x062006b2, MC0_DRAM_CMD
32ec: store_word_0_100 0x062001b2, MC0_DRAM_CMD
32f4: store_word_0_100 2, MC0_CNTL
32f8: store_word_0_100 0, MC0_POINTER
32fc: store_word_0_100 0x00001605, MC0_CNTL
3304: store_word_0_100 0x00000605, MC0_CNTL
330c: %r10_0 = *(MC1_CNTL)
3310: sync
3314: delay -7
3318: store_word_0_100 0, MC0_POINTER
331c: store_word_0_100 0x003c0000, MC0_DRAM_CMD
3324: store_word_0_100 2, MC0_CNTL
3328: store_word_0_100 0x00001000, MC0_CNTL
3330: store_word_0_100 0x00000605, MC0_CNTL
3338: %r10_0 = *(MC1_CNTL)
333c: sync
3340: delay -7
3344: call 0x4c14
3348: %r10_0 = 0
334c: %r11_1 = 1
3350: %r12_0 = 3
3354: store_word 0, 0xe4000024
3358: store_word %r10_0, 0xe40015e0
335c: %r10_0 = *(0xe40015e8)
3360: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3364: branch_cond0 %r10_0, 1 -> 0x3370 v
3368: %r10_0 = *(0xe40015e0)
336c: jmp 0x3378 v
3370: %r10_0 = *(0xe40015e0)
3374: %r12_0 = 7
3378: call 0x33a0
337c: %r10_0 = add %r11_0, 1
3380: %r11_1 = rotlw_by_1_then_and %r11_1, -2
3384: branch_cond1 %r11_0, %r12_0 -> 0x3378 ^
3388: %r12_0 = *(0xe4000024)
338c: beq %r10_0, 0 -> 0x339c v
3390: store_word 0x0014149a, 0xe4000024
3398: call 0x100c
339c: jmp 0x5610 v
33a0: %r12_1 = rotlw_by_26_then_and %r11_0, 0x10000000
33a8: %r10_0 = rotlw_by_6_then_and %r11_0, 0x00000080
33b0: %r12_1 = add %r12_1, %r10_0
33b4: %r10_0 = rotlw_by_2_then_and %r11_0, 4
33b8: %r12_1 = add %r12_1, %r10_0
33bc: %r12_0 = 0x10000000
33c4: %r12_0 = rotlw_by_31_then_and %r13_0, -1
33c8: beq %r13_0, 4 -> 0x33fc v
33cc: beq %r13_0, 0x00000080 -> 0x33c4 ^
33d4: %r13_1 = add %r12_1, %r13_0
33d8: store_word 0, %r12_1
33dc: store_word -1, %r13_1
33e0: %r10_0 = *(%r12_1)
33e4: %r10_0 = load_word -6
33e8: branch_cond0 %r10_0, 0 -> 0x33f0 v
33ec: beq %r10_1, -1 -> 0x33c4 ^
33f0: %r12_0 = *(0xe4000024)
33f4: %r10_0 = or %r10_0, %r11_1
33f8: store_word %r10_0, 0xe4000024
33fc: return
3400: call 0x4c14
3404: %r10_0 = 0
3408: op_1E 0, -7
340c: %r10_1 = 0x00001800
3414: call 0x4d44
3418: beq %r12_0, 0 -> 0x3420 v
341c: %r10_0 = or %r11_0, 1
3420: beq %r12_1, 0 -> 0x342c v
3424: %r10_0 = or %r11_0, 0x00000010
342c: op_1E 0, -7
3430: op_1E 1, -7
3434: %r10_1 = 0x00001804
343c: call 0x4d44
3440: beq %r12_0, 0 -> 0x3448 v
3444: %r10_0 = or %r11_0, 2
3448: beq %r12_1, 0 -> 0x3454 v
344c: %r10_0 = or %r11_0, 0x00000020
3454: op_1E 1, -7
3458: op_1E 2, -7
345c: %r10_1 = 0x00001880
3464: call 0x4d44
3468: beq %r12_0, 0 -> 0x3470 v
346c: %r10_0 = or %r11_0, 4
3470: beq %r12_1, 0 -> 0x347c v
3474: %r10_0 = or %r11_0, 0x00000040
347c: op_1E 2, -7
3480: op_1E 3, -7
3484: %r10_1 = 0x00001884
348c: call 0x4d44
3490: beq %r12_0, 0 -> 0x349c v
3494: %r10_0 = or %r11_0, 0x00000008
349c: beq %r12_1, 0 -> 0x34a8 v
34a0: %r10_0 = or %r11_0, 0x00000080
34a8: op_1E 3, -7
34ac: return
34b0: %r10_0 = 0
34b4: op_1E %r11_0, -7
34b8: %r12_0 = 0
34bc: %r12_1 = 0
34c0: %r12_0 = 0
34c4: op_1E %r11_0, -7
34c8: %r10_0 = add %r11_0, 1
34cc: branch_cond0 %r11_0, 4 -> 0x34b4 ^
34d0: %r10_0 = 0
34d4: %r13_1 = 0
34d8: store_word %r11_0, 0xe4000018
34dc: store_word_0_100 %r11_0, MC0_RD_STR_DLY_0
34e0: store_word_0_100 %r11_0, MC0_RD_STR_DLY_1
34e4: %r10_0 = *(MC1_RD_STR_DLY_1)
34e8: sync
34ec: delay -7
34f0: store_word_0_100 0x00001605, MC0_CNTL
34f8: store_word_0_100 0x00000605, MC0_CNTL
3500: %r10_0 = 0
3504: %r11_1 = 0
3508: %r10_1 = 0x00001808
3510: call 0x4f1c
3514: call 0x10c0
3518: %r10_1 = rotlw_by_0_then_and %r10_1, -1
351c: %r13_1 = or %r13_1, %r10_1
3520: %r10_1 = 0x000000ff
3528: store_word %r10_0, 0xe40015e0
352c: %r10_0 = *(0xe40015e8)
3530: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3534: branch_cond0 %r10_0, 1 -> 0x3540 v
3538: %r10_0 = *(0xe40015e0)
353c: jmp 0x355c v
3540: %r10_0 = *(0xe40015e0)
3544: %r10_0 = load_word -6
3548: %r10_1 = rotlw_by_31_then_and %r10_1, -1
354c: %r10_1 = add %r10_1, 0x00001808
3554: call 0x4f1c
3558: call 0x10c0
355c: %r10_1 = rotlw_by_16_then_and %r10_1, -1
3560: %r13_1 = or %r13_1, %r10_1
3564: op_1E 0, -7
3568: call 0x528c
356c: call 0x531c
3570: store_word %r10_0, 0xe40015e0
3574: %r10_0 = *(0xe40015e8)
3578: %r10_0 = rotlw_by_31_then_and %r10_0, 1
357c: branch_cond0 %r10_0, 0 -> 0x3588 v
3580: %r10_0 = *(0xe40015e0)
3584: jmp 0x3590 v
3588: %r10_0 = *(0xe40015e0)
358c: call 0x120c
3590: op_1E 0, -7
3594: %r10_0 = 0
3598: %r11_1 = 0
359c: %r10_1 = 0x0000180c
35a4: call 0x4f1c
35a8: call 0x10c0
35ac: %r10_1 = rotlw_by_4_then_and %r10_1, -1
35b0: %r13_1 = or %r13_1, %r10_1
35b4: %r10_1 = 0x000000ff
35bc: store_word %r10_0, 0xe40015e0
35c0: %r10_0 = *(0xe40015e8)
35c4: %r10_0 = rotlw_by_30_then_and %r10_0, 1
35c8: branch_cond0 %r10_0, 1 -> 0x35d4 v
35cc: %r10_0 = *(0xe40015e0)
35d0: jmp 0x35f0 v
35d4: %r10_0 = *(0xe40015e0)
35d8: %r10_0 = load_word -6
35dc: %r10_1 = rotlw_by_31_then_and %r10_1, -1
35e0: %r10_1 = add %r10_1, 0x0000180c
35e8: call 0x4f1c
35ec: call 0x10c0
35f0: %r10_1 = rotlw_by_20_then_and %r10_1, -1
35f4: %r13_1 = or %r13_1, %r10_1
35f8: op_1E 1, -7
35fc: call 0x528c
3600: call 0x531c
3604: store_word %r10_0, 0xe40015e0
3608: %r10_0 = *(0xe40015e8)
360c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3610: branch_cond0 %r10_0, 0 -> 0x361c v
3614: %r10_0 = *(0xe40015e0)
3618: jmp 0x3624 v
361c: %r10_0 = *(0xe40015e0)
3620: call 0x120c
3624: op_1E 1, -7
3628: %r10_0 = 0
362c: %r11_1 = 0
3630: %r10_1 = 0x00001888
3638: call 0x4f1c
363c: call 0x10c0
3640: %r10_1 = rotlw_by_8_then_and %r10_1, -1
3644: %r13_1 = or %r13_1, %r10_1
3648: %r10_1 = 0x000000ff
3650: store_word %r10_0, 0xe40015e0
3654: %r10_0 = *(0xe40015e8)
3658: %r10_0 = rotlw_by_30_then_and %r10_0, 1
365c: branch_cond0 %r10_0, 1 -> 0x3668 v
3660: %r10_0 = *(0xe40015e0)
3664: jmp 0x3684 v
3668: %r10_0 = *(0xe40015e0)
366c: %r10_0 = load_word -6
3670: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3674: %r10_1 = add %r10_1, 0x00001888
367c: call 0x4f1c
3680: call 0x10c0
3684: %r10_1 = rotlw_by_24_then_and %r10_1, -1
3688: %r13_1 = or %r13_1, %r10_1
368c: op_1E 2, -7
3690: call 0x528c
3694: call 0x531c
3698: store_word %r10_0, 0xe40015e0
369c: %r10_0 = *(0xe40015e8)
36a0: %r10_0 = rotlw_by_31_then_and %r10_0, 1
36a4: branch_cond0 %r10_0, 0 -> 0x36b0 v
36a8: %r10_0 = *(0xe40015e0)
36ac: jmp 0x36b8 v
36b0: %r10_0 = *(0xe40015e0)
36b4: call 0x120c
36b8: op_1E 2, -7
36bc: %r10_0 = 0
36c0: %r11_1 = 0
36c4: %r10_1 = 0x0000188c
36cc: call 0x4f1c
36d0: call 0x10c0
36d4: %r10_1 = rotlw_by_12_then_and %r10_1, -1
36d8: %r13_1 = or %r13_1, %r10_1
36dc: %r10_1 = 0x000000ff
36e4: store_word %r10_0, 0xe40015e0
36e8: %r10_0 = *(0xe40015e8)
36ec: %r10_0 = rotlw_by_30_then_and %r10_0, 1
36f0: branch_cond0 %r10_0, 1 -> 0x36fc v
36f4: %r10_0 = *(0xe40015e0)
36f8: jmp 0x3718 v
36fc: %r10_0 = *(0xe40015e0)
3700: %r10_0 = load_word -6
3704: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3708: %r10_1 = add %r10_1, 0x0000188c
3710: call 0x4f1c
3714: call 0x10c0
3718: %r10_1 = rotlw_by_28_then_and %r10_1, -1
371c: %r13_1 = or %r13_1, %r10_1
3720: op_1E 3, -7
3724: call 0x528c
3728: call 0x531c
372c: store_word %r10_0, 0xe40015e0
3730: %r10_0 = *(0xe40015e8)
3734: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3738: branch_cond0 %r10_0, 0 -> 0x3744 v
373c: %r10_0 = *(0xe40015e0)
3740: jmp 0x374c v
3744: %r10_0 = *(0xe40015e0)
3748: call 0x120c
374c: op_1E 3, -7
3750: %r10_0 = load_word -5
3754: %r10_0 = add %r11_0, 0x01010101
375c: branch_cond0 %r11_0, 0x50505050 -> 0x34d8 ^
3764: %r10_0 = 0
3768: op_1E %r10_0, -7
376c: %r10_0 = rotlw_by_2_then_and %r10_0, 0x000000ff
3774: %r11_1 = add %r11_0, 0xe4001600
377c: store_word %r13_0, %r11_1
3780: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
3788: beq %r11_1, 0 -> 0x53cc v
378c: %r10_0 = and %r12_0, 0x0000ffff
3794: %r10_0 = div %r11_0, %r11_1
3798: %r13_1 = rotlw_by_0_then_and %r11_0, 0x000000ff
37a0: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
37a8: beq %r11_1, 0 -> 0x53f8 v
37ac: %r10_0 = rotlw_by_16_then_and %r12_0, 0x0000ffff
37b4: %r10_0 = div %r11_0, %r11_1
37b8: %r10_0 = rotlw_by_8_then_and %r11_0, 0x0000ff00
37c0: %r13_1 = or %r13_1, %r11_0
37c4: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
37cc: beq %r11_1, 0 -> 0x5424 v
37d0: %r10_0 = and %r12_1, 0x0000ffff
37d8: %r10_0 = div %r11_0, %r11_1
37dc: %r10_0 = rotlw_by_16_then_and %r11_0, 0x00ff0000
37e4: %r13_1 = or %r13_1, %r11_0
37e8: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
37f0: beq %r11_1, 0 -> 0x5450 v
37f4: %r10_0 = rotlw_by_16_then_and %r12_1, 0x0000ffff
37fc: %r10_0 = div %r11_0, %r11_1
3800: %r10_0 = rotlw_by_24_then_and %r11_0, 0xff000000
3808: %r13_1 = or %r13_1, %r11_0
380c: op_1E %r10_0, -7
3810: %r10_0 = add %r10_0, 1
3814: branch_cond0 %r10_0, 4 -> 0x3768 ^
3818: return
381c: %r10_0 = 0
3820: op_1E %r11_0, -7
3824: %r12_0 = 0
3828: %r12_1 = 0
382c: %r12_0 = 0
3830: op_1E %r11_0, -7
3834: %r10_0 = add %r11_0, 1
3838: branch_cond0 %r11_0, 4 -> 0x3820 ^
383c: store_word_0_100 0, MC0_WR_STR_DLL_0
3840: store_word_0_100 0, MC0_WR_STR_DLL_1
3844: call 0x3c44
3848: %r10_0 = 0
384c: %r13_1 = 0
3850: store_word %r11_0, 0xe4000018
3854: call 0x3cb0
3858: call 0x4c14
385c: %r10_0 = 0
3860: %r11_1 = 0
3864: %r10_1 = 0x00001808
386c: %r10_0 = load_word -3
3870: call 0x50d4
3874: call 0x10c0
3878: %r10_1 = rotlw_by_0_then_and %r10_1, -1
387c: %r13_1 = or %r13_1, %r10_1
3880: %r10_1 = 0x000000ff
3888: store_word %r10_0, 0xe40015e0
388c: %r10_0 = *(0xe40015e8)
3890: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3894: branch_cond0 %r10_0, 1 -> 0x38a0 v
3898: %r10_0 = *(0xe40015e0)
389c: jmp 0x38c0 v
38a0: %r10_0 = *(0xe40015e0)
38a4: %r10_0 = load_word -6
38a8: %r10_1 = rotlw_by_31_then_and %r10_1, -1
38ac: %r10_1 = add %r10_1, 0x00001808
38b4: %r10_0 = load_word -3
38b8: call 0x50d4
38bc: call 0x10c0
38c0: %r10_1 = rotlw_by_16_then_and %r10_1, -1
38c4: %r13_1 = or %r13_1, %r10_1
38c8: op_1E 0, -7
38cc: call 0x514c
38d0: call 0x51dc
38d4: store_word %r10_0, 0xe40015e0
38d8: %r10_0 = *(0xe40015e8)
38dc: %r10_0 = rotlw_by_31_then_and %r10_0, 1
38e0: branch_cond0 %r10_0, 0 -> 0x38ec v
38e4: %r10_0 = *(0xe40015e0)
38e8: jmp 0x38f4 v
38ec: %r10_0 = *(0xe40015e0)
38f0: call 0x120c
38f4: op_1E 0, -7
38f8: %r10_0 = 0
38fc: %r11_1 = 0
3900: %r10_1 = 0x0000180c
3908: %r12_0 = load_word -3
390c: call 0x50d4
3910: call 0x10c0
3914: %r10_1 = rotlw_by_4_then_and %r10_1, -1
3918: %r13_1 = or %r13_1, %r10_1
391c: %r10_1 = 0x000000ff
3924: store_word %r10_0, 0xe40015e0
3928: %r10_0 = *(0xe40015e8)
392c: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3930: branch_cond0 %r10_0, 1 -> 0x393c v
3934: %r10_0 = *(0xe40015e0)
3938: jmp 0x395c v
393c: %r10_0 = *(0xe40015e0)
3940: %r10_0 = load_word -6
3944: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3948: %r10_1 = add %r10_1, 0x0000180c
3950: %r12_0 = load_word -3
3954: call 0x50d4
3958: call 0x10c0
395c: %r10_1 = rotlw_by_20_then_and %r10_1, -1
3960: %r13_1 = or %r13_1, %r10_1
3964: op_1E 1, -7
3968: call 0x514c
396c: call 0x51dc
3970: store_word %r10_0, 0xe40015e0
3974: %r10_0 = *(0xe40015e8)
3978: %r10_0 = rotlw_by_31_then_and %r10_0, 1
397c: branch_cond0 %r10_0, 0 -> 0x3988 v
3980: %r10_0 = *(0xe40015e0)
3984: jmp 0x3990 v
3988: %r10_0 = *(0xe40015e0)
398c: call 0x120c
3990: op_1E 1, -7
3994: %r10_0 = 0
3998: %r11_1 = 0
399c: %r10_1 = 0x00001888
39a4: %r10_0 = load_word -3
39a8: call 0x50d4
39ac: call 0x10c0
39b0: %r10_1 = rotlw_by_8_then_and %r10_1, -1
39b4: %r13_1 = or %r13_1, %r10_1
39b8: %r10_1 = 0x000000ff
39c0: store_word %r10_0, 0xe40015e0
39c4: %r10_0 = *(0xe40015e8)
39c8: %r10_0 = rotlw_by_30_then_and %r10_0, 1
39cc: branch_cond0 %r10_0, 1 -> 0x39d8 v
39d0: %r10_0 = *(0xe40015e0)
39d4: jmp 0x39f8 v
39d8: %r10_0 = *(0xe40015e0)
39dc: %r10_0 = load_word -6
39e0: %r10_1 = rotlw_by_31_then_and %r10_1, -1
39e4: %r10_1 = add %r10_1, 0x00001888
39ec: %r10_0 = load_word -3
39f0: call 0x50d4
39f4: call 0x10c0
39f8: %r10_1 = rotlw_by_24_then_and %r10_1, -1
39fc: %r13_1 = or %r13_1, %r10_1
3a00: op_1E 2, -7
3a04: call 0x514c
3a08: call 0x51dc
3a0c: store_word %r10_0, 0xe40015e0
3a10: %r10_0 = *(0xe40015e8)
3a14: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3a18: branch_cond0 %r10_0, 0 -> 0x3a24 v
3a1c: %r10_0 = *(0xe40015e0)
3a20: jmp 0x3a2c v
3a24: %r10_0 = *(0xe40015e0)
3a28: call 0x120c
3a2c: op_1E 2, -7
3a30: %r10_0 = 0
3a34: %r11_1 = 0
3a38: %r10_1 = 0x0000188c
3a40: %r12_0 = load_word -3
3a44: call 0x50d4
3a48: call 0x10c0
3a4c: %r10_1 = rotlw_by_12_then_and %r10_1, -1
3a50: %r13_1 = or %r13_1, %r10_1
3a54: %r10_1 = 0x000000ff
3a5c: store_word %r10_0, 0xe40015e0
3a60: %r10_0 = *(0xe40015e8)
3a64: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3a68: branch_cond0 %r10_0, 1 -> 0x3a74 v
3a6c: %r10_0 = *(0xe40015e0)
3a70: jmp 0x3a94 v
3a74: %r10_0 = *(0xe40015e0)
3a78: %r10_0 = load_word -6
3a7c: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3a80: %r10_1 = add %r10_1, 0x0000188c
3a88: %r12_0 = load_word -3
3a8c: call 0x50d4
3a90: call 0x10c0
3a94: %r10_1 = rotlw_by_28_then_and %r10_1, -1
3a98: %r13_1 = or %r13_1, %r10_1
3a9c: op_1E 3, -7
3aa0: call 0x514c
3aa4: call 0x51dc
3aa8: store_word %r10_0, 0xe40015e0
3aac: %r10_0 = *(0xe40015e8)
3ab0: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3ab4: branch_cond0 %r10_0, 0 -> 0x3ac0 v
3ab8: %r10_0 = *(0xe40015e0)
3abc: jmp 0x3ac8 v
3ac0: %r10_0 = *(0xe40015e0)
3ac4: call 0x120c
3ac8: op_1E 3, -7
3acc: %r10_0 = load_word -5
3ad0: %r10_0 = add %r11_0, 0x01010101
3ad8: branch_cond0 %r11_0, 0x50505050 -> 0x3850 ^
3ae0: store_word 0x000000ff, 0xe4000024
3ae8: %r10_0 = 0
3aec: op_1E %r10_0, -7
3af0: %r10_0 = rotlw_by_2_then_and %r10_0, 0x000000ff
3af8: %r11_1 = add %r11_0, 0xe4001610
3b00: store_word %r13_0, %r11_1
3b04: call 0x0c3c
3b08: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
3b10: beq %r11_1, 0 -> 0x54ec v
3b14: %r10_0 = and %r12_0, 0x0000ffff
3b1c: %r10_0 = div %r11_0, %r11_1
3b20: %r13_1 = rotlw_by_0_then_and %r11_0, 0x000000ff
3b28: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
3b30: beq %r11_1, 0 -> 0x5524 v
3b34: %r10_0 = rotlw_by_16_then_and %r12_0, 0x0000ffff
3b3c: %r10_0 = div %r11_0, %r11_1
3b40: %r10_0 = rotlw_by_8_then_and %r11_0, 0x0000ff00
3b48: %r13_1 = or %r13_1, %r11_0
3b4c: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
3b54: beq %r11_1, 0 -> 0x555c v
3b58: %r10_0 = and %r12_1, 0x0000ffff
3b60: %r10_0 = div %r11_0, %r11_1
3b64: %r10_0 = rotlw_by_16_then_and %r11_0, 0x00ff0000
3b6c: %r13_1 = or %r13_1, %r11_0
3b70: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
3b78: beq %r11_1, 0 -> 0x5594 v
3b7c: %r10_0 = rotlw_by_16_then_and %r12_1, 0x0000ffff
3b84: %r10_0 = div %r11_0, %r11_1
3b88: %r10_0 = rotlw_by_24_then_and %r11_0, 0xff000000
3b90: %r13_1 = or %r13_1, %r11_0
3b94: op_1E %r10_0, -7
3b98: %r10_0 = add %r10_0, 1
3b9c: branch_cond0 %r10_0, 4 -> 0x3aec ^
3ba0: return
3ba4: %r10_0 = *(0xe4000288)
3ba8: sync
3bac: delay -7
3bb0: return
3bb4: store_word 2, 0xe400028c
3bb8: %r12_0 = *(0xe400028c)
3bbc: sync
3bc0: delay -7
3bc4: store_word 0, 0xe400028c
3bc8: %r12_0 = *(0xe400028c)
3bcc: sync
3bd0: delay -7
3bd4: store_word 0, 0xe4000288
3bd8: call 0x3ba4
3bdc: store_word 1, 0xe4000288
3be0: call 0x3ba4
3be4: store_word 5, 0xe4000288
3be8: call 0x3ba4
3bec: store_word 1, 0xe4000288
3bf0: call 0x3ba4
3bf4: store_word 0, 0xe4000288
3bf8: call 0x3ba4
3bfc: return
3c00: %r10_0 = and %r10_1, 0x000000ff
3c08: branch_cond5 %r11_0, %r10_0 -> 0x3c10 v
3c0c: %r10_0 = or %r11_0, %r11_0
3c10: %r10_0 = rotlw_by_24_then_and %r10_1, 0x000000ff
3c18: branch_cond5 %r11_0, %r10_0 -> 0x3c20 v
3c1c: %r10_0 = or %r11_0, %r11_0
3c20: %r10_0 = rotlw_by_16_then_and %r10_1, 0x000000ff
3c28: branch_cond5 %r11_0, %r10_0 -> 0x3c30 v
3c2c: %r10_0 = or %r11_0, %r11_0
3c30: %r10_0 = rotlw_by_8_then_and %r10_1, 0x000000ff
3c38: branch_cond5 %r11_0, %r10_0 -> 0x3c40 v
3c3c: %r10_0 = or %r11_0, %r11_0
3c40: return
3c44: %r10_0 = 0x00000050
3c4c: %r10_0 = load_word -6
3c50: call 0x3c00
3c54: %r12_0 = load_word -6
3c58: call 0x3c00
3c5c: %r10_0 = load_word -6
3c60: call 0x3c00
3c64: %r12_0 = load_word -6
3c68: call 0x3c00
3c6c: %r10_1 = rotlw_by_8_then_and %r10_0, -1
3c70: %r10_0 = or %r10_0, %r10_1
3c74: %r10_1 = rotlw_by_16_then_and %r10_0, -1
3c78: %r10_0 = or %r10_0, %r10_1
3c7c: %r10_0 = load_word -6
3c80: %r10_1 = subf %r10_1, %r10_0
3c84: store_word %r10_1, MC0_WR_STR_DLL_0
3c88: %r12_0 = load_word -6
3c8c: %r10_1 = subf %r10_1, %r10_0
3c90: store_word %r10_1, MC0_WR_STR_DLL_1
3c94: %r10_0 = load_word -6
3c98: %r10_1 = subf %r10_1, %r10_0
3c9c: store_word %r10_1, MC1_WR_STR_DLL_0
3ca0: %r12_0 = load_word -6
3ca4: %r10_1 = subf %r10_1, %r10_0
3ca8: store_word %r10_1, MC1_WR_STR_DLL_1
3cac: return
3cb0: %r10_0 = load_word -6
3cb4: %r10_1 = add %r10_1, 0x01010101
3cbc: store_word %r10_1, MC0_WR_STR_DLL_0
3cc0: %r12_0 = load_word -6
3cc4: %r10_1 = add %r10_1, 0x01010101
3ccc: store_word %r10_1, MC0_WR_STR_DLL_1
3cd0: %r10_0 = load_word -6
3cd4: %r10_1 = add %r10_1, 0x01010101
3cdc: store_word %r10_1, MC1_WR_STR_DLL_0
3ce0: %r12_0 = load_word -6
3ce4: %r10_1 = add %r10_1, 0x01010101
3cec: store_word %r10_1, MC1_WR_STR_DLL_1
3cf0: %r12_0 = *(MC1_WR_STR_DLL_1)
3cf4: sync
3cf8: delay -7
3cfc: call 0x3bb4
3d00: store_word_0_100 0, MC0_CNTL
3d04: %r12_0 = load_word -6
3d08: %r10_1 = and %r10_1, -2
3d0c: store_word %r10_1, 0xe40002a4
3d10: store_word_0_100 0, MC0_POINTER
3d14: store_word_0_100 0x001c0000, MC0_DRAM_CMD
3d1c: store_word_0_100 2, MC0_CNTL
3d20: %r10_0 = *(MC1_CNTL)
3d24: sync
3d28: delay -7
3d2c: %r10_1 = or %r10_1, 1
3d30: store_word %r10_1, 0xe40002a4
3d34: %r12_0 = *(0xe40002a4)
3d38: sync
3d3c: delay -7
3d40: store_word_0_100 0, MC0_POINTER
3d44: store_word_0_100 0x423c0000, MC0_DRAM_CMD
3d4c: store_word_0_100 0x0c280100, MC0_DRAM_CMD
3d54: store_word_0_100 0x06200221, MC0_DRAM_CMD
3d5c: %r12_0 = *(0xe4000014)
3d60: store_word_0_100 %r10_0, MC0_DRAM_CMD
3d64: %r10_0 = *(0xe4000010)
3d68: store_word_0_100 %r10_0, MC0_DRAM_CMD
3d6c: store_word %r10_0, 0xe40015e0
3d70: %r12_0 = *(0xe40015ec)
3d74: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
3d7c: branch_cond0 %r10_0, 1 -> 0x3d88 v
3d80: %r10_0 = *(0xe40015e0)
3d84: jmp 0x3db4 v
3d88: %r10_0 = *(0xe40015e0)
3d8c: store_word %r10_0, 0xe40015e0
3d90: %r12_0 = *(0xe40015ec)
3d94: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
3d9c: beq %r10_0, 6 -> 0x3da8 v
3da0: %r10_0 = *(0xe40015e0)
3da4: jmp 0x3db4 v
3da8: %r10_0 = *(0xe40015e0)
3dac: call 0x04e0
3db0: store_word_0_100 %r10_1, MC0_DRAM_CMD
3db4: store_word_0_100 2, MC0_CNTL
3db8: %r10_0 = *(MC1_CNTL)
3dbc: sync
3dc0: delay -7
3dc4: store_word_0_100 0, MC0_POINTER
3dc8: store_word_0_100 0x0c280100, MC0_DRAM_CMD
3dd0: store_word_0_100 0x2f240000, MC0_DRAM_CMD
3dd8: store_word_0_100 0x2f240000, MC0_DRAM_CMD
3de0: store_word_0_100 0x003c0000, MC0_DRAM_CMD
3de8: store_word_0_100 2, MC0_CNTL
3dec: store_word_0_100 0x00001605, MC0_CNTL
3df4: store_word_0_100 0x00000605, MC0_CNTL
3dfc: %r10_0 = *(MC1_CNTL)
3e00: sync
3e04: delay -7
3e08: return
3e0c: store_word_0_100 0, MC0_CNTL
3e10: store_word_0_100 0, MC0_POINTER
3e14: store_word_0_100 0x00040000, MC0_DRAM_CMD
3e1c: store_word_0_100 2, MC0_CNTL
3e20: %r10_0 = *(MC1_CNTL)
3e24: sync
3e28: delay -7
3e2c: call 0x3bb4
3e30: store_word_0_100 0, MC0_POINTER
3e34: store_word_0_100 0x003c0000, MC0_DRAM_CMD
3e3c: store_word_0_100 2, MC0_CNTL
3e40: %r10_0 = *(MC1_CNTL)
3e44: sync
3e48: delay -7
3e4c: return
3e50: store_word_0_100 0, MC0_CNTL
3e54: store_word_0_100 0, MC0_POINTER
3e58: %r10_0 = 0
3e5c: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3e60: beq %r11_1, 1 -> 0x3e68 v
3e64: %r10_0 = -1
3e68: store_word %r11_0, MC0_DRAM_DATA
3e6c: %r10_0 = xor %r11_0, -1
3e70: store_word %r11_0, MC1_DRAM_DATA
3e74: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e78: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e7c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e80: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e84: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e88: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e8c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e90: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e94: %r10_0 = 0
3e98: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3e9c: beq %r11_1, 1 -> 0x3ea4 v
3ea0: %r10_0 = -1
3ea4: store_word %r11_0, MC0_DRAM_DATA
3ea8: %r10_0 = xor %r11_0, -1
3eac: store_word %r11_0, MC1_DRAM_DATA
3eb0: store_word_0_100 %r10_0, MC0_DRAM_DATA
3eb4: store_word_0_100 %r10_0, MC0_DRAM_DATA
3eb8: %r10_0 = xor %r10_0, -1
3ebc: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ec0: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ec4: %r10_0 = xor %r10_0, -1
3ec8: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ecc: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ed0: %r10_0 = xor %r10_0, -1
3ed4: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ed8: store_word_0_100 %r10_0, MC0_DRAM_DATA
3edc: %r10_0 = 0x0f2c0000
3ee4: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
3eec: %r10_0 = or %r11_0, %r11_1
3ef0: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
3ef8: %r10_0 = or %r11_0, %r11_1
3efc: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
3f04: %r10_0 = or %r11_0, %r11_1
3f08: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
3f10: %r10_0 = or %r11_0, %r11_1
3f14: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f18: %r10_0 = and %r11_0, 0x0003e000
3f20: %r10_0 = xor %r11_0, 0x00008000
3f28: %r10_0 = or %r11_0, 0x012c0000
3f30: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f34: %r10_0 = xor %r11_0, 0x00008000
3f3c: %r10_0 = and %r11_0, 0x0003e000
3f44: %r10_0 = or %r11_0, 0x01b00000
3f4c: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
3f54: %r10_0 = or %r11_0, %r11_1
3f58: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
3f60: %r10_0 = or %r11_0, %r11_1
3f64: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
3f6c: %r10_0 = or %r11_0, %r11_1
3f70: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
3f78: %r10_0 = or %r11_0, %r11_1
3f7c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f80: %r10_0 = or %r11_0, 0x02000000
3f88: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f8c: %r10_0 = and %r11_0, 0x0003e000
3f94: %r10_0 = xor %r11_0, 0x00010000
3f9c: %r10_0 = or %r11_0, 0x1f2c0000
3fa4: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fa8: %r10_0 = xor %r11_0, 0x00010000
3fb0: %r10_0 = and %r11_0, 0x0003e000
3fb8: %r10_0 = or %r11_0, 0x1f280000
3fc0: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fc4: %r10_0 = xor %r11_0, 0x00008000
3fcc: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fd0: %r10_0 = xor %r11_0, 0x00008000
3fd8: %r10_0 = xor %r11_0, 0x00010000
3fe0: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fe4: %r10_0 = xor %r11_0, 0x00010000
3fec: store_word_0_100 2, MC0_CNTL
3ff0: store_word_0_100 0x00001605, MC0_CNTL
3ff8: store_word_0_100 0x00000605, MC0_CNTL
4000: %r10_1 = add %r10_1, 0x00000020
4008: store_word_0_100 0, MC0_CNTL
400c: store_word_0_100 0, MC0_POINTER
4010: %r10_0 = 0
4014: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4018: beq %r11_1, 1 -> 0x4020 v
401c: %r10_0 = -1
4020: store_word %r11_0, MC0_DRAM_DATA
4024: %r10_0 = xor %r11_0, -1
4028: store_word %r11_0, MC1_DRAM_DATA
402c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4030: store_word_0_100 %r10_0, MC0_DRAM_DATA
4034: store_word_0_100 %r10_0, MC0_DRAM_DATA
4038: store_word_0_100 %r10_0, MC0_DRAM_DATA
403c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4040: store_word_0_100 %r10_0, MC0_DRAM_DATA
4044: store_word_0_100 %r10_0, MC0_DRAM_DATA
4048: store_word_0_100 %r10_0, MC0_DRAM_DATA
404c: %r10_0 = 0
4050: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4054: beq %r11_1, 1 -> 0x405c v
4058: %r10_0 = -1
405c: store_word %r11_0, MC0_DRAM_DATA
4060: %r10_0 = xor %r11_0, -1
4064: store_word %r11_0, MC1_DRAM_DATA
4068: store_word_0_100 %r10_0, MC0_DRAM_DATA
406c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4070: %r10_0 = xor %r10_0, -1
4074: store_word_0_100 %r10_0, MC0_DRAM_DATA
4078: store_word_0_100 %r10_0, MC0_DRAM_DATA
407c: %r10_0 = xor %r10_0, -1
4080: store_word_0_100 %r10_0, MC0_DRAM_DATA
4084: store_word_0_100 %r10_0, MC0_DRAM_DATA
4088: %r10_0 = xor %r10_0, -1
408c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4090: store_word_0_100 %r10_0, MC0_DRAM_DATA
4094: %r10_0 = 0x0f2c0000
409c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
40a4: %r10_0 = or %r11_0, %r11_1
40a8: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
40b0: %r10_0 = or %r11_0, %r11_1
40b4: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
40bc: %r10_0 = or %r11_0, %r11_1
40c0: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
40c8: %r10_0 = or %r11_0, %r11_1
40cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
40d0: %r10_0 = and %r11_0, 0x0003e000
40d8: %r10_0 = xor %r11_0, 0x00008000
40e0: %r10_0 = or %r11_0, 0x012c0000
40e8: store_word_0_100 %r11_0, MC0_DRAM_CMD
40ec: %r10_0 = xor %r11_0, 0x00008000
40f4: %r10_0 = and %r11_0, 0x0003e000
40fc: %r10_0 = or %r11_0, 0x01b00000
4104: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
410c: %r10_0 = or %r11_0, %r11_1
4110: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4118: %r10_0 = or %r11_0, %r11_1
411c: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4124: %r10_0 = or %r11_0, %r11_1
4128: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4130: %r10_0 = or %r11_0, %r11_1
4134: store_word_0_100 %r11_0, MC0_DRAM_CMD
4138: %r10_0 = or %r11_0, 0x02000000
4140: store_word_0_100 %r11_0, MC0_DRAM_CMD
4144: %r10_0 = and %r11_0, 0x0003e000
414c: %r10_0 = xor %r11_0, 0x00010000
4154: %r10_0 = or %r11_0, 0x1f2c0000
415c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4160: %r10_0 = xor %r11_0, 0x00010000
4168: %r10_0 = and %r11_0, 0x0003e000
4170: %r10_0 = or %r11_0, 0x1f280000
4178: store_word_0_100 %r11_0, MC0_DRAM_CMD
417c: %r10_0 = xor %r11_0, 0x00008000
4184: store_word_0_100 %r11_0, MC0_DRAM_CMD
4188: %r10_0 = xor %r11_0, 0x00008000
4190: %r10_0 = xor %r11_0, 0x00010000
4198: store_word_0_100 %r11_0, MC0_DRAM_CMD
419c: %r10_0 = xor %r11_0, 0x00010000
41a4: store_word_0_100 2, MC0_CNTL
41a8: store_word_0_100 0x00001605, MC0_CNTL
41b0: store_word_0_100 0x00000605, MC0_CNTL
41b8: %r10_1 = add %r10_1, 0x00000020
41c0: store_word_0_100 0, MC0_CNTL
41c4: store_word_0_100 0, MC0_POINTER
41c8: %r10_0 = 0
41cc: %r11_1 = rotlw_by_25_then_and %r10_1, 1
41d0: beq %r11_1, 1 -> 0x41d8 v
41d4: %r10_0 = -1
41d8: store_word %r11_0, MC0_DRAM_DATA
41dc: %r10_0 = xor %r11_0, -1
41e0: store_word %r11_0, MC1_DRAM_DATA
41e4: store_word_0_100 %r10_0, MC0_DRAM_DATA
41e8: store_word_0_100 %r10_0, MC0_DRAM_DATA
41ec: store_word_0_100 %r10_0, MC0_DRAM_DATA
41f0: store_word_0_100 %r10_0, MC0_DRAM_DATA
41f4: store_word_0_100 %r10_0, MC0_DRAM_DATA
41f8: store_word_0_100 %r10_0, MC0_DRAM_DATA
41fc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4200: store_word_0_100 %r10_0, MC0_DRAM_DATA
4204: %r10_0 = 0
4208: %r11_1 = rotlw_by_25_then_and %r10_1, 1
420c: beq %r11_1, 1 -> 0x4214 v
4210: %r10_0 = -1
4214: store_word %r11_0, MC0_DRAM_DATA
4218: %r10_0 = xor %r11_0, -1
421c: store_word %r11_0, MC1_DRAM_DATA
4220: store_word_0_100 %r10_0, MC0_DRAM_DATA
4224: store_word_0_100 %r10_0, MC0_DRAM_DATA
4228: store_word_0_100 %r10_0, MC0_DRAM_DATA
422c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4230: %r10_0 = xor %r10_0, -1
4234: store_word_0_100 %r10_0, MC0_DRAM_DATA
4238: store_word_0_100 %r10_0, MC0_DRAM_DATA
423c: %r10_0 = xor %r10_0, -1
4240: store_word_0_100 %r10_0, MC0_DRAM_DATA
4244: store_word_0_100 %r10_0, MC0_DRAM_DATA
4248: %r10_0 = xor %r10_0, -1
424c: %r10_0 = 0x0f2c0000
4254: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
425c: %r10_0 = or %r11_0, %r11_1
4260: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4268: %r10_0 = or %r11_0, %r11_1
426c: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4274: %r10_0 = or %r11_0, %r11_1
4278: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4280: %r10_0 = or %r11_0, %r11_1
4284: store_word_0_100 %r11_0, MC0_DRAM_CMD
4288: %r10_0 = and %r11_0, 0x0003e000
4290: %r10_0 = xor %r11_0, 0x00008000
4298: %r10_0 = or %r11_0, 0x012c0000
42a0: store_word_0_100 %r11_0, MC0_DRAM_CMD
42a4: %r10_0 = xor %r11_0, 0x00008000
42ac: %r10_0 = and %r11_0, 0x0003e000
42b4: %r10_0 = or %r11_0, 0x01b00000
42bc: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
42c4: %r10_0 = or %r11_0, %r11_1
42c8: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
42d0: %r10_0 = or %r11_0, %r11_1
42d4: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
42dc: %r10_0 = or %r11_0, %r11_1
42e0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
42e8: %r10_0 = or %r11_0, %r11_1
42ec: store_word_0_100 %r11_0, MC0_DRAM_CMD
42f0: %r10_0 = or %r11_0, 0x02000000
42f8: store_word_0_100 %r11_0, MC0_DRAM_CMD
42fc: %r10_0 = and %r11_0, 0x0003e000
4304: %r10_0 = xor %r11_0, 0x00010000
430c: %r10_0 = or %r11_0, 0x1f2c0000
4314: store_word_0_100 %r11_0, MC0_DRAM_CMD
4318: %r10_0 = xor %r11_0, 0x00010000
4320: %r10_0 = and %r11_0, 0x0003e000
4328: %r10_0 = or %r11_0, 0x1f280000
4330: store_word_0_100 %r11_0, MC0_DRAM_CMD
4334: %r10_0 = xor %r11_0, 0x00008000
433c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4340: %r10_0 = xor %r11_0, 0x00008000
4348: %r10_0 = xor %r11_0, 0x00010000
4350: store_word_0_100 %r11_0, MC0_DRAM_CMD
4354: %r10_0 = xor %r11_0, 0x00010000
435c: store_word_0_100 2, MC0_CNTL
4360: store_word_0_100 0x00001605, MC0_CNTL
4368: store_word_0_100 0x00000605, MC0_CNTL
4370: %r10_1 = add %r10_1, 0x00000020
4378: store_word_0_100 0, MC0_CNTL
437c: store_word_0_100 0, MC0_POINTER
4380: %r10_0 = 0
4384: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4388: beq %r11_1, 1 -> 0x4390 v
438c: %r10_0 = -1
4390: store_word %r11_0, MC0_DRAM_DATA
4394: %r10_0 = xor %r11_0, -1
4398: store_word %r11_0, MC1_DRAM_DATA
439c: store_word_0_100 %r10_0, MC0_DRAM_DATA
43a0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43a4: store_word_0_100 %r10_0, MC0_DRAM_DATA
43a8: store_word_0_100 %r10_0, MC0_DRAM_DATA
43ac: store_word_0_100 %r10_0, MC0_DRAM_DATA
43b0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43b4: store_word_0_100 %r10_0, MC0_DRAM_DATA
43b8: store_word_0_100 %r10_0, MC0_DRAM_DATA
43bc: %r10_0 = 0
43c0: %r11_1 = rotlw_by_25_then_and %r10_1, 1
43c4: beq %r11_1, 1 -> 0x43cc v
43c8: %r10_0 = -1
43cc: store_word %r11_0, MC0_DRAM_DATA
43d0: %r10_0 = xor %r11_0, -1
43d4: store_word %r11_0, MC1_DRAM_DATA
43d8: store_word_0_100 %r10_0, MC0_DRAM_DATA
43dc: store_word_0_100 %r10_0, MC0_DRAM_DATA
43e0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43e4: store_word_0_100 %r10_0, MC0_DRAM_DATA
43e8: %r10_0 = xor %r10_0, -1
43ec: store_word_0_100 %r10_0, MC0_DRAM_DATA
43f0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43f4: %r10_0 = xor %r10_0, -1
43f8: store_word_0_100 %r10_0, MC0_DRAM_DATA
43fc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4400: %r10_0 = xor %r10_0, -1
4404: %r10_0 = 0x0f2c0000
440c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4414: %r10_0 = or %r11_0, %r11_1
4418: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4420: %r10_0 = or %r11_0, %r11_1
4424: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
442c: %r10_0 = or %r11_0, %r11_1
4430: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4438: %r10_0 = or %r11_0, %r11_1
443c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4440: %r10_0 = and %r11_0, 0x0003e000
4448: %r10_0 = xor %r11_0, 0x00008000
4450: %r10_0 = or %r11_0, 0x012c0000
4458: store_word_0_100 %r11_0, MC0_DRAM_CMD
445c: %r10_0 = xor %r11_0, 0x00008000
4464: %r10_0 = and %r11_0, 0x0003e000
446c: %r10_0 = or %r11_0, 0x01b00000
4474: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
447c: %r10_0 = or %r11_0, %r11_1
4480: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4488: %r10_0 = or %r11_0, %r11_1
448c: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4494: %r10_0 = or %r11_0, %r11_1
4498: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
44a0: %r10_0 = or %r11_0, %r11_1
44a4: store_word_0_100 %r11_0, MC0_DRAM_CMD
44a8: %r10_0 = or %r11_0, 0x02000000
44b0: store_word_0_100 %r11_0, MC0_DRAM_CMD
44b4: %r10_0 = and %r11_0, 0x0003e000
44bc: %r10_0 = xor %r11_0, 0x00010000
44c4: %r10_0 = or %r11_0, 0x1f2c0000
44cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
44d0: %r10_0 = xor %r11_0, 0x00010000
44d8: %r10_0 = and %r11_0, 0x0003e000
44e0: %r10_0 = or %r11_0, 0x1f280000
44e8: store_word_0_100 %r11_0, MC0_DRAM_CMD
44ec: %r10_0 = xor %r11_0, 0x00008000
44f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
44f8: %r10_0 = xor %r11_0, 0x00008000
4500: %r10_0 = xor %r11_0, 0x00010000
4508: store_word_0_100 %r11_0, MC0_DRAM_CMD
450c: %r10_0 = xor %r11_0, 0x00010000
4514: store_word_0_100 2, MC0_CNTL
4518: store_word_0_100 0x00001605, MC0_CNTL
4520: store_word_0_100 0x00000605, MC0_CNTL
4528: %r10_1 = add %r10_1, 0x00000020
4530: store_word_0_100 0, MC0_CNTL
4534: store_word_0_100 0, MC0_POINTER
4538: %r10_0 = 0
453c: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4540: beq %r11_1, 1 -> 0x4548 v
4544: %r10_0 = -1
4548: store_word %r11_0, MC0_DRAM_DATA
454c: %r10_0 = xor %r11_0, -1
4550: store_word %r11_0, MC1_DRAM_DATA
4554: store_word_0_100 %r10_0, MC0_DRAM_DATA
4558: store_word_0_100 %r10_0, MC0_DRAM_DATA
455c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4560: store_word_0_100 %r10_0, MC0_DRAM_DATA
4564: store_word_0_100 %r10_0, MC0_DRAM_DATA
4568: store_word_0_100 %r10_0, MC0_DRAM_DATA
456c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4570: store_word_0_100 %r10_0, MC0_DRAM_DATA
4574: %r10_0 = 0
4578: %r11_1 = rotlw_by_25_then_and %r10_1, 1
457c: beq %r11_1, 1 -> 0x4584 v
4580: %r10_0 = -1
4584: store_word %r11_0, MC0_DRAM_DATA
4588: %r10_0 = xor %r11_0, -1
458c: store_word %r11_0, MC1_DRAM_DATA
4590: store_word_0_100 %r10_0, MC0_DRAM_DATA
4594: store_word_0_100 %r10_0, MC0_DRAM_DATA
4598: %r10_0 = xor %r10_0, -1
459c: store_word_0_100 %r10_0, MC0_DRAM_DATA
45a0: store_word_0_100 %r10_0, MC0_DRAM_DATA
45a4: %r10_0 = xor %r10_0, -1
45a8: store_word_0_100 %r10_0, MC0_DRAM_DATA
45ac: store_word_0_100 %r10_0, MC0_DRAM_DATA
45b0: %r10_0 = xor %r10_0, -1
45b4: store_word_0_100 %r10_0, MC0_DRAM_DATA
45b8: store_word_0_100 %r10_0, MC0_DRAM_DATA
45bc: %r10_0 = 0x0f2c0000
45c4: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
45cc: %r10_0 = or %r11_0, %r11_1
45d0: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
45d8: %r10_0 = or %r11_0, %r11_1
45dc: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
45e4: %r10_0 = or %r11_0, %r11_1
45e8: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
45f0: %r10_0 = or %r11_0, %r11_1
45f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
45f8: %r10_0 = and %r11_0, 0x0003e000
4600: %r10_0 = xor %r11_0, 0x00008000
4608: %r10_0 = or %r11_0, 0x012c0000
4610: store_word_0_100 %r11_0, MC0_DRAM_CMD
4614: %r10_0 = xor %r11_0, 0x00008000
461c: %r10_0 = and %r11_0, 0x0003e000
4624: %r10_0 = or %r11_0, 0x01b00000
462c: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
4634: %r10_0 = or %r11_0, %r11_1
4638: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4640: %r10_0 = or %r11_0, %r11_1
4644: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
464c: %r10_0 = or %r11_0, %r11_1
4650: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4658: %r10_0 = or %r11_0, %r11_1
465c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4660: %r10_0 = or %r11_0, 0x02000000
4668: store_word_0_100 %r11_0, MC0_DRAM_CMD
466c: %r10_0 = and %r11_0, 0x0003e000
4674: %r10_0 = xor %r11_0, 0x00010000
467c: %r10_0 = or %r11_0, 0x1f2c0000
4684: store_word_0_100 %r11_0, MC0_DRAM_CMD
4688: %r10_0 = xor %r11_0, 0x00010000
4690: %r10_0 = and %r11_0, 0x0003e000
4698: %r10_0 = or %r11_0, 0x1f280000
46a0: store_word_0_100 %r11_0, MC0_DRAM_CMD
46a4: %r10_0 = xor %r11_0, 0x00008000
46ac: store_word_0_100 %r11_0, MC0_DRAM_CMD
46b0: %r10_0 = xor %r11_0, 0x00008000
46b8: %r10_0 = xor %r11_0, 0x00010000
46c0: store_word_0_100 %r11_0, MC0_DRAM_CMD
46c4: %r10_0 = xor %r11_0, 0x00010000
46cc: store_word_0_100 2, MC0_CNTL
46d0: store_word_0_100 0x00001605, MC0_CNTL
46d8: store_word_0_100 0x00000605, MC0_CNTL
46e0: %r10_1 = add %r10_1, 0x00000020
46e8: store_word_0_100 0, MC0_CNTL
46ec: store_word_0_100 0, MC0_POINTER
46f0: %r10_0 = 0
46f4: %r11_1 = rotlw_by_25_then_and %r10_1, 1
46f8: beq %r11_1, 1 -> 0x4700 v
46fc: %r10_0 = -1
4700: store_word %r11_0, MC0_DRAM_DATA
4704: %r10_0 = xor %r11_0, -1
4708: store_word %r11_0, MC1_DRAM_DATA
470c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4710: store_word_0_100 %r10_0, MC0_DRAM_DATA
4714: store_word_0_100 %r10_0, MC0_DRAM_DATA
4718: store_word_0_100 %r10_0, MC0_DRAM_DATA
471c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4720: store_word_0_100 %r10_0, MC0_DRAM_DATA
4724: store_word_0_100 %r10_0, MC0_DRAM_DATA
4728: store_word_0_100 %r10_0, MC0_DRAM_DATA
472c: %r10_0 = 0
4730: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4734: beq %r11_1, 1 -> 0x473c v
4738: %r10_0 = -1
473c: store_word %r11_0, MC0_DRAM_DATA
4740: %r10_0 = xor %r11_0, -1
4744: store_word %r11_0, MC1_DRAM_DATA
4748: store_word_0_100 %r10_0, MC0_DRAM_DATA
474c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4750: %r10_0 = xor %r10_0, -1
4754: store_word_0_100 %r10_0, MC0_DRAM_DATA
4758: store_word_0_100 %r10_0, MC0_DRAM_DATA
475c: %r10_0 = xor %r10_0, -1
4760: store_word_0_100 %r10_0, MC0_DRAM_DATA
4764: store_word_0_100 %r10_0, MC0_DRAM_DATA
4768: %r10_0 = xor %r10_0, -1
476c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4770: store_word_0_100 %r10_0, MC0_DRAM_DATA
4774: %r10_0 = 0x0f2c0000
477c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4784: %r10_0 = or %r11_0, %r11_1
4788: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4790: %r10_0 = or %r11_0, %r11_1
4794: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
479c: %r10_0 = or %r11_0, %r11_1
47a0: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
47a8: %r10_0 = or %r11_0, %r11_1
47ac: store_word_0_100 %r11_0, MC0_DRAM_CMD
47b0: %r10_0 = and %r11_0, 0x0003e000
47b8: %r10_0 = xor %r11_0, 0x00008000
47c0: %r10_0 = or %r11_0, 0x012c0000
47c8: store_word_0_100 %r11_0, MC0_DRAM_CMD
47cc: %r10_0 = xor %r11_0, 0x00008000
47d4: %r10_0 = and %r11_0, 0x0003e000
47dc: %r10_0 = or %r11_0, 0x01b00000
47e4: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
47ec: %r10_0 = or %r11_0, %r11_1
47f0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
47f8: %r10_0 = or %r11_0, %r11_1
47fc: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4804: %r10_0 = or %r11_0, %r11_1
4808: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4810: %r10_0 = or %r11_0, %r11_1
4814: store_word_0_100 %r11_0, MC0_DRAM_CMD
4818: %r10_0 = or %r11_0, 0x02000000
4820: store_word_0_100 %r11_0, MC0_DRAM_CMD
4824: %r10_0 = and %r11_0, 0x0003e000
482c: %r10_0 = xor %r11_0, 0x00010000
4834: %r10_0 = or %r11_0, 0x1f2c0000
483c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4840: %r10_0 = xor %r11_0, 0x00010000
4848: %r10_0 = and %r11_0, 0x0003e000
4850: %r10_0 = or %r11_0, 0x1f280000
4858: store_word_0_100 %r11_0, MC0_DRAM_CMD
485c: %r10_0 = xor %r11_0, 0x00008000
4864: store_word_0_100 %r11_0, MC0_DRAM_CMD
4868: %r10_0 = xor %r11_0, 0x00008000
4870: %r10_0 = xor %r11_0, 0x00010000
4878: store_word_0_100 %r11_0, MC0_DRAM_CMD
487c: %r10_0 = xor %r11_0, 0x00010000
4884: store_word_0_100 2, MC0_CNTL
4888: store_word_0_100 0x00001605, MC0_CNTL
4890: store_word_0_100 0x00000605, MC0_CNTL
4898: %r10_1 = add %r10_1, 0x00000020
48a0: store_word_0_100 0, MC0_CNTL
48a4: store_word_0_100 0, MC0_POINTER
48a8: %r10_0 = 0
48ac: %r11_1 = rotlw_by_25_then_and %r10_1, 1
48b0: beq %r11_1, 1 -> 0x48b8 v
48b4: %r10_0 = -1
48b8: store_word %r11_0, MC0_DRAM_DATA
48bc: %r10_0 = xor %r11_0, -1
48c0: store_word %r11_0, MC1_DRAM_DATA
48c4: store_word_0_100 %r10_0, MC0_DRAM_DATA
48c8: store_word_0_100 %r10_0, MC0_DRAM_DATA
48cc: store_word_0_100 %r10_0, MC0_DRAM_DATA
48d0: store_word_0_100 %r10_0, MC0_DRAM_DATA
48d4: store_word_0_100 %r10_0, MC0_DRAM_DATA
48d8: store_word_0_100 %r10_0, MC0_DRAM_DATA
48dc: store_word_0_100 %r10_0, MC0_DRAM_DATA
48e0: store_word_0_100 %r10_0, MC0_DRAM_DATA
48e4: %r10_0 = 0
48e8: %r11_1 = rotlw_by_25_then_and %r10_1, 1
48ec: beq %r11_1, 1 -> 0x48f4 v
48f0: %r10_0 = -1
48f4: store_word %r11_0, MC0_DRAM_DATA
48f8: %r10_0 = xor %r11_0, -1
48fc: store_word %r11_0, MC1_DRAM_DATA
4900: store_word_0_100 %r10_0, MC0_DRAM_DATA
4904: store_word_0_100 %r10_0, MC0_DRAM_DATA
4908: store_word_0_100 %r10_0, MC0_DRAM_DATA
490c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4910: %r10_0 = xor %r10_0, -1
4914: store_word_0_100 %r10_0, MC0_DRAM_DATA
4918: store_word_0_100 %r10_0, MC0_DRAM_DATA
491c: %r10_0 = xor %r10_0, -1
4920: store_word_0_100 %r10_0, MC0_DRAM_DATA
4924: store_word_0_100 %r10_0, MC0_DRAM_DATA
4928: %r10_0 = xor %r10_0, -1
492c: %r10_0 = 0x0f2c0000
4934: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
493c: %r10_0 = or %r11_0, %r11_1
4940: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4948: %r10_0 = or %r11_0, %r11_1
494c: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4954: %r10_0 = or %r11_0, %r11_1
4958: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4960: %r10_0 = or %r11_0, %r11_1
4964: store_word_0_100 %r11_0, MC0_DRAM_CMD
4968: %r10_0 = and %r11_0, 0x0003e000
4970: %r10_0 = xor %r11_0, 0x00008000
4978: %r10_0 = or %r11_0, 0x012c0000
4980: store_word_0_100 %r11_0, MC0_DRAM_CMD
4984: %r10_0 = xor %r11_0, 0x00008000
498c: %r10_0 = and %r11_0, 0x0003e000
4994: %r10_0 = or %r11_0, 0x01b00000
499c: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
49a4: %r10_0 = or %r11_0, %r11_1
49a8: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
49b0: %r10_0 = or %r11_0, %r11_1
49b4: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
49bc: %r10_0 = or %r11_0, %r11_1
49c0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
49c8: %r10_0 = or %r11_0, %r11_1
49cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
49d0: %r10_0 = or %r11_0, 0x02000000
49d8: store_word_0_100 %r11_0, MC0_DRAM_CMD
49dc: %r10_0 = and %r11_0, 0x0003e000
49e4: %r10_0 = xor %r11_0, 0x00010000
49ec: %r10_0 = or %r11_0, 0x1f2c0000
49f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
49f8: %r10_0 = xor %r11_0, 0x00010000
4a00: %r10_0 = and %r11_0, 0x0003e000
4a08: %r10_0 = or %r11_0, 0x1f280000
4a10: store_word_0_100 %r11_0, MC0_DRAM_CMD
4a14: %r10_0 = xor %r11_0, 0x00008000
4a1c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4a20: %r10_0 = xor %r11_0, 0x00008000
4a28: %r10_0 = xor %r11_0, 0x00010000
4a30: store_word_0_100 %r11_0, MC0_DRAM_CMD
4a34: %r10_0 = xor %r11_0, 0x00010000
4a3c: store_word_0_100 2, MC0_CNTL
4a40: store_word_0_100 0x00001605, MC0_CNTL
4a48: store_word_0_100 0x00000605, MC0_CNTL
4a50: %r10_1 = add %r10_1, 0x00000020
4a58: store_word_0_100 0, MC0_CNTL
4a5c: store_word_0_100 0, MC0_POINTER
4a60: %r10_0 = 0
4a64: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4a68: beq %r11_1, 1 -> 0x4a70 v
4a6c: %r10_0 = -1
4a70: store_word %r11_0, MC0_DRAM_DATA
4a74: %r10_0 = xor %r11_0, -1
4a78: store_word %r11_0, MC1_DRAM_DATA
4a7c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a80: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a84: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a88: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a8c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a90: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a94: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a98: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a9c: %r10_0 = 0
4aa0: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4aa4: beq %r11_1, 1 -> 0x4aac v
4aa8: %r10_0 = -1
4aac: store_word %r11_0, MC0_DRAM_DATA
4ab0: %r10_0 = xor %r11_0, -1
4ab4: store_word %r11_0, MC1_DRAM_DATA
4ab8: store_word_0_100 %r10_0, MC0_DRAM_DATA
4abc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ac0: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ac4: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ac8: %r10_0 = xor %r10_0, -1
4acc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ad0: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ad4: %r10_0 = xor %r10_0, -1
4ad8: store_word_0_100 %r10_0, MC0_DRAM_DATA
4adc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ae0: %r10_0 = xor %r10_0, -1
4ae4: %r10_0 = 0x0f2c0000
4aec: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4af4: %r10_0 = or %r11_0, %r11_1
4af8: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4b00: %r10_0 = or %r11_0, %r11_1
4b04: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4b0c: %r10_0 = or %r11_0, %r11_1
4b10: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4b18: %r10_0 = or %r11_0, %r11_1
4b1c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b20: %r10_0 = and %r11_0, 0x0003e000
4b28: %r10_0 = xor %r11_0, 0x00008000
4b30: %r10_0 = or %r11_0, 0x012c0000
4b38: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b3c: %r10_0 = xor %r11_0, 0x00008000
4b44: %r10_0 = and %r11_0, 0x0003e000
4b4c: %r10_0 = or %r11_0, 0x01b00000
4b54: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
4b5c: %r10_0 = or %r11_0, %r11_1
4b60: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4b68: %r10_0 = or %r11_0, %r11_1
4b6c: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4b74: %r10_0 = or %r11_0, %r11_1
4b78: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4b80: %r10_0 = or %r11_0, %r11_1
4b84: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b88: %r10_0 = or %r11_0, 0x02000000
4b90: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b94: %r10_0 = and %r11_0, 0x0003e000
4b9c: %r10_0 = xor %r11_0, 0x00010000
4ba4: %r10_0 = or %r11_0, 0x1f2c0000
4bac: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bb0: %r10_0 = xor %r11_0, 0x00010000
4bb8: %r10_0 = and %r11_0, 0x0003e000
4bc0: %r10_0 = or %r11_0, 0x1f280000
4bc8: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bcc: %r10_0 = xor %r11_0, 0x00008000
4bd4: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bd8: %r10_0 = xor %r11_0, 0x00008000
4be0: %r10_0 = xor %r11_0, 0x00010000
4be8: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bec: %r10_0 = xor %r11_0, 0x00010000
4bf4: store_word_0_100 2, MC0_CNTL
4bf8: store_word_0_100 0x00001605, MC0_CNTL
4c00: store_word_0_100 0x00000605, MC0_CNTL
4c08: %r10_1 = add %r10_1, 0x00000020
4c10: return
4c14: %r10_1 = 0x00001800
4c1c: %r10_0 = 0x01800180
4c24: call 0x3e50
4c28: %r10_0 = 0x02400240
4c30: call 0x3e50
4c34: %r10_0 = 0x04200420
4c3c: call 0x3e50
4c40: %r10_0 = 0x08100810
4c48: call 0x3e50
4c4c: %r10_0 = 0x10081008
4c54: call 0x3e50
4c58: %r10_0 = 0x20042004
4c60: call 0x3e50
4c64: %r10_0 = 0x40024002
4c6c: call 0x3e50
4c70: %r10_0 = 0x80018001
4c78: call 0x3e50
4c7c: return
4c80: %r10_0 = load_word -4
4c84: %r11_1 = xor %r11_1, %r10_0
4c88: %r12_1 = or %r12_1, %r11_1
4c8c: %r10_1 = add %r10_1, 0x00000008
4c94: %r10_0 = xor %r10_0, -1
4c98: %r10_0 = load_word -4
4c9c: %r11_1 = xor %r11_1, %r10_0
4ca0: %r12_1 = or %r12_1, %r11_1
4ca4: %r10_1 = add %r10_1, 0x00000008
4cac: %r10_0 = xor %r10_0, -1
4cb0: %r10_0 = load_word -4
4cb4: %r11_1 = xor %r11_1, %r10_0
4cb8: %r12_1 = or %r12_1, %r11_1
4cbc: %r10_1 = add %r10_1, 0x00000008
4cc4: %r10_0 = xor %r10_0, -1
4cc8: %r10_0 = load_word -4
4ccc: %r11_1 = xor %r11_1, %r10_0
4cd0: %r12_1 = or %r12_1, %r11_1
4cd4: %r10_1 = add %r10_1, 0x00000008
4cdc: %r10_0 = load_word -4
4ce0: %r11_1 = xor %r11_1, %r10_0
4ce4: %r12_1 = or %r12_1, %r11_1
4ce8: %r10_1 = add %r10_1, 0x00000008
4cf0: %r10_0 = xor %r10_0, -1
4cf4: %r10_0 = load_word -4
4cf8: %r11_1 = xor %r11_1, %r10_0
4cfc: %r12_1 = or %r12_1, %r11_1
4d00: %r10_1 = add %r10_1, 0x00000008
4d08: %r10_0 = xor %r10_0, -1
4d0c: %r10_0 = load_word -4
4d10: %r11_1 = xor %r11_1, %r10_0
4d14: %r12_1 = or %r12_1, %r11_1
4d18: %r10_1 = add %r10_1, 0x00000008
4d20: %r10_0 = xor %r10_0, -1
4d24: %r10_0 = load_word -4
4d28: %r11_1 = xor %r11_1, %r10_0
4d2c: %r12_1 = or %r12_1, %r11_1
4d30: %r10_1 = add %r10_1, 0x00000008
4d38: %r10_1 = add %r10_1, 0x000000c0
4d40: return
4d44: %r12_1 = 0
4d48: store_word_0_100 0x00001605, MC0_CNTL
4d50: store_word_0_100 0x00000605, MC0_CNTL
4d58: %r10_0 = 0x01800180
4d60: call 0x4c80
4d64: %r10_0 = 0x02400240
4d6c: call 0x4c80
4d70: %r10_0 = 0x04200420
4d78: call 0x4c80
4d7c: %r10_0 = 0x08100810
4d84: call 0x4c80
4d88: %r10_0 = 0x10081008
4d90: call 0x4c80
4d94: %r10_0 = 0x20042004
4d9c: call 0x4c80
4da0: %r10_0 = 0x40024002
4da8: call 0x4c80
4dac: %r10_0 = 0x80018001
4db4: call 0x4c80
4db8: %r12_0 = %r12_1
4dbc: %r12_1 = 0
4dc0: store_word %r10_0, 0xe40015e0
4dc4: %r10_0 = *(0xe40015e8)
4dc8: %r10_0 = rotlw_by_30_then_and %r10_0, 1
4dcc: branch_cond0 %r10_0, 1 -> 0x4dd8 v
4dd0: %r10_0 = *(0xe40015e0)
4dd4: jmp 0x4e74 v
4dd8: %r10_0 = *(0xe40015e0)
4ddc: %r10_0 = load_word -4
4de0: %r11_1 = rotlw_by_31_then_and %r11_1, 0x7fffffff
4de8: %r10_1 = add %r10_1, %r11_1
4dec: %r10_1 = subf %r10_1, 0x00000800
4df4: store_word_0_100 0x00001605, MC0_CNTL
4dfc: store_word_0_100 0x00000605, MC0_CNTL
4e04: %r10_0 = 0x01800180
4e0c: call 0x4c80
4e10: %r10_0 = 0x02400240
4e18: call 0x4c80
4e1c: %r10_0 = 0x04200420
4e24: call 0x4c80
4e28: %r10_0 = 0x08100810
4e30: call 0x4c80
4e34: %r10_0 = 0x10081008
4e3c: call 0x4c80
4e40: %r10_0 = 0x20042004
4e48: call 0x4c80
4e4c: %r10_0 = 0x40024002
4e54: call 0x4c80
4e58: %r10_0 = 0x80018001
4e60: call 0x4c80
4e64: %r10_0 = load_word -4
4e68: %r11_1 = rotlw_by_31_then_and %r11_1, 0x7fffffff
4e70: %r10_1 = subf %r10_1, %r11_1
4e74: return
4e78: %r10_0 = xor %r10_0, -1
4e7c: %r10_0 = load_word -1
4e80: %r12_0 = xor %r13_0, %r10_0
4e84: %r12_1 = or %r12_1, %r13_0
4e88: %r12_0 = xor %r13_0, -1
4e8c: %r12_0 = or %r12_0, %r13_0
4e90: %r10_1 = add %r10_1, 0x00000008
4e98: %r10_0 = xor %r10_0, -1
4e9c: %r10_0 = load_word -1
4ea0: %r12_0 = xor %r13_0, %r10_0
4ea4: %r12_1 = or %r12_1, %r13_0
4ea8: %r12_0 = xor %r13_0, -1
4eac: %r12_0 = or %r12_0, %r13_0
4eb0: %r10_1 = add %r10_1, 0x00000008
4eb8: %r10_0 = xor %r10_0, -1
4ebc: %r10_1 = add %r10_1, 0x00000010
4ec4: %r10_0 = xor %r10_0, -1
4ec8: %r10_0 = load_word -1
4ecc: %r12_0 = xor %r13_0, %r10_0
4ed0: %r12_1 = or %r12_1, %r13_0
4ed4: %r12_0 = xor %r13_0, -1
4ed8: %r12_0 = or %r12_0, %r13_0
4edc: %r10_1 = add %r10_1, 0x00000008
4ee4: %r10_0 = xor %r10_0, -1
4ee8: %r10_0 = load_word -1
4eec: %r12_0 = xor %r13_0, %r10_0
4ef0: %r12_1 = or %r12_1, %r13_0
4ef4: %r12_0 = xor %r13_0, -1
4ef8: %r12_0 = or %r12_0, %r13_0
4efc: %r10_1 = add %r10_1, 0x00000008
4f04: %r10_0 = xor %r10_0, -1
4f08: %r10_1 = add %r10_1, 0x00000010
4f10: %r10_1 = add %r10_1, 0x000000c0
4f18: return
4f1c: %r12_0 = 0
4f20: %r12_1 = 0
4f24: %r10_0 = 0x01800180
4f2c: call 0x4e78
4f30: %r10_0 = 0x02400240
4f38: call 0x4e78
4f3c: %r10_0 = 0x04200420
4f44: call 0x4e78
4f48: %r10_0 = 0x08100810
4f50: call 0x4e78
4f54: %r10_0 = 0x10081008
4f5c: call 0x4e78
4f60: %r10_0 = 0x20042004
4f68: call 0x4e78
4f6c: %r10_0 = 0x40024002
4f74: call 0x4e78
4f78: %r10_0 = 0x80018001
4f80: call 0x4e78
4f84: %r10_0 = or %r11_0, %r12_0
4f88: %r11_1 = or %r11_1, %r12_1
4f8c: return
4f90: %r10_0 = xor %r10_0, -1
4f94: %r10_0 = load_word -1
4f98: %r12_0 = xor %r13_0, %r10_0
4f9c: %r12_1 = or %r12_1, %r13_0
4fa0: %r12_0 = xor %r13_0, -1
4fa4: %r12_0 = or %r12_0, %r13_0
4fa8: %r10_1 = add %r10_1, 0x00000008
4fb0: %r10_0 = xor %r10_0, -1
4fb4: %r10_0 = load_word -1
4fb8: %r12_0 = xor %r13_0, %r10_0
4fbc: %r12_1 = or %r12_1, %r13_0
4fc0: %r12_0 = xor %r13_0, -1
4fc4: %r12_0 = or %r12_0, %r13_0
4fc8: %r10_1 = add %r10_1, 0x00000008
4fd0: %r10_0 = xor %r10_0, -1
4fd4: %r10_1 = add %r10_1, 0x00000010
4fdc: %r10_0 = xor %r10_0, -1
4fe0: %r10_0 = load_word -1
4fe4: %r12_0 = xor %r13_0, %r10_0
4fe8: %r12_1 = or %r12_1, %r13_0
4fec: %r12_0 = xor %r13_0, -1
4ff0: %r12_0 = or %r12_0, %r13_0
4ff4: %r10_1 = add %r10_1, 0x00000008
4ffc: %r10_0 = xor %r10_0, -1
5000: %r10_0 = load_word -1
5004: %r12_0 = xor %r13_0, %r10_0
5008: %r12_1 = or %r12_1, %r13_0
500c: %r12_0 = xor %r13_0, -1
5010: %r12_0 = or %r12_0, %r13_0
5014: %r10_1 = add %r10_1, 0x00000008
501c: %r10_0 = xor %r10_0, -1
5020: %r10_1 = add %r10_1, 0x00000010
5028: %r10_1 = add %r10_1, 0x00000008
5030: %r10_0 = xor %r10_0, -1
5034: %r10_0 = load_word -1
5038: %r12_0 = xor %r13_0, %r10_0
503c: %r12_1 = or %r12_1, %r13_0
5040: %r12_0 = xor %r13_0, -1
5044: %r12_0 = or %r12_0, %r13_0
5048: %r10_1 = add %r10_1, 0x00000008
5050: %r10_0 = xor %r10_0, -1
5054: %r10_0 = load_word -1
5058: %r12_0 = xor %r13_0, %r10_0
505c: %r12_1 = or %r12_1, %r13_0
5060: %r12_0 = xor %r13_0, -1
5064: %r12_0 = or %r12_0, %r13_0
5068: %r10_1 = add %r10_1, 0x00000008
5070: %r10_0 = xor %r10_0, -1
5074: %r10_1 = add %r10_1, 0x00000010
507c: %r10_0 = xor %r10_0, -1
5080: %r10_0 = load_word -1
5084: %r12_0 = xor %r13_0, %r10_0
5088: %r12_1 = or %r12_1, %r13_0
508c: %r12_0 = xor %r13_0, -1
5090: %r12_0 = or %r12_0, %r13_0
5094: %r10_1 = add %r10_1, 0x00000008
509c: %r10_0 = xor %r10_0, -1
50a0: %r10_0 = load_word -1
50a4: %r12_0 = xor %r13_0, %r10_0
50a8: %r12_1 = or %r12_1, %r13_0
50ac: %r12_0 = xor %r13_0, -1
50b0: %r12_0 = or %r12_0, %r13_0
50b4: %r10_1 = add %r10_1, 0x00000008
50bc: %r10_0 = xor %r10_0, -1
50c0: %r10_1 = add %r10_1, 0x00000010
50c8: %r10_1 = add %r10_1, 0x00000078
50d0: return
50d4: store_word %r12_0, 0xe400001c
50d8: %r12_0 = 0
50dc: %r12_1 = 0
50e0: %r10_0 = 0x01800180
50e8: call 0x4f90
50ec: %r10_0 = 0x02400240
50f4: call 0x4f90
50f8: %r10_0 = 0x04200420
5100: call 0x4f90
5104: %r10_0 = 0x08100810
510c: call 0x4f90
5110: %r10_0 = 0x10081008
5118: call 0x4f90
511c: %r10_0 = 0x20042004
5124: call 0x4f90
5128: %r10_0 = 0x40024002
5130: call 0x4f90
5134: %r10_0 = 0x80018001
513c: call 0x4f90
5140: %r10_0 = or %r11_0, %r12_0
5144: %r11_1 = or %r11_1, %r12_1
5148: return
514c: %r10_0 = and %r11_1, 0x000000ff
5154: branch_cond0 %r10_0, 0 -> 0x516c v
5158: %r12_0 = *(0xe400001c)
515c: %r10_0 = and %r10_0, 0x000000ff
5164: %r12_0 = add %r12_0, %r10_0
5168: %r12_0 = add %r13_0, 1
516c: %r10_0 = and %r11_1, 0x0000ff00
5174: branch_cond0 %r10_0, 0 -> 0x5190 v
5178: %r12_0 = *(0xe400001c)
517c: %r10_0 = rotlw_by_8_then_and %r10_0, 0x00ff0000
5184: %r12_0 = add %r12_0, %r10_0
5188: %r12_0 = add %r13_0, 0x00000100
5190: %r10_0 = and %r11_1, 0x00ff0000
5198: branch_cond0 %r10_0, 0 -> 0x51b4 v
519c: %r12_0 = *(0xe400001c)
51a0: %r10_0 = rotlw_by_16_then_and %r10_0, 0x000000ff
51a8: %r12_1 = add %r12_1, %r10_0
51ac: %r12_0 = add %r13_0, 0x00010000
51b4: %r10_0 = and %r11_1, 0xff000000
51bc: branch_cond0 %r10_0, 0 -> 0x51d8 v
51c0: %r12_0 = *(0xe400001c)
51c4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x00ff0000
51cc: %r12_1 = add %r12_1, %r10_0
51d0: %r12_0 = add %r13_0, 0x01000000
51d8: return
51dc: %r10_0 = and %r11_0, 0x000000ff
51e4: branch_cond0 %r10_0, 0 -> 0x5204 v
51e8: %r12_0 = *(0xe400001c)
51ec: %r10_0 = and %r10_0, 0x000000ff
51f4: %r12_0 = add %r12_0, %r10_0
51f8: %r12_0 = subf %r12_0, 0x00000050
5200: %r12_0 = add %r13_0, 1
5204: %r10_0 = and %r11_0, 0x0000ff00
520c: branch_cond0 %r10_0, 0 -> 0x5230 v
5210: %r12_0 = *(0xe400001c)
5214: %r10_0 = rotlw_by_8_then_and %r10_0, 0x00ff0000
521c: %r12_0 = add %r12_0, %r10_0
5220: %r12_0 = subf %r12_0, 0x00500000
5228: %r12_0 = add %r13_0, 0x00000100
5230: %r10_0 = and %r11_0, 0x00ff0000
5238: branch_cond0 %r10_0, 0 -> 0x525c v
523c: %r12_0 = *(0xe400001c)
5240: %r10_0 = rotlw_by_16_then_and %r10_0, 0x000000ff
5248: %r12_1 = add %r12_1, %r10_0
524c: %r12_1 = subf %r12_1, 0x00000050
5254: %r12_0 = add %r13_0, 0x00010000
525c: %r10_0 = and %r11_0, 0xff000000
5264: branch_cond0 %r10_0, 0 -> 0x5288 v
5268: %r12_0 = *(0xe400001c)
526c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x00ff0000
5274: %r12_1 = add %r12_1, %r10_0
5278: %r12_1 = subf %r12_1, 0x00500000
5280: %r12_0 = add %r13_0, 0x01000000
5288: return
528c: %r10_0 = and %r11_1, 0x000000ff
5294: branch_cond0 %r10_0, 0 -> 0x52ac v
5298: %r10_0 = *(0xe4000018)
529c: %r10_0 = and %r10_0, 0x000000ff
52a4: %r12_0 = add %r12_0, %r10_0
52a8: %r12_0 = add %r13_0, 1
52ac: %r10_0 = and %r11_1, 0x0000ff00
52b4: branch_cond0 %r10_0, 0 -> 0x52d0 v
52b8: %r10_0 = *(0xe4000018)
52bc: %r10_0 = and %r10_0, 0x00ff0000
52c4: %r12_0 = add %r12_0, %r10_0
52c8: %r12_0 = add %r13_0, 0x00000100
52d0: %r10_0 = and %r11_1, 0x00ff0000
52d8: branch_cond0 %r10_0, 0 -> 0x52f4 v
52dc: %r10_0 = *(0xe4000018)
52e0: %r10_0 = and %r10_0, 0x000000ff
52e8: %r12_1 = add %r12_1, %r10_0
52ec: %r12_0 = add %r13_0, 0x00010000
52f4: %r10_0 = and %r11_1, 0xff000000
52fc: branch_cond0 %r10_0, 0 -> 0x5318 v
5300: %r10_0 = *(0xe4000018)
5304: %r10_0 = and %r10_0, 0x00ff0000
530c: %r12_1 = add %r12_1, %r10_0
5310: %r12_0 = add %r13_0, 0x01000000
5318: return
531c: %r10_0 = and %r11_0, 0x000000ff
5324: branch_cond0 %r10_0, 0 -> 0x5344 v
5328: %r10_0 = *(0xe4000018)
532c: %r10_0 = and %r10_0, 0x000000ff
5334: %r12_0 = add %r12_0, %r10_0
5338: %r12_0 = subf %r12_0, 0x00000050
5340: %r12_0 = add %r13_0, 1
5344: %r10_0 = and %r11_0, 0x0000ff00
534c: branch_cond0 %r10_0, 0 -> 0x5370 v
5350: %r10_0 = *(0xe4000018)
5354: %r10_0 = and %r10_0, 0x00ff0000
535c: %r12_0 = add %r12_0, %r10_0
5360: %r12_0 = subf %r12_0, 0x00500000
5368: %r12_0 = add %r13_0, 0x00000100
5370: %r10_0 = and %r11_0, 0x00ff0000
5378: branch_cond0 %r10_0, 0 -> 0x539c v
537c: %r10_0 = *(0xe4000018)
5380: %r10_0 = and %r10_0, 0x000000ff
5388: %r12_1 = add %r12_1, %r10_0
538c: %r12_1 = subf %r12_1, 0x00000050
5394: %r12_0 = add %r13_0, 0x00010000
539c: %r10_0 = and %r11_0, 0xff000000
53a4: branch_cond0 %r10_0, 0 -> 0x53c8 v
53a8: %r10_0 = *(0xe4000018)
53ac: %r10_0 = and %r10_0, 0x00ff0000
53b4: %r12_1 = add %r12_1, %r10_0
53b8: %r12_1 = subf %r12_1, 0x00500000
53c0: %r12_0 = add %r13_0, 0x01000000
53c8: return
53cc: store_word %r10_0, 0xe40015e0
53d0: %r10_0 = *(0xe40015e8)
53d4: %r10_0 = rotlw_by_31_then_and %r10_0, 1
53d8: branch_cond0 %r10_0, 1 -> 0x53e4 v
53dc: %r10_0 = *(0xe40015e0)
53e0: jmp 0x53ec v
53e4: %r10_0 = *(0xe40015e0)
53e8: jmp 0x547c v
53ec: %r13_1 = 0x0000000a
53f4: jmp 0x37a0 ^
53f8: store_word %r10_0, 0xe40015e0
53fc: %r10_0 = *(0xe40015e8)
5400: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5404: branch_cond0 %r10_0, 1 -> 0x5410 v
5408: %r10_0 = *(0xe40015e0)
540c: jmp 0x5418 v
5410: %r10_0 = *(0xe40015e0)
5414: jmp 0x547c v
5418: %r13_1 = or %r13_1, 0x00000a00
5420: jmp 0x37c4 ^
5424: store_word %r10_0, 0xe40015e0
5428: %r10_0 = *(0xe40015e8)
542c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5430: branch_cond0 %r10_0, 1 -> 0x543c v
5434: %r10_0 = *(0xe40015e0)
5438: jmp 0x5444 v
543c: %r10_0 = *(0xe40015e0)
5440: jmp 0x547c v
5444: %r13_1 = or %r13_1, 0x000a0000
544c: jmp 0x37e8 ^
5450: store_word %r10_0, 0xe40015e0
5454: %r10_0 = *(0xe40015e8)
5458: %r10_0 = rotlw_by_31_then_and %r10_0, 1
545c: branch_cond0 %r10_0, 1 -> 0x5468 v
5460: %r10_0 = *(0xe40015e0)
5464: jmp 0x5470 v
5468: %r10_0 = *(0xe40015e0)
546c: jmp 0x547c v
5470: %r13_1 = or %r13_1, 0x0a000000
5478: jmp 0x380c ^
547c: op_1E %r10_0, -7
5480: op_1E 0, -7
5484: call 0x107c
5488: op_1E 0, -7
548c: op_1E 1, -7
5490: call 0x107c
5494: op_1E 1, -7
5498: op_1E 2, -7
549c: call 0x107c
54a0: op_1E 2, -7
54a4: op_1E 3, -7
54a8: call 0x107c
54ac: op_1E 3, -7
54b0: store_word 0x0012129a, 0xe4000024
54b8: call 0x100c
54bc: %r10_0 = 0x0a0a0a0a
54c4: store_word_0_100 %r10_0, MC0_RD_STR_DLY_0
54c8: store_word_0_100 %r10_0, MC0_RD_STR_DLY_1
54cc: %r10_0 = 0x0f0f0f0f
54d4: store_word_0_100 %r10_0, MC0_WR_STR_DLL_0
54d8: store_word_0_100 %r10_0, MC0_WR_STR_DLL_1
54dc: %r12_0 = *(MC1_WR_STR_DLL_1)
54e0: sync
54e4: delay -7
54e8: jmp 0x31d8 ^
54ec: store_word %r10_0, 0xe40015e0
54f0: %r10_0 = *(0xe40015e8)
54f4: %r10_0 = rotlw_by_31_then_and %r10_0, 1
54f8: branch_cond0 %r10_0, 1 -> 0x5504 v
54fc: %r10_0 = *(0xe40015e0)
5500: jmp 0x5518 v
5504: %r10_0 = *(0xe40015e0)
5508: %r10_0 = load_word -4
550c: %r11_1 = and %r11_1, 0x0000000f
5514: branch_cond0 %r11_1, 0 -> 0x55cc v
5518: %r13_1 = 0x0000000f
5520: jmp 0x3b28 ^
5524: store_word %r10_0, 0xe40015e0
5528: %r10_0 = *(0xe40015e8)
552c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5530: branch_cond0 %r10_0, 1 -> 0x553c v
5534: %r10_0 = *(0xe40015e0)
5538: jmp 0x5550 v
553c: %r10_0 = *(0xe40015e0)
5540: %r10_0 = load_word -4
5544: %r11_1 = and %r11_1, 0x0000000f
554c: branch_cond0 %r11_1, 0 -> 0x55cc v
5550: %r13_1 = or %r13_1, 0x00000f00
5558: jmp 0x3b4c ^
555c: store_word %r10_0, 0xe40015e0
5560: %r10_0 = *(0xe40015e8)
5564: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5568: branch_cond0 %r10_0, 1 -> 0x5574 v
556c: %r10_0 = *(0xe40015e0)
5570: jmp 0x5588 v
5574: %r10_0 = *(0xe40015e0)
5578: %r10_0 = load_word -4
557c: %r11_1 = and %r11_1, 0x0000000f
5584: branch_cond0 %r11_1, 0 -> 0x55cc v
5588: %r13_1 = or %r13_1, 0x000f0000
5590: jmp 0x3b70 ^
5594: store_word %r10_0, 0xe40015e0
5598: %r10_0 = *(0xe40015e8)
559c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
55a0: branch_cond0 %r10_0, 1 -> 0x55ac v
55a4: %r10_0 = *(0xe40015e0)
55a8: jmp 0x55c0 v
55ac: %r10_0 = *(0xe40015e0)
55b0: %r10_0 = load_word -4
55b4: %r11_1 = and %r11_1, 0x0000000f
55bc: branch_cond0 %r11_1, 0 -> 0x55cc v
55c0: %r13_1 = or %r13_1, 0x0f000000
55c8: jmp 0x3b94 ^
55cc: op_1E %r10_0, -7
55d0: op_1E 0, -7
55d4: call 0x107c
55d8: op_1E 0, -7
55dc: op_1E 1, -7
55e0: call 0x107c
55e4: op_1E 1, -7
55e8: op_1E 2, -7
55ec: call 0x107c
55f0: op_1E 2, -7
55f4: op_1E 3, -7
55f8: call 0x107c
55fc: op_1E 3, -7
5600: store_word 0x0013139a, 0xe4000024
5608: call 0x100c
560c: jmp 0x54bc ^
5610: store_word 0x00000515, 0xe1020008
5618: store_word 0x00000010, 0xe1060030
5620: %r10_0 = load_word -5
5628: %r10_0 = and %r11_0, 0xffffe3ff
5630: %r10_0 = or %r11_0, 0x00001000
5638: store_word %r11_0, 0xe1060034
5640: %r12_0 = load_word -5
5644: %r10_0 = or %r11_0, 0x08000000
564c: store_word %r11_0, 0xe1040024
5650: %r10_0 = 0x00356ca9
5658: %r10_0 = or %r10_0, 0x01000000
5660: store_word %r10_0, 0xe400001c
5664: %r10_0 = *(0xe40015e8)
5668: %r10_0 = rotlw_by_29_then_and %r10_0, 1
566c: %r10_0 = load_word -6
5670: %r10_1 = rotlw_by_30_then_and %r10_1, 1
5674: %r10_1 = rotlw_by_1_then_and %r10_1, -1
5678: %r10_0 = or %r10_0, %r10_1
567c: %r12_0 = load_word -6
5680: %r10_1 = rotlw_by_0_then_and %r10_1, 0x0000000f
5688: %r10_1 = rotlw_by_8_then_and %r10_1, -1
568c: %r10_0 = or %r10_0, %r10_1
5690: %r12_0 = load_word -6
5694: %r10_1 = rotlw_by_28_then_and %r10_1, 0x0000000f
569c: %r10_1 = rotlw_by_12_then_and %r10_1, -1
56a0: %r10_0 = or %r10_0, %r10_1
56a4: store_word %r10_0, 0xe4000020
56a8: return
