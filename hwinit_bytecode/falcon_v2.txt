0000: store_word 0xe0000000, 0xd0008010
0008: store_half 2, 0xd0008004
000c: %r12_0 = load_half -7
0010: sync
0014: store_word 0, 0xe0020000
001c: %r10_0 = *(0xe0020000)
0024: sync
0028: store_word 0xc0000000, 0xe0020004
0034: %r10_0 = *(0xe0020004)
003c: sync
0040: store_word 0x00000018, 0xe1020004
0048: %r12_0 = *(0xe1020004)
004c: sync
0050: store_word 0x5f076009, 0xe1010000
0058: %r10_0 = *(0xe1010010)
005c: sync
0060: store_word 0x00004000, 0xe1018020
0068: %r10_0 = *(0xe1018000)
006c: sync
0070: store_word 0xe4000000, 0xd0010010
0078: store_half 2, 0xd0010004
007c: %r12_0 = load_half -7
0080: sync
0084: %r10_1 = 0x20000000
008c: store_word %r10_1, 0xe4000284
0090: %r12_0 = *(0xe4000284)
0094: sync
0098: store_word 0, 0xe4000200
009c: store_word %r10_1, 0xe4000210
00a0: store_word %r10_1, 0xe4000244
00a4: store_word_0_100 0, MC0_CNTL
00a8: store_word 0, 0xe40002a4
00ac: %r12_0 = *(0xe40002a4)
00b0: sync
00b4: store_word 0x00020100, 0xd0000018
00bc: store_word 0xea001000, 0xd0150010
00c8: store_half 2, 0xd0150004
00d0: %r10_0 = load_half -7
00d8: sync
00dc: store_word 0x000001e6, 0xea00101c
00e4: %r10_0 = *(0xea00101c)
00ec: sync
00f0: call 0x0c2c
00f4: call 0x0c30
00f8: store_word %r10_0, 0xe40015e0
00fc: %r10_0 = *(0xe40015e8)
0100: %r10_0 = and %r10_0, -2
0104: %r10_0 = or %r10_0, 1
0108: store_word %r10_0, 0xe40015e8
010c: %r10_0 = *(0xe40015e0)
0110: store_word %r10_0, 0xe40015e0
0114: %r10_0 = *(0xe40015e8)
0118: %r10_0 = and %r10_0, -3
011c: %r10_0 = or %r10_0, 0
0120: store_word %r10_0, 0xe40015e8
0124: %r10_0 = *(0xe40015e0)
0128: store_word %r10_0, 0xe40015e0
012c: %r10_0 = *(0xe40015e8)
0130: %r10_0 = and %r10_0, -2
0134: %r10_0 = or %r10_0, 0
0138: store_word %r10_0, 0xe40015e8
013c: %r10_0 = *(0xe40015e0)
0140: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
0148: store_word 0x00000012, SMC_FIFO_INBOX_DATA
0150: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
0158: %r10_0 = *(SMC_FIFO_OUTBOX_CTRL_STATUS)
0160: %r10_1 = and %r10_0, 4
0164: beq %r10_1, 0 -> 0x0158 ^
0168: store_word 4, SMC_FIFO_OUTBOX_CTRL_STATUS
0170: %r10_0 = *(SMC_FIFO_OUTBOX_DATA)
0178: %r10_0 = *(SMC_FIFO_OUTBOX_DATA)
0180: store_word 0, SMC_FIFO_OUTBOX_CTRL_STATUS
0188: %r10_0 = and %r10_0, 0x000000ff
0190: store_word %r10_0, 0xe400002c
0194: call 0x11b8
0198: store_word 0, 0xe1020004
019c: store_half 6, 0xd0008004
01a0: %r12_0 = load_half -7
01a4: sync
01a8: delay -7
01ac: store_word 0xff60ffce, 0xe1013100
01b4: store_word 0, 0xe1013000
01b8: store_word 0, 0xe1013200
01bc: store_word 0x001d0031, 0xe1013300
01c4: store_word 0x00000030, 0xe1003100
01cc: store_word 0, 0xe1003000
01d4: store_word 0, 0xe1003200
01dc: store_word 0xe0f7fd00, 0xe1003300
01e8: return
01ec: %r10_1 = 0x001ff306
01f4: store_word %r10_0, 0xe40015e0
01f8: %r12_0 = *(0xe40015ec)
01fc: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0204: beq %r10_0, 1 -> 0x0210 v
0208: %r10_0 = *(0xe40015e0)
020c: jmp 0x021c v
0210: %r10_0 = *(0xe40015e0)
0214: %r10_1 = 0x001ff306
021c: store_word %r10_0, 0xe40015e0
0220: %r12_0 = *(0xe40015ec)
0224: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
022c: beq %r10_0, 2 -> 0x0238 v
0230: %r10_0 = *(0xe40015e0)
0234: jmp 0x0244 v
0238: %r10_0 = *(0xe40015e0)
023c: %r10_1 = 0x001bb306
0244: store_word %r10_0, 0xe40015e0
0248: %r12_0 = *(0xe40015ec)
024c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0254: beq %r10_0, 6 -> 0x0260 v
0258: %r10_0 = *(0xe40015e0)
025c: jmp 0x026c v
0260: %r10_0 = *(0xe40015e0)
0264: %r10_1 = 0x001fa306
026c: return
0270: %r10_1 = 0x06208089
0278: store_word %r10_0, 0xe40015e0
027c: %r12_0 = *(0xe40015ec)
0280: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0288: beq %r10_0, 1 -> 0x0294 v
028c: %r10_0 = *(0xe40015e0)
0290: jmp 0x02c8 v
0294: %r10_0 = *(0xe40015e0)
0298: %r10_1 = 0x06228089
02a0: store_word %r10_0, 0xe40015e0
02a4: %r12_0 = *(0xe40015ec)
02a8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
02b0: bne %r10_0, 4 -> 0x02bc v
02b4: %r10_0 = *(0xe40015e0)
02b8: jmp 0x02c8 v
02bc: %r10_0 = *(0xe40015e0)
02c0: %r10_1 = 0x06208089
02c8: store_word %r10_0, 0xe40015e0
02cc: %r12_0 = *(0xe40015ec)
02d0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
02d8: beq %r10_0, 2 -> 0x02e4 v
02dc: %r10_0 = *(0xe40015e0)
02e0: jmp 0x0318 v
02e4: %r10_0 = *(0xe40015e0)
02e8: %r10_1 = 0x0622808a
02f0: store_word %r10_0, 0xe40015e0
02f4: %r12_0 = *(0xe40015ec)
02f8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0300: bne %r10_0, 4 -> 0x030c v
0304: %r10_0 = *(0xe40015e0)
0308: jmp 0x0318 v
030c: %r10_0 = *(0xe40015e0)
0310: %r10_1 = 0x0620808a
0318: store_word %r10_0, 0xe40015e0
031c: %r12_0 = *(0xe40015ec)
0320: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0328: beq %r10_0, 6 -> 0x0334 v
032c: %r10_0 = *(0xe40015e0)
0330: jmp 0x0340 v
0334: %r10_0 = *(0xe40015e0)
0338: %r10_1 = 0x06208089
0340: store_word %r10_0, 0xe40015e0
0344: %r10_0 = *(0xe40015e8)
0348: %r10_0 = rotlw_by_29_then_and %r10_0, 1
034c: bne %r10_0, 1 -> 0x0358 v
0350: %r10_0 = *(0xe40015e0)
0354: jmp 0x037c v
0358: %r10_0 = *(0xe40015e0)
035c: store_word %r10_0, 0xe40015e0
0360: %r10_0 = *(0xe40015e8)
0364: %r10_0 = rotlw_by_30_then_and %r10_0, 1
0368: bne %r10_0, 1 -> 0x0374 v
036c: %r10_0 = *(0xe40015e0)
0370: jmp 0x037c v
0374: %r10_0 = *(0xe40015e0)
0378: %r10_1 = or %r10_1, 4
037c: return
0380: %r10_1 = 0x06208009
0388: store_word %r10_0, 0xe40015e0
038c: %r12_0 = *(0xe40015ec)
0390: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0398: beq %r10_0, 1 -> 0x03a4 v
039c: %r10_0 = *(0xe40015e0)
03a0: jmp 0x03d8 v
03a4: %r10_0 = *(0xe40015e0)
03a8: %r10_1 = 0x06228009
03b0: store_word %r10_0, 0xe40015e0
03b4: %r12_0 = *(0xe40015ec)
03b8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
03c0: bne %r10_0, 4 -> 0x03cc v
03c4: %r10_0 = *(0xe40015e0)
03c8: jmp 0x03d8 v
03cc: %r10_0 = *(0xe40015e0)
03d0: %r10_1 = 0x06208009
03d8: store_word %r10_0, 0xe40015e0
03dc: %r12_0 = *(0xe40015ec)
03e0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
03e8: beq %r10_0, 2 -> 0x03f4 v
03ec: %r10_0 = *(0xe40015e0)
03f0: jmp 0x0450 v
03f4: %r10_0 = *(0xe40015e0)
03f8: %r10_1 = 0x06208009
0400: store_word %r10_0, 0xe40015e0
0404: %r12_0 = *(0xe40015ec)
0408: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0410: bne %r10_0, 3 -> 0x041c v
0414: %r10_0 = *(0xe40015e0)
0418: jmp 0x0450 v
041c: %r10_0 = *(0xe40015e0)
0420: %r10_1 = 0x06228009
0428: store_word %r10_0, 0xe40015e0
042c: %r12_0 = *(0xe40015ec)
0430: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0438: bne %r10_0, 4 -> 0x0444 v
043c: %r10_0 = *(0xe40015e0)
0440: jmp 0x0450 v
0444: %r10_0 = *(0xe40015e0)
0448: %r10_1 = 0x0620800a
0450: store_word %r10_0, 0xe40015e0
0454: %r12_0 = *(0xe40015ec)
0458: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0460: beq %r10_0, 6 -> 0x046c v
0464: %r10_0 = *(0xe40015e0)
0468: jmp 0x0478 v
046c: %r10_0 = *(0xe40015e0)
0470: %r10_1 = 0x062080b9
0478: store_word %r10_0, 0xe40015e0
047c: %r10_0 = *(0xe40015e8)
0480: %r10_0 = rotlw_by_29_then_and %r10_0, 1
0484: bne %r10_0, 1 -> 0x0490 v
0488: %r10_0 = *(0xe40015e0)
048c: jmp 0x04b4 v
0490: %r10_0 = *(0xe40015e0)
0494: store_word %r10_0, 0xe40015e0
0498: %r10_0 = *(0xe40015e8)
049c: %r10_0 = rotlw_by_30_then_and %r10_0, 1
04a0: bne %r10_0, 1 -> 0x04ac v
04a4: %r10_0 = *(0xe40015e0)
04a8: jmp 0x04b4 v
04ac: %r10_0 = *(0xe40015e0)
04b0: %r10_1 = or %r10_1, 4
04b4: return
04b8: %r10_0 = load_word -3
04bc: %r12_1 = and %r12_0, 0x000000ff
04c4: %r12_0 = and %r12_0, 0xffffff00
04cc: %r12_1 = mul %r12_1, %r11_1
04d0: %r12_0 = and %r10_1, 0x000000ff
04d8: %r12_1 = add %r12_1, %r13_0
04dc: %r12_1 = and %r12_1, 0x000000ff
04e4: %r12_0 = and %r12_1, 0x00000080
04ec: beq %r13_0, 0 -> 0x04f4 v
04f0: %r12_1 = 0
04f4: %r12_0 = rotlw_by_0_then_and %r11_0, -1
04f8: bge %r12_1, %r13_0 -> 0x0500 v
04fc: %r12_1 = and %r13_0, -1
0500: %r12_0 = or %r12_0, %r12_1
0504: %r12_1 = and %r12_0, 0x0000ff00
050c: %r12_0 = and %r12_0, 0xffff00ff
0514: %r12_1 = mul %r12_1, %r11_1
0518: %r12_0 = and %r10_1, 0x0000ff00
0520: %r12_1 = add %r12_1, %r13_0
0524: %r12_1 = and %r12_1, 0x0000ff00
052c: %r12_0 = and %r12_1, 0x00008000
0534: beq %r13_0, 0 -> 0x053c v
0538: %r12_1 = 0
053c: %r12_0 = rotlw_by_8_then_and %r11_0, -1
0540: bge %r12_1, %r13_0 -> 0x0548 v
0544: %r12_1 = and %r13_0, -1
0548: %r12_0 = or %r12_0, %r12_1
054c: %r12_1 = and %r12_0, 0x00ff0000
0554: %r12_0 = and %r12_0, 0xff00ffff
055c: %r12_1 = mul %r12_1, %r11_1
0560: %r12_0 = and %r10_1, 0x00ff0000
0568: %r12_1 = add %r12_1, %r13_0
056c: %r12_1 = and %r12_1, 0x00ff0000
0574: %r12_0 = and %r12_1, 0x00800000
057c: beq %r13_0, 0 -> 0x0584 v
0580: %r12_1 = 0
0584: %r12_0 = rotlw_by_16_then_and %r11_0, -1
0588: bge %r12_1, %r13_0 -> 0x0590 v
058c: %r12_1 = and %r13_0, -1
0590: %r12_0 = or %r12_0, %r12_1
0594: %r12_1 = and %r12_0, 0xff000000
059c: %r12_0 = and %r12_0, 0x00ffffff
05a4: %r12_1 = mul %r12_1, %r11_1
05a8: %r12_0 = and %r10_1, 0xff000000
05b0: %r12_1 = add %r12_1, %r13_0
05b4: %r12_1 = and %r12_1, 0xff000000
05bc: %r12_0 = and %r12_1, 0x80000000
05c4: beq %r13_0, 0 -> 0x05cc v
05c8: %r12_1 = 0
05cc: %r12_0 = rotlw_by_24_then_and %r11_0, -1
05d0: bge %r12_1, %r13_0 -> 0x05d8 v
05d4: %r12_1 = and %r13_0, -1
05d8: %r12_0 = or %r12_0, %r12_1
05dc: store_word %r12_0, %r10_0
05e0: return
05e4: store_word %r10_0, 0xe40015e0
05e8: %r12_0 = *(0xe40015ec)
05ec: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
05f4: beq %r10_0, 1 -> 0x0600 v
05f8: %r10_0 = *(0xe40015e0)
05fc: jmp 0x071c v
0600: %r10_0 = *(0xe40015e0)
0604: store_word %r10_0, 0xe40015e0
0608: %r12_0 = *(0xe40015ec)
060c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0614: beq %r10_0, 1 -> 0x0620 v
0618: %r10_0 = *(0xe40015e0)
061c: jmp 0x0660 v
0620: %r10_0 = *(0xe40015e0)
0624: beq %r11_0, 0 -> 0x0634 v
0628: beq %r11_0, 1 -> 0x0640 v
062c: beq %r11_0, 2 -> 0x064c v
0630: beq %r11_0, 3 -> 0x0658 v
0634: %r11_1 = 0x001ff306
063c: jmp 0x0660 v
0640: %r11_1 = 0x001bb306
0648: jmp 0x0660 v
064c: %r11_1 = 0x001fa306
0654: jmp 0x0660 v
0658: %r11_1 = 0x0018f306
0660: store_word %r10_0, 0xe40015e0
0664: %r12_0 = *(0xe40015ec)
0668: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0670: beq %r10_0, 2 -> 0x067c v
0674: %r10_0 = *(0xe40015e0)
0678: jmp 0x06bc v
067c: %r10_0 = *(0xe40015e0)
0680: beq %r11_0, 0 -> 0x0690 v
0684: beq %r11_0, 1 -> 0x069c v
0688: beq %r11_0, 2 -> 0x06a8 v
068c: beq %r11_0, 3 -> 0x06b4 v
0690: %r11_1 = 0x001ff306
0698: jmp 0x06bc v
069c: %r11_1 = 0x001bb306
06a4: jmp 0x06bc v
06a8: %r11_1 = 0x001fa306
06b0: jmp 0x06bc v
06b4: %r11_1 = 0x0018f306
06bc: store_word %r10_0, 0xe40015e0
06c0: %r12_0 = *(0xe40015ec)
06c4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
06cc: beq %r10_0, 6 -> 0x06d8 v
06d0: %r10_0 = *(0xe40015e0)
06d4: jmp 0x0718 v
06d8: %r10_0 = *(0xe40015e0)
06dc: beq %r11_0, 0 -> 0x06ec v
06e0: beq %r11_0, 1 -> 0x06f8 v
06e4: beq %r11_0, 2 -> 0x0704 v
06e8: beq %r11_0, 3 -> 0x0710 v
06ec: %r11_1 = 0x001ff306
06f4: jmp 0x0718 v
06f8: %r11_1 = 0x001bb306
0700: jmp 0x0718 v
0704: %r11_1 = 0x001fa306
070c: jmp 0x0718 v
0710: %r11_1 = 0x0018f306
0718: jmp 0x0ab4 v
071c: store_word %r10_0, 0xe40015e0
0720: %r12_0 = *(0xe40015ec)
0724: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
072c: beq %r10_0, 2 -> 0x0738 v
0730: %r10_0 = *(0xe40015e0)
0734: jmp 0x0aa8 v
0738: %r10_0 = *(0xe40015e0)
073c: store_word %r10_0, 0xe40015e0
0740: %r12_0 = *(0xe40015ec)
0744: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
074c: beq %r10_0, 1 -> 0x0758 v
0750: %r10_0 = *(0xe40015e0)
0754: jmp 0x07b8 v
0758: %r10_0 = *(0xe40015e0)
075c: store_word %r10_0, 0xe40015e0
0760: %r12_0 = *(0xe40015ec)
0764: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
076c: beq %r10_0, 4 -> 0x0778 v
0770: %r10_0 = *(0xe40015e0)
0774: jmp 0x07b8 v
0778: %r10_0 = *(0xe40015e0)
077c: beq %r11_0, 0 -> 0x078c v
0780: beq %r11_0, 1 -> 0x0798 v
0784: beq %r11_0, 2 -> 0x07a4 v
0788: beq %r11_0, 3 -> 0x07b0 v
078c: %r11_1 = 0x000af306
0794: jmp 0x07b8 v
0798: %r11_1 = 0x0008f306
07a0: jmp 0x07b8 v
07a4: %r11_1 = 0x0006f306
07ac: jmp 0x07b8 v
07b0: %r11_1 = 0x0004f306
07b8: store_word %r10_0, 0xe40015e0
07bc: %r12_0 = *(0xe40015ec)
07c0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
07c8: beq %r10_0, 1 -> 0x07d4 v
07cc: %r10_0 = *(0xe40015e0)
07d0: jmp 0x0838 v
07d4: %r10_0 = *(0xe40015e0)
07d8: store_word %r10_0, 0xe40015e0
07dc: %r12_0 = *(0xe40015ec)
07e0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
07e8: beq %r10_0, 0x00000009 -> 0x07f8 v
07f0: %r10_0 = *(0xe40015e0)
07f4: jmp 0x0838 v
07f8: %r10_0 = *(0xe40015e0)
07fc: beq %r11_0, 0 -> 0x080c v
0800: beq %r11_0, 1 -> 0x0818 v
0804: beq %r11_0, 2 -> 0x0824 v
0808: beq %r11_0, 3 -> 0x0830 v
080c: %r11_1 = 0x000af306
0814: jmp 0x0838 v
0818: %r11_1 = 0x0008f306
0820: jmp 0x0838 v
0824: %r11_1 = 0x0006f306
082c: jmp 0x0838 v
0830: %r11_1 = 0x0004f306
0838: store_word %r10_0, 0xe40015e0
083c: %r12_0 = *(0xe40015ec)
0840: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0848: beq %r10_0, 2 -> 0x0854 v
084c: %r10_0 = *(0xe40015e0)
0850: jmp 0x08b4 v
0854: %r10_0 = *(0xe40015e0)
0858: store_word %r10_0, 0xe40015e0
085c: %r12_0 = *(0xe40015ec)
0860: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0868: beq %r10_0, 0 -> 0x0874 v
086c: %r10_0 = *(0xe40015e0)
0870: jmp 0x08b4 v
0874: %r10_0 = *(0xe40015e0)
0878: beq %r11_0, 0 -> 0x0888 v
087c: beq %r11_0, 1 -> 0x0894 v
0880: beq %r11_0, 2 -> 0x08a0 v
0884: beq %r11_0, 3 -> 0x08ac v
0888: %r11_1 = 0x005ff306
0890: jmp 0x08b4 v
0894: %r11_1 = 0x005bb306
089c: jmp 0x08b4 v
08a0: %r11_1 = 0x005fa306
08a8: jmp 0x08b4 v
08ac: %r11_1 = 0x0058f306
08b4: store_word %r10_0, 0xe40015e0
08b8: %r12_0 = *(0xe40015ec)
08bc: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
08c4: beq %r10_0, 2 -> 0x08d0 v
08c8: %r10_0 = *(0xe40015e0)
08cc: jmp 0x0930 v
08d0: %r10_0 = *(0xe40015e0)
08d4: store_word %r10_0, 0xe40015e0
08d8: %r12_0 = *(0xe40015ec)
08dc: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
08e4: beq %r10_0, 3 -> 0x08f0 v
08e8: %r10_0 = *(0xe40015e0)
08ec: jmp 0x0930 v
08f0: %r10_0 = *(0xe40015e0)
08f4: beq %r11_0, 0 -> 0x0904 v
08f8: beq %r11_0, 1 -> 0x0910 v
08fc: beq %r11_0, 2 -> 0x091c v
0900: beq %r11_0, 3 -> 0x0928 v
0904: %r11_1 = 0x005ff306
090c: jmp 0x0930 v
0910: %r11_1 = 0x005bb306
0918: jmp 0x0930 v
091c: %r11_1 = 0x005fa306
0924: jmp 0x0930 v
0928: %r11_1 = 0x005f6306
0930: store_word %r10_0, 0xe40015e0
0934: %r12_0 = *(0xe40015ec)
0938: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0940: beq %r10_0, 2 -> 0x094c v
0944: %r10_0 = *(0xe40015e0)
0948: jmp 0x09ac v
094c: %r10_0 = *(0xe40015e0)
0950: store_word %r10_0, 0xe40015e0
0954: %r12_0 = *(0xe40015ec)
0958: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0960: beq %r10_0, 4 -> 0x096c v
0964: %r10_0 = *(0xe40015e0)
0968: jmp 0x09ac v
096c: %r10_0 = *(0xe40015e0)
0970: beq %r11_0, 0 -> 0x0980 v
0974: beq %r11_0, 1 -> 0x098c v
0978: beq %r11_0, 2 -> 0x0998 v
097c: beq %r11_0, 3 -> 0x09a4 v
0980: %r11_1 = 0x005ff306
0988: jmp 0x09ac v
098c: %r11_1 = 0x005bb306
0994: jmp 0x09ac v
0998: %r11_1 = 0x005fa306
09a0: jmp 0x09ac v
09a4: %r11_1 = 0x005f6306
09ac: store_word %r10_0, 0xe40015e0
09b0: %r12_0 = *(0xe40015ec)
09b4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
09bc: beq %r10_0, 6 -> 0x09c8 v
09c0: %r10_0 = *(0xe40015e0)
09c4: jmp 0x0a28 v
09c8: %r10_0 = *(0xe40015e0)
09cc: store_word %r10_0, 0xe40015e0
09d0: %r12_0 = *(0xe40015ec)
09d4: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
09dc: beq %r10_0, 1 -> 0x09e8 v
09e0: %r10_0 = *(0xe40015e0)
09e4: jmp 0x0a28 v
09e8: %r10_0 = *(0xe40015e0)
09ec: beq %r11_0, 0 -> 0x09fc v
09f0: beq %r11_0, 1 -> 0x0a08 v
09f4: beq %r11_0, 2 -> 0x0a14 v
09f8: beq %r11_0, 3 -> 0x0a20 v
09fc: %r11_1 = 0x00faf306
0a04: jmp 0x0a28 v
0a08: %r11_1 = 0x00faf306
0a10: jmp 0x0a28 v
0a14: %r11_1 = 0x00fef306
0a1c: jmp 0x0a28 v
0a20: %r11_1 = 0x00fef306
0a28: store_word %r10_0, 0xe40015e0
0a2c: %r12_0 = *(0xe40015ec)
0a30: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0a38: beq %r10_0, 6 -> 0x0a44 v
0a3c: %r10_0 = *(0xe40015e0)
0a40: jmp 0x0aa4 v
0a44: %r10_0 = *(0xe40015e0)
0a48: store_word %r10_0, 0xe40015e0
0a4c: %r12_0 = *(0xe40015ec)
0a50: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
0a58: beq %r10_0, 2 -> 0x0a64 v
0a5c: %r10_0 = *(0xe40015e0)
0a60: jmp 0x0aa4 v
0a64: %r10_0 = *(0xe40015e0)
0a68: beq %r11_0, 0 -> 0x0a78 v
0a6c: beq %r11_0, 1 -> 0x0a84 v
0a70: beq %r11_0, 2 -> 0x0a90 v
0a74: beq %r11_0, 3 -> 0x0a9c v
0a78: %r11_1 = 0x00faf306
0a80: jmp 0x0aa4 v
0a84: %r11_1 = 0x00faf306
0a8c: jmp 0x0aa4 v
0a90: %r11_1 = 0x00fef306
0a98: jmp 0x0aa4 v
0a9c: %r11_1 = 0x00fef306
0aa4: jmp 0x0ab4 v
0aa8: delay -7
0ab0: jmp 0x0aa8 ^
0ab4: return
0ab8: %r10_0 = 0
0abc: bne %r10_0, 5 -> 0x0acc v
0ac0: store_word 0x0015159a, 0xe4000024
0ac8: jmp 0x0fb0 v
0acc: %r10_0 = add %r10_0, 1
0ad0: store_word_0_100 %r11_1, MC0_PAD_CAL_CNTL
0ad4: %r10_0 = load_word -6
0ad8: sync
0adc: delay -7
0ae0: %r10_1 = and %r11_1, -7
0ae4: store_word_0_100 %r10_1, MC0_PAD_CAL_CNTL
0ae8: %r10_0 = load_word -6
0aec: sync
0af0: delay -7
0af4: store_word 0x00000200, MC0_PAD_CAL_CNTL
0afc: %r10_0 = load_word -6
0b00: %r10_0 = rotlw_by_20_then_and %r10_1, 0x00f00000
0b08: store_word 0, MC0_PAD_CAL_CNTL
0b0c: %r10_0 = load_word -6
0b10: %r10_1 = rotlw_by_5_then_and %r10_1, 0x00000200
0b18: %r10_0 = or %r11_0, %r10_1
0b1c: %r10_0 = load_word -6
0b20: %r10_1 = xor %r10_1, 0x0000000f
0b28: %r10_1 = rotlw_by_16_then_and %r10_1, 0x000f0000
0b30: %r10_0 = or %r11_0, %r10_1
0b34: store_word 0x00000100, MC0_PAD_CAL_CNTL
0b3c: %r10_0 = load_word -6
0b40: %r10_1 = rotlw_by_4_then_and %r10_1, 0x00000100
0b48: %r10_0 = or %r11_0, %r10_1
0b4c: %r10_0 = load_word -6
0b50: %r10_1 = rotlw_by_12_then_and %r10_1, 0x0000f000
0b58: %r10_0 = or %r11_0, %r10_1
0b5c: %r10_1 = and %r11_1, 0x00fff300
0b64: bne %r10_1, %r11_0 -> 0x0abc ^
0b68: store_word 0x00000200, MC1_PAD_CAL_CNTL
0b70: %r10_0 = load_word -6
0b74: %r10_0 = rotlw_by_20_then_and %r10_1, 0x00f00000
0b7c: store_word 0, MC1_PAD_CAL_CNTL
0b80: %r10_0 = load_word -6
0b84: %r10_1 = rotlw_by_5_then_and %r10_1, 0x00000200
0b8c: %r10_0 = or %r11_0, %r10_1
0b90: %r10_0 = load_word -6
0b94: %r10_1 = xor %r10_1, 0x0000000f
0b9c: %r10_1 = rotlw_by_16_then_and %r10_1, 0x000f0000
0ba4: %r10_0 = or %r11_0, %r10_1
0ba8: store_word 0x00000100, MC1_PAD_CAL_CNTL
0bb0: %r10_0 = load_word -6
0bb4: %r10_1 = rotlw_by_4_then_and %r10_1, 0x00000100
0bbc: %r10_0 = or %r11_0, %r10_1
0bc0: %r10_0 = load_word -6
0bc4: %r10_1 = rotlw_by_12_then_and %r10_1, 0x0000f000
0bcc: %r10_0 = or %r11_0, %r10_1
0bd0: %r10_1 = and %r11_1, 0x00fff300
0bd8: bne %r10_1, %r11_0 -> 0x0abc ^
0bdc: return
0be0: %r12_0 = load_word -5
0be4: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
0bec: blt? %r11_1, %r11_0 -> 0x0bf4 v
0bf0: %r10_0 = %r11_1
0bf4: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
0bfc: blt? %r11_1, %r11_0 -> 0x0c04 v
0c00: %r10_0 = %r11_1
0c04: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
0c0c: blt? %r11_1, %r11_0 -> 0x0c14 v
0c10: %r10_0 = %r11_1
0c14: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
0c1c: blt? %r11_1, %r11_0 -> 0x0c24 v
0c20: %r10_0 = %r11_1
0c24: store_word %r11_0, 0xe4000024
0c28: return
0c2c: return
0c30: return
0c34: store_word 0x0010109a, 0xe4000024
0c3c: call 0x0fb0
0c40: jmp 0x1870 v
0c44: %r10_0 = *(SMC_FIFO_INBOX_CTRL_STATUS)
0c4c: %r10_0 = and %r10_0, 4
0c50: beq %r10_0, 0 -> 0x0c44 ^
0c54: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
0c5c: store_word %r10_1, SMC_FIFO_INBOX_DATA
0c64: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
0c6c: return
0c70: beq %r10_0, 3 -> 0x0d00 v
0c74: beq %r10_0, 2 -> 0x0cd4 v
0c78: beq %r10_0, 1 -> 0x0ca8 v
0c7c: %r10_1 = 0x000f0199
0c84: call 0x0c44
0c88: delay -7
0c90: %r10_1 = 0x00000099
0c98: call 0x0c44
0c9c: delay -7
0ca4: return
0ca8: %r10_1 = 0x00010199
0cb0: call 0x0c44
0cb4: delay -7
0cbc: %r10_1 = 0x00000099
0cc4: call 0x0c44
0cc8: delay -7
0cd0: return
0cd4: %r10_1 = 0x00030199
0cdc: call 0x0c44
0ce0: delay -7
0ce8: %r10_1 = 0x00000099
0cf0: call 0x0c44
0cf4: delay -7
0cfc: return
0d00: %r10_1 = 0x00070199
0d08: call 0x0c44
0d0c: delay -7
0d14: %r10_1 = 0x00000099
0d1c: call 0x0c44
0d20: delay -7
0d28: return
0d2c: beq %r10_0, 3 -> 0x0dbc v
0d30: beq %r10_0, 2 -> 0x0d90 v
0d34: beq %r10_0, 1 -> 0x0d64 v
0d38: %r10_1 = 0x00f00199
0d40: call 0x0c44
0d44: delay -7
0d4c: %r10_1 = 0x00000099
0d54: call 0x0c44
0d58: delay -7
0d60: return
0d64: %r10_1 = 0x00100199
0d6c: call 0x0c44
0d70: delay -7
0d78: %r10_1 = 0x00000099
0d80: call 0x0c44
0d84: delay -7
0d8c: return
0d90: %r10_1 = 0x00300199
0d98: call 0x0c44
0d9c: delay -7
0da4: %r10_1 = 0x00000099
0dac: call 0x0c44
0db0: delay -7
0db8: return
0dbc: %r10_1 = 0x00700199
0dc4: call 0x0c44
0dc8: delay -7
0dd0: %r10_1 = 0x00000099
0dd8: call 0x0c44
0ddc: delay -7
0de4: return
0de8: beq %r10_0, 3 -> 0x0e78 v
0dec: beq %r10_0, 2 -> 0x0e4c v
0df0: beq %r10_0, 1 -> 0x0e20 v
0df4: %r10_1 = 0x00ff0199
0dfc: call 0x0c44
0e00: delay -7
0e08: %r10_1 = 0x00000099
0e10: call 0x0c44
0e14: delay -7
0e1c: return
0e20: %r10_1 = 0x00110199
0e28: call 0x0c44
0e2c: delay -7
0e34: %r10_1 = 0x00000099
0e3c: call 0x0c44
0e40: delay -7
0e48: return
0e4c: %r10_1 = 0x00330199
0e54: call 0x0c44
0e58: delay -7
0e60: %r10_1 = 0x00000099
0e68: call 0x0c44
0e6c: delay -7
0e74: return
0e78: %r10_1 = 0x00770199
0e80: call 0x0c44
0e84: delay -7
0e8c: %r10_1 = 0x00000099
0e94: call 0x0c44
0e98: delay -7
0ea0: return
0ea4: %r10_1 = 1
0ea8: call 0x0c44
0eac: %r10_1 = 0x0000038c
0eb4: call 0x0c44
0eb8: delay -7
0ec0: %r11_1 = 0
0ec4: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0ec8: call 0x0de8
0ecc: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0ed0: call 0x0de8
0ed4: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0ed8: call 0x0de8
0edc: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0ee0: call 0x0de8
0ee4: delay -7
0eec: %r11_1 = 0x00000016
0ef4: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0ef8: call 0x0d2c
0efc: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0f00: call 0x0d2c
0f04: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0f08: call 0x0d2c
0f0c: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0f10: call 0x0d2c
0f14: delay -7
0f1c: %r10_1 = 0x0000018c
0f24: call 0x0c44
0f28: delay -7
0f30: return
0f34: call 0x0ea4
0f38: %r12_0 = load_word -4
0f3c: %r11_1 = rotlw_by_24_then_and %r11_1, 0x000000ff
0f44: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0f48: call 0x0c70
0f4c: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0f50: call 0x0c70
0f54: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0f58: call 0x0c70
0f5c: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0f60: call 0x0c70
0f64: delay -7
0f6c: %r12_0 = load_word -4
0f70: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0f74: call 0x0d2c
0f78: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0f7c: call 0x0d2c
0f80: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0f84: call 0x0d2c
0f88: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0f8c: call 0x0d2c
0f90: delay -7
0f98: jmp 0x0f38 ^
0f9c: call 0x0ea4
0fa0: %r10_1 = 0x00ff0199
0fa8: call 0x0c44
0fac: jmp 0x0fac ^
0fb0: store_word %r10_0, 0xe4000028
0fb4: store_word %r10_0, 0xe40015e0
0fb8: %r10_0 = *(0xe40015e8)
0fbc: %r10_0 = rotlw_by_0_then_and %r10_0, 1
0fc0: bne %r10_0, 1 -> 0x0fcc v
0fc4: %r10_0 = *(0xe40015e0)
0fc8: jmp 0x0ffc v
0fcc: %r10_0 = *(0xe40015e0)
0fd0: %r10_0 = *(SMC_FIFO_INBOX_CTRL_STATUS)
0fd8: %r10_0 = and %r10_0, 4
0fdc: beq %r10_0, 0 -> 0x0fd0 ^
0fe0: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
0fe8: %r12_0 = *(0xe4000024)
0fec: store_word %r10_0, SMC_FIFO_INBOX_DATA
0ff4: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
0ffc: %r10_0 = *(0xe4000028)
1000: return
1004: %r11_1 = rotlw_by_31_then_and %r11_1, 0x0000007f
100c: bne %r10_1, 0x00000016 -> 0x1018 v
1014: return
1018: %r11_1 = or %r11_1, 0x00000080
1020: return
1024: %r11_1 = rotlw_by_31_then_and %r11_1, 7
1028: %r10_0 = rotlw_by_0_then_and %r13_0, 0x000000ff
1030: beq %r10_0, 0 -> 0x105c v
1034: %r10_0 = rotlw_by_24_then_and %r13_0, 0x000000ff
103c: beq %r10_0, 0 -> 0x105c v
1040: %r10_0 = rotlw_by_16_then_and %r13_0, 0x000000ff
1048: beq %r10_0, 0 -> 0x105c v
104c: %r10_0 = rotlw_by_8_then_and %r13_0, 0x000000ff
1054: beq %r10_0, 0 -> 0x105c v
1058: return
105c: %r11_1 = or %r11_1, 0x00000008
1064: return
1068: %r10_1 = 0
106c: %r10_0 = and %r12_0, 0x000000ff
1074: bne %r10_0, 0 -> 0x107c v
1078: %r10_1 = or %r10_1, 1
107c: %r10_0 = and %r12_0, 0x0000ff00
1084: bne %r10_0, 0 -> 0x108c v
1088: %r10_1 = or %r10_1, 2
108c: %r10_0 = and %r12_0, 0x00ff0000
1094: bne %r10_0, 0 -> 0x109c v
1098: %r10_1 = or %r10_1, 4
109c: %r10_0 = and %r12_0, 0xff000000
10a4: bne %r10_0, 0 -> 0x10b0 v
10a8: %r10_1 = or %r10_1, 0x00000008
10b0: %r10_0 = and %r12_1, 0x000000ff
10b8: bne %r10_0, 0 -> 0x10c0 v
10bc: %r10_1 = or %r10_1, 1
10c0: %r10_0 = and %r12_1, 0x0000ff00
10c8: bne %r10_0, 0 -> 0x10d0 v
10cc: %r10_1 = or %r10_1, 2
10d0: %r10_0 = and %r12_1, 0x00ff0000
10d8: bne %r10_0, 0 -> 0x10e0 v
10dc: %r10_1 = or %r10_1, 4
10e0: %r10_0 = and %r12_1, 0xff000000
10e8: bne %r10_0, 0 -> 0x10f4 v
10ec: %r10_1 = or %r10_1, 0x00000008
10f4: return
10f8: %r12_0 = 0
10fc: %r10_0 = and %r13_1, 0x0000000f
1104: beq %r10_0, 0x0000000f -> 0x1110 v
110c: %r12_0 = or %r12_0, 1
1110: %r10_0 = and %r13_1, 0x000000f0
1118: beq %r10_0, 0x000000f0 -> 0x1124 v
1120: %r12_0 = or %r12_0, 2
1124: %r10_0 = and %r13_1, 0x00000f00
112c: beq %r10_0, 0x00000f00 -> 0x1138 v
1134: %r12_0 = or %r12_0, 4
1138: %r10_0 = and %r13_1, 0x0000f000
1140: beq %r10_0, 0x0000f000 -> 0x1150 v
1148: %r12_0 = or %r12_0, 0x00000008
1150: %r10_0 = and %r13_1, 0x000f0000
1158: beq %r10_0, 0x000f0000 -> 0x1168 v
1160: %r12_0 = or %r12_0, 0x00000010
1168: %r10_0 = and %r13_1, 0x00f00000
1170: beq %r10_0, 0x00f00000 -> 0x1180 v
1178: %r12_0 = or %r12_0, 0x00000020
1180: %r10_0 = and %r13_1, 0x0f000000
1188: beq %r10_0, 0x0f000000 -> 0x1198 v
1190: %r12_0 = or %r12_0, 0x00000040
1198: %r10_0 = and %r13_1, 0xf0000000
11a0: beq %r10_0, 0xf0000000 -> 0x11b0 v
11a8: %r12_0 = or %r12_0, 0x00000080
11b0: return
11b4: return
11b8: store_word 0x20000000, 0xe1020000
11c0: store_word 0x20000000, 0xe1040000
11c8: store_word 0, 0xe4002800
11cc: store_word 0x08000000, 0xe4002804
11d4: %r12_0 = load_word -4
11d8: %r11_1 = rotlw_by_28_then_and %r11_1, 7
11dc: bne %r11_1, 5 -> 0x11e8 v
11e0: %r10_1 = 0x20003021
11e8: bne %r11_1, 6 -> 0x11f4 v
11ec: %r10_1 = 0x20001011
11f4: bne %r11_1, 7 -> 0x1200 v
11f8: %r10_1 = 0x20003025
1200: bne %r11_1, 0 -> 0x120c v
1204: %r10_1 = 0x20000009
120c: bne %r11_1, 1 -> 0x1218 v
1210: %r10_1 = 0x20003029
1218: bne %r11_1, 2 -> 0x1224 v
121c: %r10_1 = 0x20001015
1224: bne %r11_1, 3 -> 0x1230 v
1228: %r10_1 = 0x2000302d
1230: bne %r11_1, 4 -> 0x123c v
1234: %r10_1 = 0x2000000b
123c: store_word %r10_1, 0xe4000210
1240: %r10_1 = or %r10_1, 0x000c0000
1248: store_word %r10_1, 0xe4000210
124c: %r10_0 = *(0xe4000210)
1250: sync
1254: delay -7
1258: %r10_1 = and %r10_1, 0xdff3ffff
1260: store_word %r10_1, 0xe4000210
1264: store_word 0x00000200, 0xe4000200
126c: store_word %r10_1, 0xe4000284
1270: %r10_1 = or %r10_1, 0x000c0000
1278: store_word %r10_1, 0xe4000284
127c: %r12_0 = *(0xe4000284)
1280: sync
1284: delay -7
1288: %r10_1 = and %r10_1, 0xdff3ffff
1290: store_word %r10_1, 0xe4000284
1294: call 0x3b98
1298: %r10_1 = 0x20000013
12a0: store_word %r10_1, 0xe4000244
12a4: %r10_1 = or %r10_1, 0x000c0000
12ac: store_word %r10_1, 0xe4000244
12b0: %r12_0 = *(0xe4000244)
12b4: sync
12b8: delay -7
12bc: %r10_1 = and %r10_1, 0xdff3ffff
12c4: store_word %r10_1, 0xe4000244
12c8: store_word 0, 0xe40001a8
12cc: %r10_0 = *(0xd0008000)
12d0: %r10_0 = rotlw_by_16_then_and %r10_0, 0x0000ffff
12d8: %r10_1 = rotlw_by_28_then_and %r10_0, 0x0000000f
12e0: store_word %r10_0, 0xe40015e0
12e4: store_word %r10_1, 0xe40015e4
12e8: %r10_1 = and %r10_1, 0x0000000f
12f0: %r12_0 = *(0xe40015ec)
12f4: %r10_0 = rotlw_by_24_then_and %r10_0, 0xfffffff0
12fc: %r10_0 = or %r10_0, %r10_1
1300: %r10_0 = rotlw_by_8_then_and %r10_0, -1
1304: store_word %r10_0, 0xe40015ec
1308: %r10_0 = *(0xe40015e0)
130c: %r12_0 = load_word -6
1310: %r10_0 = *(0xd0008008)
1314: %r10_0 = and %r10_0, 0x000000ff
131c: store_word %r10_0, 0xe40015e0
1320: %r12_0 = *(0xe40015ec)
1324: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
132c: bne %r10_0, 1 -> 0x1338 v
1330: %r10_0 = *(0xe40015e0)
1334: jmp 0x1360 v
1338: %r10_0 = *(0xe40015e0)
133c: store_word %r10_0, 0xe40015e0
1340: %r12_0 = *(0xe40015ec)
1344: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
134c: bne %r10_0, 2 -> 0x1358 v
1350: %r10_0 = *(0xe40015e0)
1354: jmp 0x1360 v
1358: %r10_0 = *(0xe40015e0)
135c: jmp 0x135c ^
1360: store_word %r10_0, 0xe40015e0
1364: %r12_0 = *(0xe40015ec)
1368: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1370: beq %r10_0, 2 -> 0x137c v
1374: %r10_0 = *(0xe40015e0)
1378: jmp 0x13bc v
137c: %r10_0 = *(0xe40015e0)
1380: store_word 0x0000000e, 0xe1016100
1388: delay -7
138c: sync
1390: store_word 0x00000009, 0xe1016000
1398: %r10_0 = *(0xe1016000)
139c: sync
13a0: store_word 0x00000401, 0xe1016100
13a8: delay -7
13ac: sync
13b0: store_word 3, 0xe1016000
13b4: %r10_0 = *(0xe1016000)
13b8: sync
13bc: store_word %r10_0, 0xe40015e0
13c0: %r12_0 = *(0xe40015ec)
13c4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
13cc: beq %r10_0, 3 -> 0x13d8 v
13d0: %r10_0 = *(0xe40015e0)
13d4: jmp 0x14b4 v
13d8: %r10_0 = *(0xe40015e0)
13dc: store_word 4, 0xe1016100
13e0: delay -7
13e4: sync
13e8: store_word 0x00000012, 0xe1016000
13f0: %r10_0 = *(0xe1016000)
13f4: sync
13f8: store_word 1, 0xe1016100
13fc: delay -7
1400: sync
1404: store_word 0x00000012, 0xe1016000
140c: %r10_0 = *(0xe1016000)
1410: sync
1414: store_word 0x00001012, 0xe1016000
141c: %r10_0 = *(0xe1016000)
1420: sync
1424: %r10_0 = *(0xe1016200)
1428: sync
142c: store_word 0x001ce800, 0xe1016100
1434: delay -7
1438: sync
143c: store_word 0x00000011, 0xe1016000
1444: %r10_0 = *(0xe1016000)
1448: sync
144c: store_word 0x00001011, 0xe1016000
1454: %r10_0 = *(0xe1016000)
1458: sync
145c: %r10_0 = *(0xe1016200)
1460: sync
1464: store_word 0x00001026, 0xe1016000
146c: %r10_0 = *(0xe1016000)
1470: sync
1474: %r10_0 = *(0xe1016200)
1478: sync
147c: store_word 0x000003a2, 0xe1016100
1484: delay -7
1488: sync
148c: store_word 0x00000026, 0xe1016000
1494: %r10_0 = *(0xe1016000)
1498: sync
149c: store_word 0x00001026, 0xe1016000
14a4: %r10_0 = *(0xe1016000)
14a8: sync
14ac: %r10_0 = *(0xe1016200)
14b0: sync
14b4: store_word 0x00024024, 0xe40002a0
14bc: store_word 0x00024024, 0xe40002a8
14c4: store_word_0_100 0x00000342, MC0_PAD_IF_CNTL
14cc: %r10_0 = 0
14d0: store_word %r10_0, 0xe40015e0
14d4: %r12_0 = *(0xe40015ec)
14d8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
14e0: beq %r10_0, 3 -> 0x14ec v
14e4: %r10_0 = *(0xe40015e0)
14e8: jmp 0x14f8 v
14ec: %r10_0 = *(0xe40015e0)
14f0: %r10_0 = 0x11111111
14f8: store_word_0_100 %r10_0, MC0_PAD_IF_CNTL_2
14fc: %r10_0 = 0x50505050
1504: store_word_0_100 %r10_0, MC0_DLL_MASTER_ADJ_0
1508: store_word_0_100 %r10_0, MC0_DLL_MASTER_ADJ_1
150c: %r10_0 = 0x0a0a0a0a
1514: store_word_0_100 %r10_0, MC0_RD_STR_DLY_0
1518: store_word_0_100 %r10_0, MC0_RD_STR_DLY_1
151c: %r10_0 = 0x0f0f0f0f
1524: store_word_0_100 %r10_0, MC0_WR_STR_DLL_0
1528: store_word_0_100 %r10_0, MC0_WR_STR_DLL_1
152c: %r12_0 = *(MC1_WR_STR_DLL_1)
1530: sync
1534: delay -7
1538: call 0x3b98
153c: %r10_0 = 0
1540: %r10_1 = -1
1544: store_word %r10_0, 0xe40015e0
1548: %r12_0 = *(0xe40015ec)
154c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1554: beq %r10_0, 3 -> 0x1560 v
1558: %r10_0 = *(0xe40015e0)
155c: jmp 0x1574 v
1560: %r10_0 = *(0xe40015e0)
1564: %r10_0 = 0x00009000
156c: %r10_1 = 0x22222222
1574: store_word_0_100 %r10_0, MC0_TERM_CNTL
1578: store_word_0_100 %r10_1, MC0_WR_STR_DLY
157c: store_word %r10_0, 0xe40015e0
1580: %r12_0 = *(0xe40015ec)
1584: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
158c: bne %r10_0, 3 -> 0x1598 v
1590: %r10_0 = *(0xe40015e0)
1594: jmp 0x15bc v
1598: %r10_0 = *(0xe40015e0)
159c: store_word_0_100 1, MC0_PAD_CAL_CNTL
15a0: %r10_0 = *(MC1_PAD_CAL_CNTL)
15a4: sync
15a8: delay -7
15ac: store_word_0_100 0, MC0_PAD_CAL_CNTL
15b0: %r11_1 = 0x000ff306
15b8: call 0x0ab8
15bc: store_word %r10_0, 0xe40015e0
15c0: %r12_0 = *(0xe40015ec)
15c4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
15cc: beq %r10_0, 3 -> 0x15d8 v
15d0: %r10_0 = *(0xe40015e0)
15d4: jmp 0x15e8 v
15d8: %r10_0 = *(0xe40015e0)
15dc: store_word_0_100 1, MC0_PAD_CAL_CNTL
15e0: store_word_0_100 0x00000008, MC0_PAD_CAL_CNTL
15e8: store_word 0, 0xe40002a4
15ec: store_word_0_100 0, MC0_CNTL
15f0: store_word_0_100 0, MC0_POINTER
15f4: store_word_0_100 0x001c0000, MC0_DRAM_CMD
15fc: store_word_0_100 2, MC0_CNTL
1600: %r10_0 = *(MC1_CNTL)
1604: sync
1608: delay -7
160c: %r10_0 = 0x00000019
1614: store_word %r10_0, 0xe40015e0
1618: %r12_0 = *(0xe40015ec)
161c: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1624: beq %r10_0, 3 -> 0x1630 v
1628: %r10_0 = *(0xe40015e0)
162c: jmp 0x1638 v
1630: %r10_0 = *(0xe40015e0)
1634: %r10_0 = 1
1638: store_word %r10_0, 0xe40002a4
163c: %r12_0 = *(0xe40002a4)
1640: sync
1644: delay -7
1648: store_word_0_100 0, MC0_POINTER
164c: store_word_0_100 0x423c0000, MC0_DRAM_CMD
1654: store_word_0_100 0x0a280100, MC0_DRAM_CMD
165c: store_word_0_100 0x06200221, MC0_DRAM_CMD
1664: store_word_0_100 0x0620808d, MC0_DRAM_CMD
166c: store_word_0_100 0x06200772, MC0_DRAM_CMD
1674: store_word_0_100 2, MC0_CNTL
1678: %r10_0 = *(MC1_CNTL)
167c: sync
1680: delay -7
1684: store_word_0_100 0, MC0_POINTER
1688: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1690: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1698: store_word_0_100 0x2f240000, MC0_DRAM_CMD
16a0: store_word_0_100 0x0620c48d, MC0_DRAM_CMD
16a8: store_word_0_100 2, MC0_CNTL
16ac: %r10_0 = *(MC1_CNTL)
16b0: sync
16b4: %r12_0 = load_word -3
16b8: %r12_0 = load_word -2
16bc: store_word_0_100 0, MC0_POINTER
16c0: store_word_0_100 0x0620c08d, MC0_DRAM_CMD
16c8: store_word_0_100 2, MC0_CNTL
16cc: store_word_0_100 0, MC0_POINTER
16d0: store_word_0_100 0x0620a48d, MC0_DRAM_CMD
16d8: store_word_0_100 2, MC0_CNTL
16dc: %r10_0 = *(MC1_CNTL)
16e0: sync
16e4: %r12_0 = load_word -1
16e8: %r12_0 = load_word 0
16ec: store_word_0_100 0, MC0_POINTER
16f0: store_word_0_100 0x0620a08d, MC0_DRAM_CMD
16f8: store_word_0_100 2, MC0_CNTL
16fc: %r10_1 = and %r12_0, 0x00ff00ff
1704: %r10_0 = and %r12_1, 0x00ff00ff
170c: bne %r10_1, %r11_0 -> 0x0c34 ^
1710: %r10_0 = rotlw_by_16_then_and %r11_0, -1
1714: bne %r10_1, %r11_0 -> 0x0c34 ^
1718: %r10_1 = and %r13_0, 0xff00ff00
1720: %r10_0 = and %r13_1, 0xff00ff00
1728: bne %r10_1, %r11_0 -> 0x0c34 ^
172c: %r10_0 = rotlw_by_16_then_and %r11_0, -1
1730: bne %r10_1, %r11_0 -> 0x0c34 ^
1734: %r10_1 = rotlw_by_28_then_and %r12_0, 0x0000000f
173c: store_word %r10_0, 0xe40015e0
1740: store_word %r10_1, 0xe40015e4
1744: %r10_1 = and %r10_1, 0x0000000f
174c: %r12_0 = *(0xe40015ec)
1750: %r10_0 = rotlw_by_28_then_and %r10_0, 0xfffffff0
1758: %r10_0 = or %r10_0, %r10_1
175c: %r10_0 = rotlw_by_4_then_and %r10_0, -1
1760: store_word %r10_0, 0xe40015ec
1764: %r10_0 = *(0xe40015e0)
1768: %r12_0 = load_word -6
176c: %r10_1 = and %r12_0, 0x0000000f
1774: store_word %r10_0, 0xe40015e0
1778: %r10_0 = *(0xe40015e8)
177c: %r10_0 = and %r10_0, 0xfffffff7
1784: %r10_0 = or %r10_0, 0
1788: store_word %r10_0, 0xe40015e8
178c: %r10_0 = *(0xe40015e0)
1790: bne %r10_1, 1 -> 0x17f0 v
1794: store_word %r10_0, 0xe40015e0
1798: %r12_0 = *(0xe40015ec)
179c: %r10_0 = and %r10_0, 0xfffffff0
17a4: %r10_0 = or %r10_0, 1
17a8: store_word %r10_0, 0xe40015ec
17ac: %r10_0 = *(0xe40015e0)
17b0: store_word %r10_0, 0xe40015e0
17b4: %r12_0 = *(0xe40015ec)
17b8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
17c0: beq %r10_0, 4 -> 0x17cc v
17c4: %r10_0 = *(0xe40015e0)
17c8: jmp 0x17f0 v
17cc: %r10_0 = *(0xe40015e0)
17d0: store_word %r10_0, 0xe40015e0
17d4: %r10_0 = *(0xe40015e8)
17d8: %r10_0 = and %r10_0, 0xfffffff7
17e0: %r10_0 = or %r10_0, 0x00000008
17e8: store_word %r10_0, 0xe40015e8
17ec: %r10_0 = *(0xe40015e0)
17f0: bne %r10_1, 2 -> 0x1850 v
17f4: store_word %r10_0, 0xe40015e0
17f8: %r12_0 = *(0xe40015ec)
17fc: %r10_0 = and %r10_0, 0xfffffff0
1804: %r10_0 = or %r10_0, 2
1808: store_word %r10_0, 0xe40015ec
180c: %r10_0 = *(0xe40015e0)
1810: store_word %r10_0, 0xe40015e0
1814: %r12_0 = *(0xe40015ec)
1818: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1820: beq %r10_0, 4 -> 0x182c v
1824: %r10_0 = *(0xe40015e0)
1828: jmp 0x1850 v
182c: %r10_0 = *(0xe40015e0)
1830: store_word %r10_0, 0xe40015e0
1834: %r10_0 = *(0xe40015e8)
1838: %r10_0 = and %r10_0, 0xfffffff7
1840: %r10_0 = or %r10_0, 0x00000008
1848: store_word %r10_0, 0xe40015e8
184c: %r10_0 = *(0xe40015e0)
1850: bne %r10_1, 6 -> 0x1870 v
1854: store_word %r10_0, 0xe40015e0
1858: %r12_0 = *(0xe40015ec)
185c: %r10_0 = and %r10_0, 0xfffffff0
1864: %r10_0 = or %r10_0, 6
1868: store_word %r10_0, 0xe40015ec
186c: %r10_0 = *(0xe40015e0)
1870: store_word %r10_0, 0xe40015e0
1874: %r10_0 = *(0xe40015e8)
1878: %r10_0 = and %r10_0, -5
187c: %r10_0 = or %r10_0, 0
1880: store_word %r10_0, 0xe40015e8
1884: %r10_0 = *(0xe40015e0)
1888: store_word %r10_0, 0xe40015e0
188c: %r10_0 = *(0xe40015e8)
1890: %r10_0 = rotlw_by_29_then_and %r10_0, 1
1894: bne %r10_0, 1 -> 0x18a0 v
1898: %r10_0 = *(0xe40015e0)
189c: jmp 0x18e0 v
18a0: %r10_0 = *(0xe40015e0)
18a4: beq %r12_0, %r13_0 -> 0x18e0 v
18a8: store_word %r10_0, 0xe40015e0
18ac: %r10_0 = *(0xe40015e8)
18b0: %r10_0 = and %r10_0, -5
18b4: %r10_0 = or %r10_0, 4
18b8: store_word %r10_0, 0xe40015e8
18bc: %r10_0 = *(0xe40015e0)
18c0: beq %r12_0, -1 -> 0x18e0 v
18c4: beq %r13_0, -1 -> 0x18e0 v
18c8: store_word %r10_0, 0xe40015e0
18cc: %r10_0 = *(0xe40015e8)
18d0: %r10_0 = and %r10_0, -5
18d4: %r10_0 = or %r10_0, 0
18d8: store_word %r10_0, 0xe40015e8
18dc: %r10_0 = *(0xe40015e0)
18e0: %r10_1 = 0
18e4: %r10_0 = 0x20000000
18ec: store_word %r10_0, 0xe40015e0
18f0: %r10_0 = *(0xe40015e8)
18f4: %r10_0 = rotlw_by_30_then_and %r10_0, 1
18f8: bne %r10_0, 0 -> 0x1904 v
18fc: %r10_0 = *(0xe40015e0)
1900: jmp 0x1918 v
1904: %r10_0 = *(0xe40015e0)
1908: %r10_1 = 0x00000018
1910: %r10_0 = 0x10000000
1918: store_word %r10_0, 0xe40015e0
191c: %r12_0 = *(0xe40015ec)
1920: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1928: beq %r10_0, 3 -> 0x1934 v
192c: %r10_0 = *(0xe40015e0)
1930: jmp 0x193c v
1934: %r10_0 = *(0xe40015e0)
1938: %r10_1 = 0
193c: %r12_0 = load_word -4
1940: %r11_1 = and %r11_1, 0xffffffe7
1948: %r11_1 = or %r11_1, %r10_1
194c: store_word %r11_1, 0xe40002a4
1950: store_word %r11_0, 0xe1020000
1954: store_word %r11_0, 0xe1040000
1958: store_word %r10_0, 0xe40015e0
195c: %r12_0 = *(0xe40015ec)
1960: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1968: beq %r10_0, 3 -> 0x1974 v
196c: %r10_0 = *(0xe40015e0)
1970: jmp 0x197c v
1974: %r10_0 = *(0xe40015e0)
1978: jmp 0x198c v
197c: call 0x01ec
1980: %r11_1 = %r10_1
1984: call 0x0ab8
1988: %r10_1 = %r11_1
198c: %r12_0 = load_word -6
1990: %r10_1 = and %r10_1, -2
1994: store_word %r10_1, 0xe40002a4
1998: store_word_0_100 0, MC0_POINTER
199c: store_word_0_100 0x001c0000, MC0_DRAM_CMD
19a4: store_word_0_100 2, MC0_CNTL
19a8: %r10_0 = *(MC1_CNTL)
19ac: sync
19b0: delay -7
19b4: %r10_1 = or %r10_1, 1
19b8: store_word %r10_1, 0xe40002a4
19bc: %r12_0 = *(0xe40002a4)
19c0: sync
19c4: delay -7
19c8: %r10_1 = 0x040e3202
19d0: store_word %r10_0, 0xe40015e0
19d4: %r10_0 = *(0xe40015e8)
19d8: %r10_0 = rotlw_by_30_then_and %r10_0, 1
19dc: bne %r10_0, 1 -> 0x19e8 v
19e0: %r10_0 = *(0xe40015e0)
19e4: jmp 0x19f0 v
19e8: %r10_0 = *(0xe40015e0)
19ec: %r10_1 = or %r10_1, 1
19f0: store_word_0_100 %r10_1, MC0_DRAM_CONFIG
19f4: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
19fc: store_word_0_100 0x00348084, MC0_TUNING_0
1a04: store_word_0_100 0x0000007a, MC0_TUNING_1
1a0c: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1a14: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
1a1c: store_word_0_100 0x01283446, MC0_TIMING_CNTL_0
1a24: store_word_0_100 0x03620991, MC0_TIMING_CNTL_1
1a2c: store_word_0_100 0x0c958107, MC0_TIMING_CNTL_2
1a34: store_word_0_100 0x00000018, MC0_WR_DATA_DLY_0
1a3c: store_word %r10_0, 0xe40015e0
1a40: %r12_0 = *(0xe40015ec)
1a44: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1a4c: beq %r10_0, 3 -> 0x1a58 v
1a50: %r10_0 = *(0xe40015e0)
1a54: jmp 0x1a74 v
1a58: %r10_0 = *(0xe40015e0)
1a5c: delay -7
1a60: store_word 0x00000100, 0xe40000f0
1a68: delay -7
1a6c: store_word 0, 0xe40000f0
1a70: delay -7
1a74: store_word_0_100 0x00000030, MC0_INTERRUPT_MASK
1a7c: store_word %r10_0, 0xe40015e0
1a80: %r12_0 = *(0xe40015ec)
1a84: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1a8c: beq %r10_0, 3 -> 0x1a98 v
1a90: %r10_0 = *(0xe40015e0)
1a94: jmp 0x1aa0 v
1a98: %r10_0 = *(0xe40015e0)
1a9c: call 0x3b98
1aa0: store_word_0_100 0, MC0_POINTER
1aa4: store_word_0_100 0x423c0000, MC0_DRAM_CMD
1aac: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1ab4: store_word_0_100 0x06200221, MC0_DRAM_CMD
1abc: call 0x0270
1ac0: store_word_0_100 %r10_1, MC0_DRAM_CMD
1ac4: store_word_0_100 0x06200772, MC0_DRAM_CMD
1acc: store_word %r10_0, 0xe40015e0
1ad0: %r12_0 = *(0xe40015ec)
1ad4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1adc: bne %r10_0, 1 -> 0x1ae8 v
1ae0: %r10_0 = *(0xe40015e0)
1ae4: jmp 0x1b14 v
1ae8: %r10_0 = *(0xe40015e0)
1aec: store_word %r10_0, 0xe40015e0
1af0: %r12_0 = *(0xe40015ec)
1af4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1afc: beq %r10_0, 6 -> 0x1b08 v
1b00: %r10_0 = *(0xe40015e0)
1b04: jmp 0x1b14 v
1b08: %r10_0 = *(0xe40015e0)
1b0c: store_word_0_100 0x0621001b, MC0_DRAM_CMD
1b14: store_word_0_100 2, MC0_CNTL
1b18: %r10_0 = *(MC1_CNTL)
1b1c: sync
1b20: delay -7
1b24: store_word_0_100 0, MC0_POINTER
1b28: store_word_0_100 0x0a280100, MC0_DRAM_CMD
1b30: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1b38: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1b40: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1b48: store_word_0_100 2, MC0_CNTL
1b4c: store_word_0_100 0x00001000, MC0_CNTL
1b54: store_word_0_100 0x00000605, MC0_CNTL
1b5c: %r10_0 = *(MC1_CNTL)
1b60: sync
1b64: delay -7
1b68: store_word %r12_0, 4
1b6c: store_word %r12_1, 0x00000008
1b70: store_word %r13_0, 0x0000000c
1b74: store_word %r13_1, 0x00000010
1b78: call 0x33e4
1b7c: beq %r11_0, 0 -> 0x1b8c v
1b80: store_word 0x0011119a, 0xe4000024
1b88: call 0x0fb0
1b8c: store_word_0_100 0, MC0_CNTL
1b90: store_word_0_100 0, MC0_POINTER
1b94: store_word_0_100 0x00040000, MC0_DRAM_CMD
1b9c: store_word_0_100 2, MC0_CNTL
1ba0: %r10_0 = *(MC1_CNTL)
1ba4: sync
1ba8: delay -7
1bac: %r10_0 = 0x040e3202
1bb4: %r12_0 = load_word -4
1bb8: %r11_1 = and %r11_1, 0x0000000f
1bc0: bne %r11_1, 0x0000000c -> 0x1bd8 v
1bc8: %r10_1 = 0x2000000b
1bd0: %r10_0 = 0x04113202
1bd8: bne %r11_1, 0x0000000d -> 0x1bf0 v
1be0: %r10_1 = 0x20007061
1be8: %r10_0 = 0x04113202
1bf0: bne %r11_1, 0x0000000e -> 0x1c08 v
1bf8: %r10_1 = 0x20003031
1c00: %r10_0 = 0x04123202
1c08: bne %r11_1, 0x0000000f -> 0x1c20 v
1c10: %r10_1 = 0x20007065
1c18: %r10_0 = 0x04123202
1c20: bne %r11_1, 0 -> 0x1c34 v
1c24: %r10_1 = 0x20001019
1c2c: %r10_0 = 0x04123202
1c34: bne %r11_1, 1 -> 0x1c48 v
1c38: %r10_1 = 0x20007069
1c40: %r10_0 = 0x04133202
1c48: bne %r11_1, 2 -> 0x1c5c v
1c4c: %r10_1 = 0x20003035
1c54: %r10_0 = 0x04133202
1c5c: bne %r11_1, 3 -> 0x1c70 v
1c60: %r10_1 = 0x2000706d
1c68: %r10_0 = 0x04133202
1c70: bne %r11_1, 4 -> 0x1c84 v
1c74: %r10_1 = 0x2000000d
1c7c: %r10_0 = 0x04143202
1c84: bne %r11_1, 5 -> 0x1c98 v
1c88: %r10_1 = 0x20007071
1c90: %r10_0 = 0x04143202
1c98: bne %r11_1, 6 -> 0x1cac v
1c9c: %r10_1 = 0x20003039
1ca4: %r10_0 = 0x04153202
1cac: bne %r11_1, 7 -> 0x1cc0 v
1cb0: %r10_1 = 0x20007075
1cb8: %r10_0 = 0x04153202
1cc0: bne %r11_1, 0x00000008 -> 0x1cd8 v
1cc8: %r10_1 = 0x2000101d
1cd0: %r10_0 = 0x04153202
1cd8: bne %r11_1, 0x00000009 -> 0x1cf0 v
1ce0: %r10_1 = 0x20007079
1ce8: %r10_0 = 0x04163202
1cf0: bne %r11_1, 0x0000000a -> 0x1d08 v
1cf8: %r10_1 = 0x2000303d
1d00: %r10_0 = 0x04163202
1d08: bne %r11_1, 0x0000000b -> 0x1d20 v
1d10: %r10_1 = 0x2000707d
1d18: %r10_0 = 0x04163202
1d20: store_word %r10_1, 0xe4000284
1d24: %r10_1 = or %r10_1, 0x000c0000
1d2c: store_word %r10_1, 0xe4000284
1d30: %r12_0 = *(0xe4000284)
1d34: sync
1d38: delay -7
1d3c: %r10_1 = and %r10_1, 0xdff3ffff
1d44: store_word %r10_1, 0xe4000284
1d48: call 0x3b98
1d4c: store_word %r10_0, 0xe40015e0
1d50: %r10_0 = *(0xe40015e8)
1d54: %r10_0 = rotlw_by_30_then_and %r10_0, 1
1d58: bne %r10_0, 1 -> 0x1d64 v
1d5c: %r10_0 = *(0xe40015e0)
1d60: jmp 0x1d6c v
1d64: %r10_0 = *(0xe40015e0)
1d68: %r10_0 = or %r11_0, 1
1d6c: store_word_0_100 %r11_0, MC0_DRAM_CONFIG
1d70: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
1d78: store_word_0_100 0x20988088, MC0_TUNING_0
1d80: store_word_0_100 0x0000007a, MC0_TUNING_1
1d88: store_word_0_100 1, MC0_ARBITRATION_CNTL
1d8c: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1d94: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
1d9c: store_word_0_100 0x0128d87b, MC0_TIMING_CNTL_0
1da4: store_word_0_100 0x03820edb, MC0_TIMING_CNTL_1
1dac: store_word_0_100 0x0c97914b, MC0_TIMING_CNTL_2
1db4: store_word_0_100 0x00000025, MC0_WR_DATA_DLY_0
1dbc: store_word %r10_0, 0xe40015e0
1dc0: %r12_0 = *(0xe40015ec)
1dc4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1dcc: beq %r10_0, 3 -> 0x1dd8 v
1dd0: %r10_0 = *(0xe40015e0)
1dd4: jmp 0x1df4 v
1dd8: %r10_0 = *(0xe40015e0)
1ddc: delay -7
1de0: store_word 0x00000100, 0xe40000f0
1de8: delay -7
1dec: store_word 0, 0xe40000f0
1df0: delay -7
1df4: store_word_0_100 0x00000030, MC0_INTERRUPT_MASK
1dfc: store_word_0_100 0, MC0_POINTER
1e00: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1e08: store_word_0_100 2, MC0_CNTL
1e0c: %r10_0 = *(MC1_CNTL)
1e10: sync
1e14: delay -7
1e18: store_word_0_100 0, MC0_POINTER
1e1c: store_word_0_100 0x0c280100, MC0_DRAM_CMD
1e24: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1e2c: call 0x0380
1e30: store_word %r10_1, 0xe4000014
1e34: store_word_0_100 %r10_1, MC0_DRAM_CMD
1e38: %r10_1 = 0x06200712
1e40: store_word %r10_1, 0xe4000010
1e44: store_word_0_100 %r10_1, MC0_DRAM_CMD
1e48: store_word %r10_0, 0xe40015e0
1e4c: %r12_0 = *(0xe40015ec)
1e50: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1e58: bne %r10_0, 1 -> 0x1e64 v
1e5c: %r10_0 = *(0xe40015e0)
1e60: jmp 0x1e90 v
1e64: %r10_0 = *(0xe40015e0)
1e68: store_word %r10_0, 0xe40015e0
1e6c: %r12_0 = *(0xe40015ec)
1e70: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1e78: beq %r10_0, 6 -> 0x1e84 v
1e7c: %r10_0 = *(0xe40015e0)
1e80: jmp 0x1e90 v
1e84: %r10_0 = *(0xe40015e0)
1e88: store_word_0_100 0x0621001b, MC0_DRAM_CMD
1e90: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1e98: store_word_0_100 2, MC0_CNTL
1e9c: store_word_0_100 0x00001000, MC0_CNTL
1ea4: store_word_0_100 0x00000605, MC0_CNTL
1eac: %r10_0 = *(MC1_CNTL)
1eb0: sync
1eb4: delay -7
1eb8: call 0x3494
1ebc: op_1E 0, -7
1ec0: store_word %r13_1, MC0_RD_STR_DLY_0
1ec4: op_1E 0, -7
1ec8: op_1E 1, -7
1ecc: store_word %r13_1, MC0_RD_STR_DLY_1
1ed0: op_1E 1, -7
1ed4: op_1E 2, -7
1ed8: store_word %r13_1, MC1_RD_STR_DLY_0
1edc: op_1E 2, -7
1ee0: op_1E 3, -7
1ee4: store_word %r13_1, MC1_RD_STR_DLY_1
1ee8: op_1E 3, -7
1eec: store_word %r10_0, 0xe40015e0
1ef0: %r12_0 = *(0xe40015ec)
1ef4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1efc: beq %r10_0, 1 -> 0x1f08 v
1f00: %r10_0 = *(0xe40015e0)
1f04: jmp 0x2078 v
1f08: %r10_0 = *(0xe40015e0)
1f0c: store_word %r10_0, 0xe40015e0
1f10: %r12_0 = *(0xe40015ec)
1f14: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1f1c: beq %r10_0, 1 -> 0x1f28 v
1f20: %r10_0 = *(0xe40015e0)
1f24: jmp 0x1f84 v
1f28: %r10_0 = *(0xe40015e0)
1f2c: %r10_0 = 0
1f30: %r11_1 = 0
1f34: %r10_0 = MC0_RD_STR_DLY_0
1f3c: %r10_1 = 0x0a0a0a0a
1f44: call 0x04b8
1f48: %r10_0 = MC0_RD_STR_DLY_1
1f50: %r10_1 = 0x0a0a0a0a
1f58: call 0x04b8
1f5c: %r10_0 = MC1_RD_STR_DLY_0
1f64: %r10_1 = 0x0a0a0a0a
1f6c: call 0x04b8
1f70: %r10_0 = MC1_RD_STR_DLY_1
1f78: %r10_1 = 0x0a0a0a0a
1f80: call 0x04b8
1f84: store_word %r10_0, 0xe40015e0
1f88: %r12_0 = *(0xe40015ec)
1f8c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1f94: beq %r10_0, 2 -> 0x1fa0 v
1f98: %r10_0 = *(0xe40015e0)
1f9c: jmp 0x1ffc v
1fa0: %r10_0 = *(0xe40015e0)
1fa4: %r10_0 = 0
1fa8: %r11_1 = 0
1fac: %r10_0 = MC0_RD_STR_DLY_0
1fb4: %r10_1 = 0x05060505
1fbc: call 0x04b8
1fc0: %r10_0 = MC0_RD_STR_DLY_1
1fc8: %r10_1 = 0x03060504
1fd0: call 0x04b8
1fd4: %r10_0 = MC1_RD_STR_DLY_0
1fdc: %r10_1 = 0x04060605
1fe4: call 0x04b8
1fe8: %r10_0 = MC1_RD_STR_DLY_1
1ff0: %r10_1 = 0x05050605
1ff8: call 0x04b8
1ffc: store_word %r10_0, 0xe40015e0
2000: %r12_0 = *(0xe40015ec)
2004: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
200c: beq %r10_0, 6 -> 0x2018 v
2010: %r10_0 = *(0xe40015e0)
2014: jmp 0x2074 v
2018: %r10_0 = *(0xe40015e0)
201c: %r10_0 = 0
2020: %r11_1 = 0
2024: %r10_0 = MC0_RD_STR_DLY_0
202c: %r10_1 = 0x10101011
2034: call 0x04b8
2038: %r10_0 = MC0_RD_STR_DLY_1
2040: %r10_1 = 0x0e100f0e
2048: call 0x04b8
204c: %r10_0 = MC1_RD_STR_DLY_0
2054: %r10_1 = 0x0d110f10
205c: call 0x04b8
2060: %r10_0 = MC1_RD_STR_DLY_1
2068: %r10_1 = 0x0d0d100d
2070: call 0x04b8
2074: jmp 0x27a0 v
2078: store_word %r10_0, 0xe40015e0
207c: %r12_0 = *(0xe40015ec)
2080: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
2088: beq %r10_0, 2 -> 0x2094 v
208c: %r10_0 = *(0xe40015e0)
2090: jmp 0x24c8 v
2094: %r10_0 = *(0xe40015e0)
2098: store_word %r10_0, 0xe40015e0
209c: %r12_0 = *(0xe40015ec)
20a0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
20a8: beq %r10_0, 1 -> 0x20b4 v
20ac: %r10_0 = *(0xe40015e0)
20b0: jmp 0x2130 v
20b4: %r10_0 = *(0xe40015e0)
20b8: store_word %r10_0, 0xe40015e0
20bc: %r12_0 = *(0xe40015ec)
20c0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
20c8: beq %r10_0, 4 -> 0x20d4 v
20cc: %r10_0 = *(0xe40015e0)
20d0: jmp 0x2130 v
20d4: %r10_0 = *(0xe40015e0)
20d8: %r10_0 = 0
20dc: %r11_1 = 0
20e0: %r10_0 = MC0_RD_STR_DLY_0
20e8: %r10_1 = 0x0a0a0a0a
20f0: call 0x04b8
20f4: %r10_0 = MC0_RD_STR_DLY_1
20fc: %r10_1 = 0x0a0a0a0a
2104: call 0x04b8
2108: %r10_0 = MC1_RD_STR_DLY_0
2110: %r10_1 = 0x0a0a0a0a
2118: call 0x04b8
211c: %r10_0 = MC1_RD_STR_DLY_1
2124: %r10_1 = 0x0a0a0a0a
212c: call 0x04b8
2130: store_word %r10_0, 0xe40015e0
2134: %r12_0 = *(0xe40015ec)
2138: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2140: beq %r10_0, 1 -> 0x214c v
2144: %r10_0 = *(0xe40015e0)
2148: jmp 0x21cc v
214c: %r10_0 = *(0xe40015e0)
2150: store_word %r10_0, 0xe40015e0
2154: %r12_0 = *(0xe40015ec)
2158: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2160: beq %r10_0, 0x00000009 -> 0x2170 v
2168: %r10_0 = *(0xe40015e0)
216c: jmp 0x21cc v
2170: %r10_0 = *(0xe40015e0)
2174: %r10_0 = 0
2178: %r11_1 = 0
217c: %r10_0 = MC0_RD_STR_DLY_0
2184: %r10_1 = 0x0a0a0a0a
218c: call 0x04b8
2190: %r10_0 = MC0_RD_STR_DLY_1
2198: %r10_1 = 0x0a0a0a0a
21a0: call 0x04b8
21a4: %r10_0 = MC1_RD_STR_DLY_0
21ac: %r10_1 = 0x0a0a0a0a
21b4: call 0x04b8
21b8: %r10_0 = MC1_RD_STR_DLY_1
21c0: %r10_1 = 0x0a0a0a0a
21c8: call 0x04b8
21cc: store_word %r10_0, 0xe40015e0
21d0: %r12_0 = *(0xe40015ec)
21d4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
21dc: beq %r10_0, 2 -> 0x21e8 v
21e0: %r10_0 = *(0xe40015e0)
21e4: jmp 0x2264 v
21e8: %r10_0 = *(0xe40015e0)
21ec: store_word %r10_0, 0xe40015e0
21f0: %r12_0 = *(0xe40015ec)
21f4: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
21fc: beq %r10_0, 0 -> 0x2208 v
2200: %r10_0 = *(0xe40015e0)
2204: jmp 0x2264 v
2208: %r10_0 = *(0xe40015e0)
220c: %r10_0 = 0
2210: %r11_1 = 0
2214: %r10_0 = MC0_RD_STR_DLY_0
221c: %r10_1 = 0x090c0905
2224: call 0x04b8
2228: %r10_0 = MC0_RD_STR_DLY_1
2230: %r10_1 = 0x0a0a0a09
2238: call 0x04b8
223c: %r10_0 = MC1_RD_STR_DLY_0
2244: %r10_1 = 0x04050505
224c: call 0x04b8
2250: %r10_0 = MC1_RD_STR_DLY_1
2258: %r10_1 = 0x05050906
2260: call 0x04b8
2264: store_word %r10_0, 0xe40015e0
2268: %r12_0 = *(0xe40015ec)
226c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2274: beq %r10_0, 2 -> 0x2280 v
2278: %r10_0 = *(0xe40015e0)
227c: jmp 0x22fc v
2280: %r10_0 = *(0xe40015e0)
2284: store_word %r10_0, 0xe40015e0
2288: %r12_0 = *(0xe40015ec)
228c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2294: beq %r10_0, 3 -> 0x22a0 v
2298: %r10_0 = *(0xe40015e0)
229c: jmp 0x22fc v
22a0: %r10_0 = *(0xe40015e0)
22a4: %r10_0 = 0
22a8: %r11_1 = 0
22ac: %r10_0 = MC0_RD_STR_DLY_0
22b4: %r10_1 = 0x06090605
22bc: call 0x04b8
22c0: %r10_0 = MC0_RD_STR_DLY_1
22c8: %r10_1 = 0x08050a08
22d0: call 0x04b8
22d4: %r10_0 = MC1_RD_STR_DLY_0
22dc: %r10_1 = 0x03040303
22e4: call 0x04b8
22e8: %r10_0 = MC1_RD_STR_DLY_1
22f0: %r10_1 = 0x05050706
22f8: call 0x04b8
22fc: store_word %r10_0, 0xe40015e0
2300: %r12_0 = *(0xe40015ec)
2304: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
230c: beq %r10_0, 2 -> 0x2318 v
2310: %r10_0 = *(0xe40015e0)
2314: jmp 0x2394 v
2318: %r10_0 = *(0xe40015e0)
231c: store_word %r10_0, 0xe40015e0
2320: %r12_0 = *(0xe40015ec)
2324: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
232c: beq %r10_0, 4 -> 0x2338 v
2330: %r10_0 = *(0xe40015e0)
2334: jmp 0x2394 v
2338: %r10_0 = *(0xe40015e0)
233c: %r10_0 = 0
2340: %r11_1 = 0
2344: %r10_0 = MC0_RD_STR_DLY_0
234c: %r10_1 = 0x070a0706
2354: call 0x04b8
2358: %r10_0 = MC0_RD_STR_DLY_1
2360: %r10_1 = 0x09060b09
2368: call 0x04b8
236c: %r10_0 = MC1_RD_STR_DLY_0
2374: %r10_1 = 0x04050404
237c: call 0x04b8
2380: %r10_0 = MC1_RD_STR_DLY_1
2388: %r10_1 = 0x06060807
2390: call 0x04b8
2394: store_word %r10_0, 0xe40015e0
2398: %r12_0 = *(0xe40015ec)
239c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
23a4: beq %r10_0, 6 -> 0x23b0 v
23a8: %r10_0 = *(0xe40015e0)
23ac: jmp 0x242c v
23b0: %r10_0 = *(0xe40015e0)
23b4: store_word %r10_0, 0xe40015e0
23b8: %r12_0 = *(0xe40015ec)
23bc: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
23c4: beq %r10_0, 1 -> 0x23d0 v
23c8: %r10_0 = *(0xe40015e0)
23cc: jmp 0x242c v
23d0: %r10_0 = *(0xe40015e0)
23d4: %r10_0 = 0
23d8: %r11_1 = 0
23dc: %r10_0 = MC0_RD_STR_DLY_0
23e4: %r10_1 = 0x110f0f0f
23ec: call 0x04b8
23f0: %r10_0 = MC0_RD_STR_DLY_1
23f8: %r10_1 = 0x0f100f0e
2400: call 0x04b8
2404: %r10_0 = MC1_RD_STR_DLY_0
240c: %r10_1 = 0x0a0b0d09
2414: call 0x04b8
2418: %r10_0 = MC1_RD_STR_DLY_1
2420: %r10_1 = 0x0f0d0d0d
2428: call 0x04b8
242c: store_word %r10_0, 0xe40015e0
2430: %r12_0 = *(0xe40015ec)
2434: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
243c: beq %r10_0, 6 -> 0x2448 v
2440: %r10_0 = *(0xe40015e0)
2444: jmp 0x24c4 v
2448: %r10_0 = *(0xe40015e0)
244c: store_word %r10_0, 0xe40015e0
2450: %r12_0 = *(0xe40015ec)
2454: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
245c: beq %r10_0, 2 -> 0x2468 v
2460: %r10_0 = *(0xe40015e0)
2464: jmp 0x24c4 v
2468: %r10_0 = *(0xe40015e0)
246c: %r10_0 = 0
2470: %r11_1 = 0
2474: %r10_0 = MC0_RD_STR_DLY_0
247c: %r10_1 = 0x110f0f0f
2484: call 0x04b8
2488: %r10_0 = MC0_RD_STR_DLY_1
2490: %r10_1 = 0x0f100f0e
2498: call 0x04b8
249c: %r10_0 = MC1_RD_STR_DLY_0
24a4: %r10_1 = 0x0a0b0d09
24ac: call 0x04b8
24b0: %r10_0 = MC1_RD_STR_DLY_1
24b8: %r10_1 = 0x0f0d0d0d
24c0: call 0x04b8
24c4: jmp 0x27a0 v
24c8: store_word %r10_0, 0xe40015e0
24cc: %r12_0 = *(0xe40015ec)
24d0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
24d8: beq %r10_0, 1 -> 0x24e4 v
24dc: %r10_0 = *(0xe40015e0)
24e0: jmp 0x2540 v
24e4: %r10_0 = *(0xe40015e0)
24e8: %r10_0 = 0
24ec: %r11_1 = 0
24f0: %r10_0 = MC0_RD_STR_DLY_0
24f8: %r10_1 = 0x0a0a0a0a
2500: call 0x04b8
2504: %r10_0 = MC0_RD_STR_DLY_1
250c: %r10_1 = 0x0a0a0a0a
2514: call 0x04b8
2518: %r10_0 = MC1_RD_STR_DLY_0
2520: %r10_1 = 0x0a0a0a0a
2528: call 0x04b8
252c: %r10_0 = MC1_RD_STR_DLY_1
2534: %r10_1 = 0x0a0a0a0a
253c: call 0x04b8
2540: store_word %r10_0, 0xe40015e0
2544: %r12_0 = *(0xe40015ec)
2548: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2550: beq %r10_0, 2 -> 0x255c v
2554: %r10_0 = *(0xe40015e0)
2558: jmp 0x25d8 v
255c: %r10_0 = *(0xe40015e0)
2560: store_word %r10_0, 0xe40015e0
2564: %r12_0 = *(0xe40015ec)
2568: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2570: beq %r10_0, 3 -> 0x257c v
2574: %r10_0 = *(0xe40015e0)
2578: jmp 0x25d8 v
257c: %r10_0 = *(0xe40015e0)
2580: %r10_0 = 0
2584: %r11_1 = 0
2588: %r10_0 = MC0_RD_STR_DLY_0
2590: %r10_1 = 0x0a0a0a0a
2598: call 0x04b8
259c: %r10_0 = MC0_RD_STR_DLY_1
25a4: %r10_1 = 0x0a0a0a0a
25ac: call 0x04b8
25b0: %r10_0 = MC1_RD_STR_DLY_0
25b8: %r10_1 = 0x0a0a0a0a
25c0: call 0x04b8
25c4: %r10_0 = MC1_RD_STR_DLY_1
25cc: %r10_1 = 0x0a0a0a0a
25d4: call 0x04b8
25d8: store_word %r10_0, 0xe40015e0
25dc: %r12_0 = *(0xe40015ec)
25e0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
25e8: beq %r10_0, 2 -> 0x25f4 v
25ec: %r10_0 = *(0xe40015e0)
25f0: jmp 0x2670 v
25f4: %r10_0 = *(0xe40015e0)
25f8: store_word %r10_0, 0xe40015e0
25fc: %r12_0 = *(0xe40015ec)
2600: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2608: beq %r10_0, 4 -> 0x2614 v
260c: %r10_0 = *(0xe40015e0)
2610: jmp 0x2670 v
2614: %r10_0 = *(0xe40015e0)
2618: %r10_0 = 0
261c: %r11_1 = 0
2620: %r10_0 = MC0_RD_STR_DLY_0
2628: %r10_1 = 0x0a0a0a0a
2630: call 0x04b8
2634: %r10_0 = MC0_RD_STR_DLY_1
263c: %r10_1 = 0x0a0a0a0a
2644: call 0x04b8
2648: %r10_0 = MC1_RD_STR_DLY_0
2650: %r10_1 = 0x0a0a0a0a
2658: call 0x04b8
265c: %r10_0 = MC1_RD_STR_DLY_1
2664: %r10_1 = 0x0a0a0a0a
266c: call 0x04b8
2670: store_word %r10_0, 0xe40015e0
2674: %r12_0 = *(0xe40015ec)
2678: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2680: beq %r10_0, 6 -> 0x268c v
2684: %r10_0 = *(0xe40015e0)
2688: jmp 0x2708 v
268c: %r10_0 = *(0xe40015e0)
2690: store_word %r10_0, 0xe40015e0
2694: %r12_0 = *(0xe40015ec)
2698: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
26a0: beq %r10_0, 1 -> 0x26ac v
26a4: %r10_0 = *(0xe40015e0)
26a8: jmp 0x2708 v
26ac: %r10_0 = *(0xe40015e0)
26b0: %r10_0 = 0
26b4: %r11_1 = 0
26b8: %r10_0 = MC0_RD_STR_DLY_0
26c0: %r10_1 = 0x0d0d0d0d
26c8: call 0x04b8
26cc: %r10_0 = MC0_RD_STR_DLY_1
26d4: %r10_1 = 0x0d0d0d0d
26dc: call 0x04b8
26e0: %r10_0 = MC1_RD_STR_DLY_0
26e8: %r10_1 = 0x0d0d0d0d
26f0: call 0x04b8
26f4: %r10_0 = MC1_RD_STR_DLY_1
26fc: %r10_1 = 0x0e0d0d0d
2704: call 0x04b8
2708: store_word %r10_0, 0xe40015e0
270c: %r12_0 = *(0xe40015ec)
2710: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2718: beq %r10_0, 6 -> 0x2724 v
271c: %r10_0 = *(0xe40015e0)
2720: jmp 0x27a0 v
2724: %r10_0 = *(0xe40015e0)
2728: store_word %r10_0, 0xe40015e0
272c: %r12_0 = *(0xe40015ec)
2730: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2738: beq %r10_0, 2 -> 0x2744 v
273c: %r10_0 = *(0xe40015e0)
2740: jmp 0x27a0 v
2744: %r10_0 = *(0xe40015e0)
2748: %r10_0 = 0
274c: %r11_1 = 0
2750: %r10_0 = MC0_RD_STR_DLY_0
2758: %r10_1 = 0x0d0d0d0d
2760: call 0x04b8
2764: %r10_0 = MC0_RD_STR_DLY_1
276c: %r10_1 = 0x0d0d0d0d
2774: call 0x04b8
2778: %r10_0 = MC1_RD_STR_DLY_0
2780: %r10_1 = 0x0d0d0d0d
2788: call 0x04b8
278c: %r10_0 = MC1_RD_STR_DLY_1
2794: %r10_1 = 0x0e0d0d0d
279c: call 0x04b8
27a0: %r10_0 = *(MC1_RD_STR_DLY_1)
27a4: sync
27a8: delay -7
27ac: store_word_0_100 0x00001605, MC0_CNTL
27b4: store_word_0_100 0x00000605, MC0_CNTL
27bc: store_word 0, 0xe4000020
27c0: %r11_1 = 0
27c4: store_word %r10_0, 0xe40015e0
27c8: %r12_0 = *(0xe40015ec)
27cc: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
27d4: beq %r10_0, 3 -> 0x27e0 v
27d8: %r10_0 = *(0xe40015e0)
27dc: jmp 0x27e8 v
27e0: %r10_0 = *(0xe40015e0)
27e4: %r11_1 = 1
27e8: store_word %r11_1, 0xe4000028
27ec: %r11_1 = and %r11_1, 0x0000000f
27f4: bne %r11_1, 0 -> 0x280c v
27f8: call 0x0c30
27fc: store_word %r11_1, 0xe4000028
2800: %r10_0 = rotlw_by_28_then_and %r11_1, 7
2804: call 0x05e4
2808: call 0x0ab8
280c: call 0x3800
2810: op_1E 0, -7
2814: store_word %r13_1, MC0_WR_STR_DLL_0
2818: op_1E 0, -7
281c: op_1E 1, -7
2820: store_word %r13_1, MC0_WR_STR_DLL_1
2824: op_1E 1, -7
2828: op_1E 2, -7
282c: store_word %r13_1, MC1_WR_STR_DLL_0
2830: op_1E 2, -7
2834: op_1E 3, -7
2838: store_word %r13_1, MC1_WR_STR_DLL_1
283c: op_1E 3, -7
2840: store_word %r10_0, 0xe40015e0
2844: %r12_0 = *(0xe40015ec)
2848: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
2850: beq %r10_0, 1 -> 0x285c v
2854: %r10_0 = *(0xe40015e0)
2858: jmp 0x29bc v
285c: %r10_0 = *(0xe40015e0)
2860: store_word %r10_0, 0xe40015e0
2864: %r12_0 = *(0xe40015ec)
2868: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2870: beq %r10_0, 1 -> 0x287c v
2874: %r10_0 = *(0xe40015e0)
2878: jmp 0x28c8 v
287c: %r10_0 = *(0xe40015e0)
2880: %r10_0 = 0
2884: %r11_1 = 1
2888: %r10_0 = MC0_WR_STR_DLL_0
2890: %r10_1 = 0
2894: call 0x04b8
2898: %r10_0 = MC0_WR_STR_DLL_1
28a0: %r10_1 = 0
28a4: call 0x04b8
28a8: %r10_0 = MC1_WR_STR_DLL_0
28b0: %r10_1 = 0
28b4: call 0x04b8
28b8: %r10_0 = MC1_WR_STR_DLL_1
28c0: %r10_1 = 0
28c4: call 0x04b8
28c8: store_word %r10_0, 0xe40015e0
28cc: %r12_0 = *(0xe40015ec)
28d0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
28d8: beq %r10_0, 2 -> 0x28e4 v
28dc: %r10_0 = *(0xe40015e0)
28e0: jmp 0x2940 v
28e4: %r10_0 = *(0xe40015e0)
28e8: %r10_0 = 0
28ec: %r11_1 = 1
28f0: %r10_0 = MC0_WR_STR_DLL_0
28f8: %r10_1 = 0x01ff0301
2900: call 0x04b8
2904: %r10_0 = MC0_WR_STR_DLL_1
290c: %r10_1 = 0x01000101
2914: call 0x04b8
2918: %r10_0 = MC1_WR_STR_DLL_0
2920: %r10_1 = 0x01020201
2928: call 0x04b8
292c: %r10_0 = MC1_WR_STR_DLL_1
2934: %r10_1 = 0x01010101
293c: call 0x04b8
2940: store_word %r10_0, 0xe40015e0
2944: %r12_0 = *(0xe40015ec)
2948: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2950: beq %r10_0, 6 -> 0x295c v
2954: %r10_0 = *(0xe40015e0)
2958: jmp 0x29b8 v
295c: %r10_0 = *(0xe40015e0)
2960: %r10_0 = 0
2964: %r11_1 = 1
2968: %r10_0 = MC0_WR_STR_DLL_0
2970: %r10_1 = 0xfafcfefe
2978: call 0x04b8
297c: %r10_0 = MC0_WR_STR_DLL_1
2984: %r10_1 = 0xfdfefdfc
298c: call 0x04b8
2990: %r10_0 = MC1_WR_STR_DLL_0
2998: %r10_1 = 0xfdfdfe00
29a0: call 0x04b8
29a4: %r10_0 = MC1_WR_STR_DLL_1
29ac: %r10_1 = 0xfffdfefd
29b4: call 0x04b8
29b8: jmp 0x30c8 v
29bc: store_word %r10_0, 0xe40015e0
29c0: %r12_0 = *(0xe40015ec)
29c4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
29cc: beq %r10_0, 2 -> 0x29d8 v
29d0: %r10_0 = *(0xe40015e0)
29d4: jmp 0x2df8 v
29d8: %r10_0 = *(0xe40015e0)
29dc: store_word %r10_0, 0xe40015e0
29e0: %r12_0 = *(0xe40015ec)
29e4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
29ec: beq %r10_0, 1 -> 0x29f8 v
29f0: %r10_0 = *(0xe40015e0)
29f4: jmp 0x2a6c v
29f8: %r10_0 = *(0xe40015e0)
29fc: store_word %r10_0, 0xe40015e0
2a00: %r12_0 = *(0xe40015ec)
2a04: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2a0c: beq %r10_0, 4 -> 0x2a18 v
2a10: %r10_0 = *(0xe40015e0)
2a14: jmp 0x2a6c v
2a18: %r10_0 = *(0xe40015e0)
2a1c: %r10_0 = 0
2a20: %r11_1 = 1
2a24: %r10_0 = MC0_WR_STR_DLL_0
2a2c: %r10_1 = 0
2a30: call 0x04b8
2a34: %r10_0 = MC0_WR_STR_DLL_1
2a3c: %r10_1 = 0
2a40: call 0x04b8
2a44: %r10_0 = MC1_WR_STR_DLL_0
2a4c: %r10_1 = 0xfdfe00fe
2a54: call 0x04b8
2a58: %r10_0 = MC1_WR_STR_DLL_1
2a60: %r10_1 = 0xff00fffe
2a68: call 0x04b8
2a6c: store_word %r10_0, 0xe40015e0
2a70: %r12_0 = *(0xe40015ec)
2a74: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2a7c: beq %r10_0, 1 -> 0x2a88 v
2a80: %r10_0 = *(0xe40015e0)
2a84: jmp 0x2b00 v
2a88: %r10_0 = *(0xe40015e0)
2a8c: store_word %r10_0, 0xe40015e0
2a90: %r12_0 = *(0xe40015ec)
2a94: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2a9c: beq %r10_0, 0x00000009 -> 0x2aac v
2aa4: %r10_0 = *(0xe40015e0)
2aa8: jmp 0x2b00 v
2aac: %r10_0 = *(0xe40015e0)
2ab0: %r10_0 = 0
2ab4: %r11_1 = 1
2ab8: %r10_0 = MC0_WR_STR_DLL_0
2ac0: %r10_1 = 0
2ac4: call 0x04b8
2ac8: %r10_0 = MC0_WR_STR_DLL_1
2ad0: %r10_1 = 0
2ad4: call 0x04b8
2ad8: %r10_0 = MC1_WR_STR_DLL_0
2ae0: %r10_1 = 0xfdfe00fe
2ae8: call 0x04b8
2aec: %r10_0 = MC1_WR_STR_DLL_1
2af4: %r10_1 = 0xff00fffe
2afc: call 0x04b8
2b00: store_word %r10_0, 0xe40015e0
2b04: %r12_0 = *(0xe40015ec)
2b08: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2b10: beq %r10_0, 2 -> 0x2b1c v
2b14: %r10_0 = *(0xe40015e0)
2b18: jmp 0x2b98 v
2b1c: %r10_0 = *(0xe40015e0)
2b20: store_word %r10_0, 0xe40015e0
2b24: %r12_0 = *(0xe40015ec)
2b28: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2b30: beq %r10_0, 0 -> 0x2b3c v
2b34: %r10_0 = *(0xe40015e0)
2b38: jmp 0x2b98 v
2b3c: %r10_0 = *(0xe40015e0)
2b40: %r10_0 = 0
2b44: %r11_1 = 1
2b48: %r10_0 = MC0_WR_STR_DLL_0
2b50: %r10_1 = 0x00ff0202
2b58: call 0x04b8
2b5c: %r10_0 = MC0_WR_STR_DLL_1
2b64: %r10_1 = 0x01000100
2b6c: call 0x04b8
2b70: %r10_0 = MC1_WR_STR_DLL_0
2b78: %r10_1 = 0xfeff00ff
2b80: call 0x04b8
2b84: %r10_0 = MC1_WR_STR_DLL_1
2b8c: %r10_1 = 0x0201ff00
2b94: call 0x04b8
2b98: store_word %r10_0, 0xe40015e0
2b9c: %r12_0 = *(0xe40015ec)
2ba0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2ba8: beq %r10_0, 2 -> 0x2bb4 v
2bac: %r10_0 = *(0xe40015e0)
2bb0: jmp 0x2c30 v
2bb4: %r10_0 = *(0xe40015e0)
2bb8: store_word %r10_0, 0xe40015e0
2bbc: %r12_0 = *(0xe40015ec)
2bc0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2bc8: beq %r10_0, 3 -> 0x2bd4 v
2bcc: %r10_0 = *(0xe40015e0)
2bd0: jmp 0x2c30 v
2bd4: %r10_0 = *(0xe40015e0)
2bd8: %r10_0 = 0
2bdc: %r11_1 = 1
2be0: %r10_0 = MC0_WR_STR_DLL_0
2be8: %r10_1 = 0xfe030202
2bf0: call 0x04b8
2bf4: %r10_0 = MC0_WR_STR_DLL_1
2bfc: %r10_1 = 0x01000100
2c04: call 0x04b8
2c08: %r10_0 = MC1_WR_STR_DLL_0
2c10: %r10_1 = 0xfdff0000
2c18: call 0x04b8
2c1c: %r10_0 = MC1_WR_STR_DLL_1
2c24: %r10_1 = 0x00ffffff
2c2c: call 0x04b8
2c30: store_word %r10_0, 0xe40015e0
2c34: %r12_0 = *(0xe40015ec)
2c38: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2c40: beq %r10_0, 2 -> 0x2c4c v
2c44: %r10_0 = *(0xe40015e0)
2c48: jmp 0x2cc4 v
2c4c: %r10_0 = *(0xe40015e0)
2c50: store_word %r10_0, 0xe40015e0
2c54: %r12_0 = *(0xe40015ec)
2c58: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2c60: beq %r10_0, 4 -> 0x2c6c v
2c64: %r10_0 = *(0xe40015e0)
2c68: jmp 0x2cc4 v
2c6c: %r10_0 = *(0xe40015e0)
2c70: %r10_0 = 0
2c74: %r11_1 = 1
2c78: %r10_0 = MC0_WR_STR_DLL_0
2c80: %r10_1 = 0x00010000
2c88: call 0x04b8
2c8c: %r10_0 = MC0_WR_STR_DLL_1
2c94: %r10_1 = 0
2c98: call 0x04b8
2c9c: %r10_0 = MC1_WR_STR_DLL_0
2ca4: %r10_1 = 0xfdfffefe
2cac: call 0x04b8
2cb0: %r10_0 = MC1_WR_STR_DLL_1
2cb8: %r10_1 = 0x00fffeff
2cc0: call 0x04b8
2cc4: store_word %r10_0, 0xe40015e0
2cc8: %r12_0 = *(0xe40015ec)
2ccc: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2cd4: beq %r10_0, 6 -> 0x2ce0 v
2cd8: %r10_0 = *(0xe40015e0)
2cdc: jmp 0x2d5c v
2ce0: %r10_0 = *(0xe40015e0)
2ce4: store_word %r10_0, 0xe40015e0
2ce8: %r12_0 = *(0xe40015ec)
2cec: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2cf4: beq %r10_0, 1 -> 0x2d00 v
2cf8: %r10_0 = *(0xe40015e0)
2cfc: jmp 0x2d5c v
2d00: %r10_0 = *(0xe40015e0)
2d04: %r10_0 = 0
2d08: %r11_1 = 1
2d0c: %r10_0 = MC0_WR_STR_DLL_0
2d14: %r10_1 = 0xfcfafefc
2d1c: call 0x04b8
2d20: %r10_0 = MC0_WR_STR_DLL_1
2d28: %r10_1 = 0xfbfcf8f8
2d30: call 0x04b8
2d34: %r10_0 = MC1_WR_STR_DLL_0
2d3c: %r10_1 = 0xfcf9fbfc
2d44: call 0x04b8
2d48: %r10_0 = MC1_WR_STR_DLL_1
2d50: %r10_1 = 0xfcfbfafb
2d58: call 0x04b8
2d5c: store_word %r10_0, 0xe40015e0
2d60: %r12_0 = *(0xe40015ec)
2d64: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2d6c: beq %r10_0, 6 -> 0x2d78 v
2d70: %r10_0 = *(0xe40015e0)
2d74: jmp 0x2df4 v
2d78: %r10_0 = *(0xe40015e0)
2d7c: store_word %r10_0, 0xe40015e0
2d80: %r12_0 = *(0xe40015ec)
2d84: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2d8c: beq %r10_0, 2 -> 0x2d98 v
2d90: %r10_0 = *(0xe40015e0)
2d94: jmp 0x2df4 v
2d98: %r10_0 = *(0xe40015e0)
2d9c: %r10_0 = 0
2da0: %r11_1 = 1
2da4: %r10_0 = MC0_WR_STR_DLL_0
2dac: %r10_1 = 0xfcfafefc
2db4: call 0x04b8
2db8: %r10_0 = MC0_WR_STR_DLL_1
2dc0: %r10_1 = 0xfbfcf8f8
2dc8: call 0x04b8
2dcc: %r10_0 = MC1_WR_STR_DLL_0
2dd4: %r10_1 = 0xfcf9fbfc
2ddc: call 0x04b8
2de0: %r10_0 = MC1_WR_STR_DLL_1
2de8: %r10_1 = 0xfcfbfafb
2df0: call 0x04b8
2df4: jmp 0x30c8 v
2df8: store_word %r10_0, 0xe40015e0
2dfc: %r12_0 = *(0xe40015ec)
2e00: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2e08: beq %r10_0, 1 -> 0x2e14 v
2e0c: %r10_0 = *(0xe40015e0)
2e10: jmp 0x2e68 v
2e14: %r10_0 = *(0xe40015e0)
2e18: %r10_0 = 0
2e1c: %r11_1 = 1
2e20: %r10_0 = MC0_WR_STR_DLL_0
2e28: %r10_1 = 0
2e2c: call 0x04b8
2e30: %r10_0 = MC0_WR_STR_DLL_1
2e38: %r10_1 = 0
2e3c: call 0x04b8
2e40: %r10_0 = MC1_WR_STR_DLL_0
2e48: %r10_1 = 0xfdfe00fe
2e50: call 0x04b8
2e54: %r10_0 = MC1_WR_STR_DLL_1
2e5c: %r10_1 = 0xff00fffe
2e64: call 0x04b8
2e68: store_word %r10_0, 0xe40015e0
2e6c: %r12_0 = *(0xe40015ec)
2e70: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2e78: beq %r10_0, 2 -> 0x2e84 v
2e7c: %r10_0 = *(0xe40015e0)
2e80: jmp 0x2f00 v
2e84: %r10_0 = *(0xe40015e0)
2e88: store_word %r10_0, 0xe40015e0
2e8c: %r12_0 = *(0xe40015ec)
2e90: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2e98: beq %r10_0, 3 -> 0x2ea4 v
2e9c: %r10_0 = *(0xe40015e0)
2ea0: jmp 0x2f00 v
2ea4: %r10_0 = *(0xe40015e0)
2ea8: %r10_0 = 0
2eac: %r11_1 = 1
2eb0: %r10_0 = MC0_WR_STR_DLL_0
2eb8: %r10_1 = 0xfe030202
2ec0: call 0x04b8
2ec4: %r10_0 = MC0_WR_STR_DLL_1
2ecc: %r10_1 = 0x01000100
2ed4: call 0x04b8
2ed8: %r10_0 = MC1_WR_STR_DLL_0
2ee0: %r10_1 = 0xfdff0000
2ee8: call 0x04b8
2eec: %r10_0 = MC1_WR_STR_DLL_1
2ef4: %r10_1 = 0x00ffffff
2efc: call 0x04b8
2f00: store_word %r10_0, 0xe40015e0
2f04: %r12_0 = *(0xe40015ec)
2f08: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2f10: beq %r10_0, 2 -> 0x2f1c v
2f14: %r10_0 = *(0xe40015e0)
2f18: jmp 0x2f98 v
2f1c: %r10_0 = *(0xe40015e0)
2f20: store_word %r10_0, 0xe40015e0
2f24: %r12_0 = *(0xe40015ec)
2f28: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2f30: beq %r10_0, 4 -> 0x2f3c v
2f34: %r10_0 = *(0xe40015e0)
2f38: jmp 0x2f98 v
2f3c: %r10_0 = *(0xe40015e0)
2f40: %r10_0 = 0
2f44: %r11_1 = 1
2f48: %r10_0 = MC0_WR_STR_DLL_0
2f50: %r10_1 = 0xfe030202
2f58: call 0x04b8
2f5c: %r10_0 = MC0_WR_STR_DLL_1
2f64: %r10_1 = 0x01000100
2f6c: call 0x04b8
2f70: %r10_0 = MC1_WR_STR_DLL_0
2f78: %r10_1 = 0xfdff0000
2f80: call 0x04b8
2f84: %r10_0 = MC1_WR_STR_DLL_1
2f8c: %r10_1 = 0x00ffffff
2f94: call 0x04b8
2f98: store_word %r10_0, 0xe40015e0
2f9c: %r12_0 = *(0xe40015ec)
2fa0: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2fa8: beq %r10_0, 6 -> 0x2fb4 v
2fac: %r10_0 = *(0xe40015e0)
2fb0: jmp 0x3030 v
2fb4: %r10_0 = *(0xe40015e0)
2fb8: store_word %r10_0, 0xe40015e0
2fbc: %r12_0 = *(0xe40015ec)
2fc0: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
2fc8: beq %r10_0, 1 -> 0x2fd4 v
2fcc: %r10_0 = *(0xe40015e0)
2fd0: jmp 0x3030 v
2fd4: %r10_0 = *(0xe40015e0)
2fd8: %r10_0 = 0
2fdc: %r11_1 = 1
2fe0: %r10_0 = MC0_WR_STR_DLL_0
2fe8: %r10_1 = 0xfcfafefc
2ff0: call 0x04b8
2ff4: %r10_0 = MC0_WR_STR_DLL_1
2ffc: %r10_1 = 0xfbfcf8f8
3004: call 0x04b8
3008: %r10_0 = MC1_WR_STR_DLL_0
3010: %r10_1 = 0xfcf9fbfc
3018: call 0x04b8
301c: %r10_0 = MC1_WR_STR_DLL_1
3024: %r10_1 = 0xfcfbfafb
302c: call 0x04b8
3030: store_word %r10_0, 0xe40015e0
3034: %r12_0 = *(0xe40015ec)
3038: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
3040: beq %r10_0, 6 -> 0x304c v
3044: %r10_0 = *(0xe40015e0)
3048: jmp 0x30c8 v
304c: %r10_0 = *(0xe40015e0)
3050: store_word %r10_0, 0xe40015e0
3054: %r12_0 = *(0xe40015ec)
3058: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
3060: beq %r10_0, 2 -> 0x306c v
3064: %r10_0 = *(0xe40015e0)
3068: jmp 0x30c8 v
306c: %r10_0 = *(0xe40015e0)
3070: %r10_0 = 0
3074: %r11_1 = 1
3078: %r10_0 = MC0_WR_STR_DLL_0
3080: %r10_1 = 0xfcfafefc
3088: call 0x04b8
308c: %r10_0 = MC0_WR_STR_DLL_1
3094: %r10_1 = 0xfbfcf8f8
309c: call 0x04b8
30a0: %r10_0 = MC1_WR_STR_DLL_0
30a8: %r10_1 = 0xfcf9fbfc
30b0: call 0x04b8
30b4: %r10_0 = MC1_WR_STR_DLL_1
30bc: %r10_1 = 0xfcfbfafb
30c4: call 0x04b8
30c8: %r12_0 = *(MC1_WR_STR_DLL_1)
30cc: sync
30d0: delay -7
30d4: %r10_0 = load_word -4
30d8: %r10_0 = and %r11_1, 0x0000000f
30e0: bne %r11_0, 0 -> 0x31a8 v
30e4: %r12_0 = load_word -4
30e8: %r10_0 = load_word -5
30ec: %r10_0 = and %r11_0, 0x0000ffff
30f4: bgt? %r11_1, %r11_0 -> 0x310c v
30f8: %r10_0 = load_word -5
30fc: %r10_0 = rotlw_by_12_then_and %r11_0, 0x00070000
3104: %r10_0 = or %r11_1, %r11_0
3108: store_word %r11_0, 0xe4000020
310c: %r10_0 = load_word -4
3110: %r11_1 = add %r11_1, 0x00000010
3118: %r10_0 = rotlw_by_28_then_and %r11_1, 7
311c: ble %r11_0, 4 -> 0x27f8 ^
3120: %r10_0 = load_word -5
3124: %r10_0 = rotlw_by_16_then_and %r11_0, 7
3128: store_word %r10_0, 0xe40015e0
312c: %r12_0 = *(0xe40015ec)
3130: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
3138: beq %r10_0, 1 -> 0x3144 v
313c: %r10_0 = *(0xe40015e0)
3140: jmp 0x3170 v
3144: %r10_0 = *(0xe40015e0)
3148: store_word %r10_0, 0xe40015e0
314c: %r12_0 = *(0xe40015ec)
3150: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
3158: beq %r10_0, 2 -> 0x3164 v
315c: %r10_0 = *(0xe40015e0)
3160: jmp 0x316c v
3164: %r10_0 = *(0xe40015e0)
3168: %r10_0 = 1
316c: jmp 0x31a0 v
3170: store_word %r10_0, 0xe40015e0
3174: %r12_0 = *(0xe40015ec)
3178: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
3180: beq %r10_0, 2 -> 0x318c v
3184: %r10_0 = *(0xe40015e0)
3188: jmp 0x3194 v
318c: %r10_0 = *(0xe40015e0)
3190: jmp 0x31a0 v
3194: delay -7
319c: jmp 0x3194 ^
31a0: call 0x05e4
31a4: call 0x0ab8
31a8: %r10_0 = load_word -4
31ac: %r11_1 = add %r11_1, 1
31b0: %r10_0 = and %r11_1, 0x0000000f
31b8: ble %r11_0, 2 -> 0x27e8 ^
31bc: store_word %r10_0, 0xe40015e0
31c0: %r12_0 = *(0xe40015ec)
31c4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
31cc: beq %r10_0, 3 -> 0x31d8 v
31d0: %r10_0 = *(0xe40015e0)
31d4: jmp 0x31dc v
31d8: %r10_0 = *(0xe40015e0)
31dc: call 0x3df0
31e0: store_word_0_100 0, MC0_CNTL
31e4: store_word_0_100 0, MC0_POINTER
31e8: %r10_0 = load_word -6
31ec: store_word_0_100 %r10_1, MC0_DRAM_CMD
31f0: store_word_0_100 0x003c0000, MC0_DRAM_CMD
31f8: store_word_0_100 2, MC0_CNTL
31fc: store_word %r10_0, 0xe40015e0
3200: %r12_0 = *(0xe40015ec)
3204: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
320c: beq %r10_0, 6 -> 0x3218 v
3210: %r10_0 = *(0xe40015e0)
3214: jmp 0x32e0 v
3218: %r10_0 = *(0xe40015e0)
321c: store_word_0_100 0, MC0_POINTER
3220: store_word_0_100 0x062003da, MC0_DRAM_CMD
3228: store_word_0_100 0x062006da, MC0_DRAM_CMD
3230: store_word_0_100 0x062001da, MC0_DRAM_CMD
3238: store_word_0_100 0x062003e2, MC0_DRAM_CMD
3240: store_word_0_100 0x062006e2, MC0_DRAM_CMD
3248: store_word_0_100 0x062001e2, MC0_DRAM_CMD
3250: store_word_0_100 0x06200712, MC0_DRAM_CMD
3258: store_word_0_100 2, MC0_CNTL
325c: sync
3260: delay -7
3264: store_word_0_100 0, MC0_POINTER
3268: store_word_0_100 0x062003f6, MC0_DRAM_CMD
3270: store_word_0_100 0x062006f6, MC0_DRAM_CMD
3278: store_word_0_100 0x062001f6, MC0_DRAM_CMD
3280: store_word_0_100 0x062003f2, MC0_DRAM_CMD
3288: store_word_0_100 0x062006f2, MC0_DRAM_CMD
3290: store_word_0_100 0x062001f2, MC0_DRAM_CMD
3298: store_word_0_100 2, MC0_CNTL
329c: sync
32a0: delay -7
32a4: store_word_0_100 0, MC0_POINTER
32a8: store_word_0_100 0x0620038e, MC0_DRAM_CMD
32b0: store_word_0_100 0x0620068e, MC0_DRAM_CMD
32b8: store_word_0_100 0x0620018e, MC0_DRAM_CMD
32c0: store_word_0_100 0x062003b2, MC0_DRAM_CMD
32c8: store_word_0_100 0x062006b2, MC0_DRAM_CMD
32d0: store_word_0_100 0x062001b2, MC0_DRAM_CMD
32d8: store_word_0_100 2, MC0_CNTL
32dc: store_word_0_100 0, MC0_POINTER
32e0: store_word_0_100 0x00001605, MC0_CNTL
32e8: store_word_0_100 0x00000605, MC0_CNTL
32f0: %r10_0 = *(MC1_CNTL)
32f4: sync
32f8: delay -7
32fc: store_word_0_100 0, MC0_POINTER
3300: store_word_0_100 0x003c0000, MC0_DRAM_CMD
3308: store_word_0_100 2, MC0_CNTL
330c: store_word_0_100 0x00001000, MC0_CNTL
3314: store_word_0_100 0x00000605, MC0_CNTL
331c: %r10_0 = *(MC1_CNTL)
3320: sync
3324: delay -7
3328: call 0x4bf8
332c: %r10_0 = 0
3330: %r11_1 = 1
3334: %r12_0 = 3
3338: store_word 0, 0xe4000024
333c: store_word %r10_0, 0xe40015e0
3340: %r10_0 = *(0xe40015e8)
3344: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3348: bne %r10_0, 1 -> 0x3354 v
334c: %r10_0 = *(0xe40015e0)
3350: jmp 0x335c v
3354: %r10_0 = *(0xe40015e0)
3358: %r12_0 = 7
335c: call 0x3384
3360: %r10_0 = add %r11_0, 1
3364: %r11_1 = rotlw_by_1_then_and %r11_1, -2
3368: bgt? %r11_0, %r12_0 -> 0x335c ^
336c: %r12_0 = *(0xe4000024)
3370: beq %r10_0, 0 -> 0x3380 v
3374: store_word 0x0014149a, 0xe4000024
337c: call 0x0fb0
3380: jmp 0x55f4 v
3384: %r12_1 = rotlw_by_26_then_and %r11_0, 0x10000000
338c: %r10_0 = rotlw_by_6_then_and %r11_0, 0x00000080
3394: %r12_1 = add %r12_1, %r10_0
3398: %r10_0 = rotlw_by_2_then_and %r11_0, 4
339c: %r12_1 = add %r12_1, %r10_0
33a0: %r12_0 = 0x10000000
33a8: %r12_0 = rotlw_by_31_then_and %r13_0, -1
33ac: beq %r13_0, 4 -> 0x33e0 v
33b0: beq %r13_0, 0x00000080 -> 0x33a8 ^
33b8: %r13_1 = add %r12_1, %r13_0
33bc: store_word 0, %r12_1
33c0: store_word -1, %r13_1
33c4: %r10_0 = *(%r12_1)
33c8: %r10_0 = load_word -6
33cc: bne %r10_0, 0 -> 0x33d4 v
33d0: beq %r10_1, -1 -> 0x33a8 ^
33d4: %r12_0 = *(0xe4000024)
33d8: %r10_0 = or %r10_0, %r11_1
33dc: store_word %r10_0, 0xe4000024
33e0: return
33e4: call 0x4bf8
33e8: %r10_0 = 0
33ec: op_1E 0, -7
33f0: %r10_1 = 0x00001800
33f8: call 0x4d28
33fc: beq %r12_0, 0 -> 0x3404 v
3400: %r10_0 = or %r11_0, 1
3404: beq %r12_1, 0 -> 0x3410 v
3408: %r10_0 = or %r11_0, 0x00000010
3410: op_1E 0, -7
3414: op_1E 1, -7
3418: %r10_1 = 0x00001804
3420: call 0x4d28
3424: beq %r12_0, 0 -> 0x342c v
3428: %r10_0 = or %r11_0, 2
342c: beq %r12_1, 0 -> 0x3438 v
3430: %r10_0 = or %r11_0, 0x00000020
3438: op_1E 1, -7
343c: op_1E 2, -7
3440: %r10_1 = 0x00001880
3448: call 0x4d28
344c: beq %r12_0, 0 -> 0x3454 v
3450: %r10_0 = or %r11_0, 4
3454: beq %r12_1, 0 -> 0x3460 v
3458: %r10_0 = or %r11_0, 0x00000040
3460: op_1E 2, -7
3464: op_1E 3, -7
3468: %r10_1 = 0x00001884
3470: call 0x4d28
3474: beq %r12_0, 0 -> 0x3480 v
3478: %r10_0 = or %r11_0, 0x00000008
3480: beq %r12_1, 0 -> 0x348c v
3484: %r10_0 = or %r11_0, 0x00000080
348c: op_1E 3, -7
3490: return
3494: %r10_0 = 0
3498: op_1E %r11_0, -7
349c: %r12_0 = 0
34a0: %r12_1 = 0
34a4: %r12_0 = 0
34a8: op_1E %r11_0, -7
34ac: %r10_0 = add %r11_0, 1
34b0: bne %r11_0, 4 -> 0x3498 ^
34b4: %r10_0 = 0
34b8: %r13_1 = 0
34bc: store_word %r11_0, 0xe4000018
34c0: store_word_0_100 %r11_0, MC0_RD_STR_DLY_0
34c4: store_word_0_100 %r11_0, MC0_RD_STR_DLY_1
34c8: %r10_0 = *(MC1_RD_STR_DLY_1)
34cc: sync
34d0: delay -7
34d4: store_word_0_100 0x00001605, MC0_CNTL
34dc: store_word_0_100 0x00000605, MC0_CNTL
34e4: %r10_0 = 0
34e8: %r11_1 = 0
34ec: %r10_1 = 0x00001808
34f4: call 0x4f00
34f8: call 0x1068
34fc: %r10_1 = rotlw_by_0_then_and %r10_1, -1
3500: %r13_1 = or %r13_1, %r10_1
3504: %r10_1 = 0x000000ff
350c: store_word %r10_0, 0xe40015e0
3510: %r10_0 = *(0xe40015e8)
3514: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3518: bne %r10_0, 1 -> 0x3524 v
351c: %r10_0 = *(0xe40015e0)
3520: jmp 0x3540 v
3524: %r10_0 = *(0xe40015e0)
3528: %r10_0 = load_word -6
352c: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3530: %r10_1 = add %r10_1, 0x00001808
3538: call 0x4f00
353c: call 0x1068
3540: %r10_1 = rotlw_by_16_then_and %r10_1, -1
3544: %r13_1 = or %r13_1, %r10_1
3548: op_1E 0, -7
354c: call 0x5270
3550: call 0x5300
3554: store_word %r10_0, 0xe40015e0
3558: %r10_0 = *(0xe40015e8)
355c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3560: bne %r10_0, 0 -> 0x356c v
3564: %r10_0 = *(0xe40015e0)
3568: jmp 0x3574 v
356c: %r10_0 = *(0xe40015e0)
3570: call 0x11b4
3574: op_1E 0, -7
3578: %r10_0 = 0
357c: %r11_1 = 0
3580: %r10_1 = 0x0000180c
3588: call 0x4f00
358c: call 0x1068
3590: %r10_1 = rotlw_by_4_then_and %r10_1, -1
3594: %r13_1 = or %r13_1, %r10_1
3598: %r10_1 = 0x000000ff
35a0: store_word %r10_0, 0xe40015e0
35a4: %r10_0 = *(0xe40015e8)
35a8: %r10_0 = rotlw_by_30_then_and %r10_0, 1
35ac: bne %r10_0, 1 -> 0x35b8 v
35b0: %r10_0 = *(0xe40015e0)
35b4: jmp 0x35d4 v
35b8: %r10_0 = *(0xe40015e0)
35bc: %r10_0 = load_word -6
35c0: %r10_1 = rotlw_by_31_then_and %r10_1, -1
35c4: %r10_1 = add %r10_1, 0x0000180c
35cc: call 0x4f00
35d0: call 0x1068
35d4: %r10_1 = rotlw_by_20_then_and %r10_1, -1
35d8: %r13_1 = or %r13_1, %r10_1
35dc: op_1E 1, -7
35e0: call 0x5270
35e4: call 0x5300
35e8: store_word %r10_0, 0xe40015e0
35ec: %r10_0 = *(0xe40015e8)
35f0: %r10_0 = rotlw_by_31_then_and %r10_0, 1
35f4: bne %r10_0, 0 -> 0x3600 v
35f8: %r10_0 = *(0xe40015e0)
35fc: jmp 0x3608 v
3600: %r10_0 = *(0xe40015e0)
3604: call 0x11b4
3608: op_1E 1, -7
360c: %r10_0 = 0
3610: %r11_1 = 0
3614: %r10_1 = 0x00001888
361c: call 0x4f00
3620: call 0x1068
3624: %r10_1 = rotlw_by_8_then_and %r10_1, -1
3628: %r13_1 = or %r13_1, %r10_1
362c: %r10_1 = 0x000000ff
3634: store_word %r10_0, 0xe40015e0
3638: %r10_0 = *(0xe40015e8)
363c: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3640: bne %r10_0, 1 -> 0x364c v
3644: %r10_0 = *(0xe40015e0)
3648: jmp 0x3668 v
364c: %r10_0 = *(0xe40015e0)
3650: %r10_0 = load_word -6
3654: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3658: %r10_1 = add %r10_1, 0x00001888
3660: call 0x4f00
3664: call 0x1068
3668: %r10_1 = rotlw_by_24_then_and %r10_1, -1
366c: %r13_1 = or %r13_1, %r10_1
3670: op_1E 2, -7
3674: call 0x5270
3678: call 0x5300
367c: store_word %r10_0, 0xe40015e0
3680: %r10_0 = *(0xe40015e8)
3684: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3688: bne %r10_0, 0 -> 0x3694 v
368c: %r10_0 = *(0xe40015e0)
3690: jmp 0x369c v
3694: %r10_0 = *(0xe40015e0)
3698: call 0x11b4
369c: op_1E 2, -7
36a0: %r10_0 = 0
36a4: %r11_1 = 0
36a8: %r10_1 = 0x0000188c
36b0: call 0x4f00
36b4: call 0x1068
36b8: %r10_1 = rotlw_by_12_then_and %r10_1, -1
36bc: %r13_1 = or %r13_1, %r10_1
36c0: %r10_1 = 0x000000ff
36c8: store_word %r10_0, 0xe40015e0
36cc: %r10_0 = *(0xe40015e8)
36d0: %r10_0 = rotlw_by_30_then_and %r10_0, 1
36d4: bne %r10_0, 1 -> 0x36e0 v
36d8: %r10_0 = *(0xe40015e0)
36dc: jmp 0x36fc v
36e0: %r10_0 = *(0xe40015e0)
36e4: %r10_0 = load_word -6
36e8: %r10_1 = rotlw_by_31_then_and %r10_1, -1
36ec: %r10_1 = add %r10_1, 0x0000188c
36f4: call 0x4f00
36f8: call 0x1068
36fc: %r10_1 = rotlw_by_28_then_and %r10_1, -1
3700: %r13_1 = or %r13_1, %r10_1
3704: op_1E 3, -7
3708: call 0x5270
370c: call 0x5300
3710: store_word %r10_0, 0xe40015e0
3714: %r10_0 = *(0xe40015e8)
3718: %r10_0 = rotlw_by_31_then_and %r10_0, 1
371c: bne %r10_0, 0 -> 0x3728 v
3720: %r10_0 = *(0xe40015e0)
3724: jmp 0x3730 v
3728: %r10_0 = *(0xe40015e0)
372c: call 0x11b4
3730: op_1E 3, -7
3734: %r10_0 = load_word -5
3738: %r10_0 = add %r11_0, 0x01010101
3740: bne %r11_0, 0x50505050 -> 0x34bc ^
3748: %r10_0 = 0
374c: op_1E %r10_0, -7
3750: %r10_0 = rotlw_by_2_then_and %r10_0, 0x000000ff
3758: %r11_1 = add %r11_0, 0xe4001600
3760: store_word %r13_0, %r11_1
3764: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
376c: beq %r11_1, 0 -> 0x53b0 v
3770: %r10_0 = and %r12_0, 0x0000ffff
3778: %r10_0 = div %r11_0, %r11_1
377c: %r13_1 = rotlw_by_0_then_and %r11_0, 0x000000ff
3784: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
378c: beq %r11_1, 0 -> 0x53dc v
3790: %r10_0 = rotlw_by_16_then_and %r12_0, 0x0000ffff
3798: %r10_0 = div %r11_0, %r11_1
379c: %r10_0 = rotlw_by_8_then_and %r11_0, 0x0000ff00
37a4: %r13_1 = or %r13_1, %r11_0
37a8: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
37b0: beq %r11_1, 0 -> 0x5408 v
37b4: %r10_0 = and %r12_1, 0x0000ffff
37bc: %r10_0 = div %r11_0, %r11_1
37c0: %r10_0 = rotlw_by_16_then_and %r11_0, 0x00ff0000
37c8: %r13_1 = or %r13_1, %r11_0
37cc: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
37d4: beq %r11_1, 0 -> 0x5434 v
37d8: %r10_0 = rotlw_by_16_then_and %r12_1, 0x0000ffff
37e0: %r10_0 = div %r11_0, %r11_1
37e4: %r10_0 = rotlw_by_24_then_and %r11_0, 0xff000000
37ec: %r13_1 = or %r13_1, %r11_0
37f0: op_1E %r10_0, -7
37f4: %r10_0 = add %r10_0, 1
37f8: bne %r10_0, 4 -> 0x374c ^
37fc: return
3800: %r10_0 = 0
3804: op_1E %r11_0, -7
3808: %r12_0 = 0
380c: %r12_1 = 0
3810: %r12_0 = 0
3814: op_1E %r11_0, -7
3818: %r10_0 = add %r11_0, 1
381c: bne %r11_0, 4 -> 0x3804 ^
3820: store_word_0_100 0, MC0_WR_STR_DLL_0
3824: store_word_0_100 0, MC0_WR_STR_DLL_1
3828: call 0x3c28
382c: %r10_0 = 0
3830: %r13_1 = 0
3834: store_word %r11_0, 0xe4000018
3838: call 0x3c94
383c: call 0x4bf8
3840: %r10_0 = 0
3844: %r11_1 = 0
3848: %r10_1 = 0x00001808
3850: %r10_0 = load_word -3
3854: call 0x50b8
3858: call 0x1068
385c: %r10_1 = rotlw_by_0_then_and %r10_1, -1
3860: %r13_1 = or %r13_1, %r10_1
3864: %r10_1 = 0x000000ff
386c: store_word %r10_0, 0xe40015e0
3870: %r10_0 = *(0xe40015e8)
3874: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3878: bne %r10_0, 1 -> 0x3884 v
387c: %r10_0 = *(0xe40015e0)
3880: jmp 0x38a4 v
3884: %r10_0 = *(0xe40015e0)
3888: %r10_0 = load_word -6
388c: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3890: %r10_1 = add %r10_1, 0x00001808
3898: %r10_0 = load_word -3
389c: call 0x50b8
38a0: call 0x1068
38a4: %r10_1 = rotlw_by_16_then_and %r10_1, -1
38a8: %r13_1 = or %r13_1, %r10_1
38ac: op_1E 0, -7
38b0: call 0x5130
38b4: call 0x51c0
38b8: store_word %r10_0, 0xe40015e0
38bc: %r10_0 = *(0xe40015e8)
38c0: %r10_0 = rotlw_by_31_then_and %r10_0, 1
38c4: bne %r10_0, 0 -> 0x38d0 v
38c8: %r10_0 = *(0xe40015e0)
38cc: jmp 0x38d8 v
38d0: %r10_0 = *(0xe40015e0)
38d4: call 0x11b4
38d8: op_1E 0, -7
38dc: %r10_0 = 0
38e0: %r11_1 = 0
38e4: %r10_1 = 0x0000180c
38ec: %r12_0 = load_word -3
38f0: call 0x50b8
38f4: call 0x1068
38f8: %r10_1 = rotlw_by_4_then_and %r10_1, -1
38fc: %r13_1 = or %r13_1, %r10_1
3900: %r10_1 = 0x000000ff
3908: store_word %r10_0, 0xe40015e0
390c: %r10_0 = *(0xe40015e8)
3910: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3914: bne %r10_0, 1 -> 0x3920 v
3918: %r10_0 = *(0xe40015e0)
391c: jmp 0x3940 v
3920: %r10_0 = *(0xe40015e0)
3924: %r10_0 = load_word -6
3928: %r10_1 = rotlw_by_31_then_and %r10_1, -1
392c: %r10_1 = add %r10_1, 0x0000180c
3934: %r12_0 = load_word -3
3938: call 0x50b8
393c: call 0x1068
3940: %r10_1 = rotlw_by_20_then_and %r10_1, -1
3944: %r13_1 = or %r13_1, %r10_1
3948: op_1E 1, -7
394c: call 0x5130
3950: call 0x51c0
3954: store_word %r10_0, 0xe40015e0
3958: %r10_0 = *(0xe40015e8)
395c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3960: bne %r10_0, 0 -> 0x396c v
3964: %r10_0 = *(0xe40015e0)
3968: jmp 0x3974 v
396c: %r10_0 = *(0xe40015e0)
3970: call 0x11b4
3974: op_1E 1, -7
3978: %r10_0 = 0
397c: %r11_1 = 0
3980: %r10_1 = 0x00001888
3988: %r10_0 = load_word -3
398c: call 0x50b8
3990: call 0x1068
3994: %r10_1 = rotlw_by_8_then_and %r10_1, -1
3998: %r13_1 = or %r13_1, %r10_1
399c: %r10_1 = 0x000000ff
39a4: store_word %r10_0, 0xe40015e0
39a8: %r10_0 = *(0xe40015e8)
39ac: %r10_0 = rotlw_by_30_then_and %r10_0, 1
39b0: bne %r10_0, 1 -> 0x39bc v
39b4: %r10_0 = *(0xe40015e0)
39b8: jmp 0x39dc v
39bc: %r10_0 = *(0xe40015e0)
39c0: %r10_0 = load_word -6
39c4: %r10_1 = rotlw_by_31_then_and %r10_1, -1
39c8: %r10_1 = add %r10_1, 0x00001888
39d0: %r10_0 = load_word -3
39d4: call 0x50b8
39d8: call 0x1068
39dc: %r10_1 = rotlw_by_24_then_and %r10_1, -1
39e0: %r13_1 = or %r13_1, %r10_1
39e4: op_1E 2, -7
39e8: call 0x5130
39ec: call 0x51c0
39f0: store_word %r10_0, 0xe40015e0
39f4: %r10_0 = *(0xe40015e8)
39f8: %r10_0 = rotlw_by_31_then_and %r10_0, 1
39fc: bne %r10_0, 0 -> 0x3a08 v
3a00: %r10_0 = *(0xe40015e0)
3a04: jmp 0x3a10 v
3a08: %r10_0 = *(0xe40015e0)
3a0c: call 0x11b4
3a10: op_1E 2, -7
3a14: %r10_0 = 0
3a18: %r11_1 = 0
3a1c: %r10_1 = 0x0000188c
3a24: %r12_0 = load_word -3
3a28: call 0x50b8
3a2c: call 0x1068
3a30: %r10_1 = rotlw_by_12_then_and %r10_1, -1
3a34: %r13_1 = or %r13_1, %r10_1
3a38: %r10_1 = 0x000000ff
3a40: store_word %r10_0, 0xe40015e0
3a44: %r10_0 = *(0xe40015e8)
3a48: %r10_0 = rotlw_by_30_then_and %r10_0, 1
3a4c: bne %r10_0, 1 -> 0x3a58 v
3a50: %r10_0 = *(0xe40015e0)
3a54: jmp 0x3a78 v
3a58: %r10_0 = *(0xe40015e0)
3a5c: %r10_0 = load_word -6
3a60: %r10_1 = rotlw_by_31_then_and %r10_1, -1
3a64: %r10_1 = add %r10_1, 0x0000188c
3a6c: %r12_0 = load_word -3
3a70: call 0x50b8
3a74: call 0x1068
3a78: %r10_1 = rotlw_by_28_then_and %r10_1, -1
3a7c: %r13_1 = or %r13_1, %r10_1
3a80: op_1E 3, -7
3a84: call 0x5130
3a88: call 0x51c0
3a8c: store_word %r10_0, 0xe40015e0
3a90: %r10_0 = *(0xe40015e8)
3a94: %r10_0 = rotlw_by_31_then_and %r10_0, 1
3a98: bne %r10_0, 0 -> 0x3aa4 v
3a9c: %r10_0 = *(0xe40015e0)
3aa0: jmp 0x3aac v
3aa4: %r10_0 = *(0xe40015e0)
3aa8: call 0x11b4
3aac: op_1E 3, -7
3ab0: %r10_0 = load_word -5
3ab4: %r10_0 = add %r11_0, 0x01010101
3abc: bne %r11_0, 0x50505050 -> 0x3834 ^
3ac4: store_word 0x000000ff, 0xe4000024
3acc: %r10_0 = 0
3ad0: op_1E %r10_0, -7
3ad4: %r10_0 = rotlw_by_2_then_and %r10_0, 0x000000ff
3adc: %r11_1 = add %r11_0, 0xe4001610
3ae4: store_word %r13_0, %r11_1
3ae8: call 0x0be0
3aec: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
3af4: beq %r11_1, 0 -> 0x54d0 v
3af8: %r10_0 = and %r12_0, 0x0000ffff
3b00: %r10_0 = div %r11_0, %r11_1
3b04: %r13_1 = rotlw_by_0_then_and %r11_0, 0x000000ff
3b0c: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
3b14: beq %r11_1, 0 -> 0x5508 v
3b18: %r10_0 = rotlw_by_16_then_and %r12_0, 0x0000ffff
3b20: %r10_0 = div %r11_0, %r11_1
3b24: %r10_0 = rotlw_by_8_then_and %r11_0, 0x0000ff00
3b2c: %r13_1 = or %r13_1, %r11_0
3b30: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
3b38: beq %r11_1, 0 -> 0x5540 v
3b3c: %r10_0 = and %r12_1, 0x0000ffff
3b44: %r10_0 = div %r11_0, %r11_1
3b48: %r10_0 = rotlw_by_16_then_and %r11_0, 0x00ff0000
3b50: %r13_1 = or %r13_1, %r11_0
3b54: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
3b5c: beq %r11_1, 0 -> 0x5578 v
3b60: %r10_0 = rotlw_by_16_then_and %r12_1, 0x0000ffff
3b68: %r10_0 = div %r11_0, %r11_1
3b6c: %r10_0 = rotlw_by_24_then_and %r11_0, 0xff000000
3b74: %r13_1 = or %r13_1, %r11_0
3b78: op_1E %r10_0, -7
3b7c: %r10_0 = add %r10_0, 1
3b80: bne %r10_0, 4 -> 0x3ad0 ^
3b84: return
3b88: %r10_0 = *(0xe4000288)
3b8c: sync
3b90: delay -7
3b94: return
3b98: store_word 2, 0xe400028c
3b9c: %r12_0 = *(0xe400028c)
3ba0: sync
3ba4: delay -7
3ba8: store_word 0, 0xe400028c
3bac: %r12_0 = *(0xe400028c)
3bb0: sync
3bb4: delay -7
3bb8: store_word 0, 0xe4000288
3bbc: call 0x3b88
3bc0: store_word 1, 0xe4000288
3bc4: call 0x3b88
3bc8: store_word 5, 0xe4000288
3bcc: call 0x3b88
3bd0: store_word 1, 0xe4000288
3bd4: call 0x3b88
3bd8: store_word 0, 0xe4000288
3bdc: call 0x3b88
3be0: return
3be4: %r10_0 = and %r10_1, 0x000000ff
3bec: bge %r11_0, %r10_0 -> 0x3bf4 v
3bf0: %r10_0 = or %r11_0, %r11_0
3bf4: %r10_0 = rotlw_by_24_then_and %r10_1, 0x000000ff
3bfc: bge %r11_0, %r10_0 -> 0x3c04 v
3c00: %r10_0 = or %r11_0, %r11_0
3c04: %r10_0 = rotlw_by_16_then_and %r10_1, 0x000000ff
3c0c: bge %r11_0, %r10_0 -> 0x3c14 v
3c10: %r10_0 = or %r11_0, %r11_0
3c14: %r10_0 = rotlw_by_8_then_and %r10_1, 0x000000ff
3c1c: bge %r11_0, %r10_0 -> 0x3c24 v
3c20: %r10_0 = or %r11_0, %r11_0
3c24: return
3c28: %r10_0 = 0x00000050
3c30: %r10_0 = load_word -6
3c34: call 0x3be4
3c38: %r12_0 = load_word -6
3c3c: call 0x3be4
3c40: %r10_0 = load_word -6
3c44: call 0x3be4
3c48: %r12_0 = load_word -6
3c4c: call 0x3be4
3c50: %r10_1 = rotlw_by_8_then_and %r10_0, -1
3c54: %r10_0 = or %r10_0, %r10_1
3c58: %r10_1 = rotlw_by_16_then_and %r10_0, -1
3c5c: %r10_0 = or %r10_0, %r10_1
3c60: %r10_0 = load_word -6
3c64: %r10_1 = subf %r10_1, %r10_0
3c68: store_word %r10_1, MC0_WR_STR_DLL_0
3c6c: %r12_0 = load_word -6
3c70: %r10_1 = subf %r10_1, %r10_0
3c74: store_word %r10_1, MC0_WR_STR_DLL_1
3c78: %r10_0 = load_word -6
3c7c: %r10_1 = subf %r10_1, %r10_0
3c80: store_word %r10_1, MC1_WR_STR_DLL_0
3c84: %r12_0 = load_word -6
3c88: %r10_1 = subf %r10_1, %r10_0
3c8c: store_word %r10_1, MC1_WR_STR_DLL_1
3c90: return
3c94: %r10_0 = load_word -6
3c98: %r10_1 = add %r10_1, 0x01010101
3ca0: store_word %r10_1, MC0_WR_STR_DLL_0
3ca4: %r12_0 = load_word -6
3ca8: %r10_1 = add %r10_1, 0x01010101
3cb0: store_word %r10_1, MC0_WR_STR_DLL_1
3cb4: %r10_0 = load_word -6
3cb8: %r10_1 = add %r10_1, 0x01010101
3cc0: store_word %r10_1, MC1_WR_STR_DLL_0
3cc4: %r12_0 = load_word -6
3cc8: %r10_1 = add %r10_1, 0x01010101
3cd0: store_word %r10_1, MC1_WR_STR_DLL_1
3cd4: %r12_0 = *(MC1_WR_STR_DLL_1)
3cd8: sync
3cdc: delay -7
3ce0: call 0x3b98
3ce4: store_word_0_100 0, MC0_CNTL
3ce8: %r12_0 = load_word -6
3cec: %r10_1 = and %r10_1, -2
3cf0: store_word %r10_1, 0xe40002a4
3cf4: store_word_0_100 0, MC0_POINTER
3cf8: store_word_0_100 0x001c0000, MC0_DRAM_CMD
3d00: store_word_0_100 2, MC0_CNTL
3d04: %r10_0 = *(MC1_CNTL)
3d08: sync
3d0c: delay -7
3d10: %r10_1 = or %r10_1, 1
3d14: store_word %r10_1, 0xe40002a4
3d18: %r12_0 = *(0xe40002a4)
3d1c: sync
3d20: delay -7
3d24: store_word_0_100 0, MC0_POINTER
3d28: store_word_0_100 0x423c0000, MC0_DRAM_CMD
3d30: store_word_0_100 0x0c280100, MC0_DRAM_CMD
3d38: store_word_0_100 0x06200221, MC0_DRAM_CMD
3d40: %r12_0 = *(0xe4000014)
3d44: store_word_0_100 %r10_0, MC0_DRAM_CMD
3d48: %r10_0 = *(0xe4000010)
3d4c: store_word_0_100 %r10_0, MC0_DRAM_CMD
3d50: store_word %r10_0, 0xe40015e0
3d54: %r12_0 = *(0xe40015ec)
3d58: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
3d60: bne %r10_0, 1 -> 0x3d6c v
3d64: %r10_0 = *(0xe40015e0)
3d68: jmp 0x3d98 v
3d6c: %r10_0 = *(0xe40015e0)
3d70: store_word %r10_0, 0xe40015e0
3d74: %r12_0 = *(0xe40015ec)
3d78: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
3d80: beq %r10_0, 6 -> 0x3d8c v
3d84: %r10_0 = *(0xe40015e0)
3d88: jmp 0x3d98 v
3d8c: %r10_0 = *(0xe40015e0)
3d90: store_word_0_100 0x0621001b, MC0_DRAM_CMD
3d98: store_word_0_100 2, MC0_CNTL
3d9c: %r10_0 = *(MC1_CNTL)
3da0: sync
3da4: delay -7
3da8: store_word_0_100 0, MC0_POINTER
3dac: store_word_0_100 0x0c280100, MC0_DRAM_CMD
3db4: store_word_0_100 0x2f240000, MC0_DRAM_CMD
3dbc: store_word_0_100 0x2f240000, MC0_DRAM_CMD
3dc4: store_word_0_100 0x003c0000, MC0_DRAM_CMD
3dcc: store_word_0_100 2, MC0_CNTL
3dd0: store_word_0_100 0x00001605, MC0_CNTL
3dd8: store_word_0_100 0x00000605, MC0_CNTL
3de0: %r10_0 = *(MC1_CNTL)
3de4: sync
3de8: delay -7
3dec: return
3df0: store_word_0_100 0, MC0_CNTL
3df4: store_word_0_100 0, MC0_POINTER
3df8: store_word_0_100 0x00040000, MC0_DRAM_CMD
3e00: store_word_0_100 2, MC0_CNTL
3e04: %r10_0 = *(MC1_CNTL)
3e08: sync
3e0c: delay -7
3e10: call 0x3b98
3e14: store_word_0_100 0, MC0_POINTER
3e18: store_word_0_100 0x003c0000, MC0_DRAM_CMD
3e20: store_word_0_100 2, MC0_CNTL
3e24: %r10_0 = *(MC1_CNTL)
3e28: sync
3e2c: delay -7
3e30: return
3e34: store_word_0_100 0, MC0_CNTL
3e38: store_word_0_100 0, MC0_POINTER
3e3c: %r10_0 = 0
3e40: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3e44: beq %r11_1, 1 -> 0x3e4c v
3e48: %r10_0 = -1
3e4c: store_word %r11_0, MC0_DRAM_DATA
3e50: %r10_0 = xor %r11_0, -1
3e54: store_word %r11_0, MC1_DRAM_DATA
3e58: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e5c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e60: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e64: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e68: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e6c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e70: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e74: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e78: %r10_0 = 0
3e7c: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3e80: beq %r11_1, 1 -> 0x3e88 v
3e84: %r10_0 = -1
3e88: store_word %r11_0, MC0_DRAM_DATA
3e8c: %r10_0 = xor %r11_0, -1
3e90: store_word %r11_0, MC1_DRAM_DATA
3e94: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e98: store_word_0_100 %r10_0, MC0_DRAM_DATA
3e9c: %r10_0 = xor %r10_0, -1
3ea0: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ea4: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ea8: %r10_0 = xor %r10_0, -1
3eac: store_word_0_100 %r10_0, MC0_DRAM_DATA
3eb0: store_word_0_100 %r10_0, MC0_DRAM_DATA
3eb4: %r10_0 = xor %r10_0, -1
3eb8: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ebc: store_word_0_100 %r10_0, MC0_DRAM_DATA
3ec0: %r10_0 = 0x0f2c0000
3ec8: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
3ed0: %r10_0 = or %r11_0, %r11_1
3ed4: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
3edc: %r10_0 = or %r11_0, %r11_1
3ee0: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
3ee8: %r10_0 = or %r11_0, %r11_1
3eec: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
3ef4: %r10_0 = or %r11_0, %r11_1
3ef8: store_word_0_100 %r11_0, MC0_DRAM_CMD
3efc: %r10_0 = and %r11_0, 0x0003e000
3f04: %r10_0 = xor %r11_0, 0x00008000
3f0c: %r10_0 = or %r11_0, 0x012c0000
3f14: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f18: %r10_0 = xor %r11_0, 0x00008000
3f20: %r10_0 = and %r11_0, 0x0003e000
3f28: %r10_0 = or %r11_0, 0x01b00000
3f30: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
3f38: %r10_0 = or %r11_0, %r11_1
3f3c: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
3f44: %r10_0 = or %r11_0, %r11_1
3f48: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
3f50: %r10_0 = or %r11_0, %r11_1
3f54: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
3f5c: %r10_0 = or %r11_0, %r11_1
3f60: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f64: %r10_0 = or %r11_0, 0x02000000
3f6c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f70: %r10_0 = and %r11_0, 0x0003e000
3f78: %r10_0 = xor %r11_0, 0x00010000
3f80: %r10_0 = or %r11_0, 0x1f2c0000
3f88: store_word_0_100 %r11_0, MC0_DRAM_CMD
3f8c: %r10_0 = xor %r11_0, 0x00010000
3f94: %r10_0 = and %r11_0, 0x0003e000
3f9c: %r10_0 = or %r11_0, 0x1f280000
3fa4: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fa8: %r10_0 = xor %r11_0, 0x00008000
3fb0: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fb4: %r10_0 = xor %r11_0, 0x00008000
3fbc: %r10_0 = xor %r11_0, 0x00010000
3fc4: store_word_0_100 %r11_0, MC0_DRAM_CMD
3fc8: %r10_0 = xor %r11_0, 0x00010000
3fd0: store_word_0_100 2, MC0_CNTL
3fd4: store_word_0_100 0x00001605, MC0_CNTL
3fdc: store_word_0_100 0x00000605, MC0_CNTL
3fe4: %r10_1 = add %r10_1, 0x00000020
3fec: store_word_0_100 0, MC0_CNTL
3ff0: store_word_0_100 0, MC0_POINTER
3ff4: %r10_0 = 0
3ff8: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3ffc: beq %r11_1, 1 -> 0x4004 v
4000: %r10_0 = -1
4004: store_word %r11_0, MC0_DRAM_DATA
4008: %r10_0 = xor %r11_0, -1
400c: store_word %r11_0, MC1_DRAM_DATA
4010: store_word_0_100 %r10_0, MC0_DRAM_DATA
4014: store_word_0_100 %r10_0, MC0_DRAM_DATA
4018: store_word_0_100 %r10_0, MC0_DRAM_DATA
401c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4020: store_word_0_100 %r10_0, MC0_DRAM_DATA
4024: store_word_0_100 %r10_0, MC0_DRAM_DATA
4028: store_word_0_100 %r10_0, MC0_DRAM_DATA
402c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4030: %r10_0 = 0
4034: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4038: beq %r11_1, 1 -> 0x4040 v
403c: %r10_0 = -1
4040: store_word %r11_0, MC0_DRAM_DATA
4044: %r10_0 = xor %r11_0, -1
4048: store_word %r11_0, MC1_DRAM_DATA
404c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4050: store_word_0_100 %r10_0, MC0_DRAM_DATA
4054: %r10_0 = xor %r10_0, -1
4058: store_word_0_100 %r10_0, MC0_DRAM_DATA
405c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4060: %r10_0 = xor %r10_0, -1
4064: store_word_0_100 %r10_0, MC0_DRAM_DATA
4068: store_word_0_100 %r10_0, MC0_DRAM_DATA
406c: %r10_0 = xor %r10_0, -1
4070: store_word_0_100 %r10_0, MC0_DRAM_DATA
4074: store_word_0_100 %r10_0, MC0_DRAM_DATA
4078: %r10_0 = 0x0f2c0000
4080: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4088: %r10_0 = or %r11_0, %r11_1
408c: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4094: %r10_0 = or %r11_0, %r11_1
4098: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
40a0: %r10_0 = or %r11_0, %r11_1
40a4: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
40ac: %r10_0 = or %r11_0, %r11_1
40b0: store_word_0_100 %r11_0, MC0_DRAM_CMD
40b4: %r10_0 = and %r11_0, 0x0003e000
40bc: %r10_0 = xor %r11_0, 0x00008000
40c4: %r10_0 = or %r11_0, 0x012c0000
40cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
40d0: %r10_0 = xor %r11_0, 0x00008000
40d8: %r10_0 = and %r11_0, 0x0003e000
40e0: %r10_0 = or %r11_0, 0x01b00000
40e8: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
40f0: %r10_0 = or %r11_0, %r11_1
40f4: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
40fc: %r10_0 = or %r11_0, %r11_1
4100: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4108: %r10_0 = or %r11_0, %r11_1
410c: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4114: %r10_0 = or %r11_0, %r11_1
4118: store_word_0_100 %r11_0, MC0_DRAM_CMD
411c: %r10_0 = or %r11_0, 0x02000000
4124: store_word_0_100 %r11_0, MC0_DRAM_CMD
4128: %r10_0 = and %r11_0, 0x0003e000
4130: %r10_0 = xor %r11_0, 0x00010000
4138: %r10_0 = or %r11_0, 0x1f2c0000
4140: store_word_0_100 %r11_0, MC0_DRAM_CMD
4144: %r10_0 = xor %r11_0, 0x00010000
414c: %r10_0 = and %r11_0, 0x0003e000
4154: %r10_0 = or %r11_0, 0x1f280000
415c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4160: %r10_0 = xor %r11_0, 0x00008000
4168: store_word_0_100 %r11_0, MC0_DRAM_CMD
416c: %r10_0 = xor %r11_0, 0x00008000
4174: %r10_0 = xor %r11_0, 0x00010000
417c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4180: %r10_0 = xor %r11_0, 0x00010000
4188: store_word_0_100 2, MC0_CNTL
418c: store_word_0_100 0x00001605, MC0_CNTL
4194: store_word_0_100 0x00000605, MC0_CNTL
419c: %r10_1 = add %r10_1, 0x00000020
41a4: store_word_0_100 0, MC0_CNTL
41a8: store_word_0_100 0, MC0_POINTER
41ac: %r10_0 = 0
41b0: %r11_1 = rotlw_by_25_then_and %r10_1, 1
41b4: beq %r11_1, 1 -> 0x41bc v
41b8: %r10_0 = -1
41bc: store_word %r11_0, MC0_DRAM_DATA
41c0: %r10_0 = xor %r11_0, -1
41c4: store_word %r11_0, MC1_DRAM_DATA
41c8: store_word_0_100 %r10_0, MC0_DRAM_DATA
41cc: store_word_0_100 %r10_0, MC0_DRAM_DATA
41d0: store_word_0_100 %r10_0, MC0_DRAM_DATA
41d4: store_word_0_100 %r10_0, MC0_DRAM_DATA
41d8: store_word_0_100 %r10_0, MC0_DRAM_DATA
41dc: store_word_0_100 %r10_0, MC0_DRAM_DATA
41e0: store_word_0_100 %r10_0, MC0_DRAM_DATA
41e4: store_word_0_100 %r10_0, MC0_DRAM_DATA
41e8: %r10_0 = 0
41ec: %r11_1 = rotlw_by_25_then_and %r10_1, 1
41f0: beq %r11_1, 1 -> 0x41f8 v
41f4: %r10_0 = -1
41f8: store_word %r11_0, MC0_DRAM_DATA
41fc: %r10_0 = xor %r11_0, -1
4200: store_word %r11_0, MC1_DRAM_DATA
4204: store_word_0_100 %r10_0, MC0_DRAM_DATA
4208: store_word_0_100 %r10_0, MC0_DRAM_DATA
420c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4210: store_word_0_100 %r10_0, MC0_DRAM_DATA
4214: %r10_0 = xor %r10_0, -1
4218: store_word_0_100 %r10_0, MC0_DRAM_DATA
421c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4220: %r10_0 = xor %r10_0, -1
4224: store_word_0_100 %r10_0, MC0_DRAM_DATA
4228: store_word_0_100 %r10_0, MC0_DRAM_DATA
422c: %r10_0 = xor %r10_0, -1
4230: %r10_0 = 0x0f2c0000
4238: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4240: %r10_0 = or %r11_0, %r11_1
4244: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
424c: %r10_0 = or %r11_0, %r11_1
4250: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4258: %r10_0 = or %r11_0, %r11_1
425c: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4264: %r10_0 = or %r11_0, %r11_1
4268: store_word_0_100 %r11_0, MC0_DRAM_CMD
426c: %r10_0 = and %r11_0, 0x0003e000
4274: %r10_0 = xor %r11_0, 0x00008000
427c: %r10_0 = or %r11_0, 0x012c0000
4284: store_word_0_100 %r11_0, MC0_DRAM_CMD
4288: %r10_0 = xor %r11_0, 0x00008000
4290: %r10_0 = and %r11_0, 0x0003e000
4298: %r10_0 = or %r11_0, 0x01b00000
42a0: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
42a8: %r10_0 = or %r11_0, %r11_1
42ac: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
42b4: %r10_0 = or %r11_0, %r11_1
42b8: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
42c0: %r10_0 = or %r11_0, %r11_1
42c4: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
42cc: %r10_0 = or %r11_0, %r11_1
42d0: store_word_0_100 %r11_0, MC0_DRAM_CMD
42d4: %r10_0 = or %r11_0, 0x02000000
42dc: store_word_0_100 %r11_0, MC0_DRAM_CMD
42e0: %r10_0 = and %r11_0, 0x0003e000
42e8: %r10_0 = xor %r11_0, 0x00010000
42f0: %r10_0 = or %r11_0, 0x1f2c0000
42f8: store_word_0_100 %r11_0, MC0_DRAM_CMD
42fc: %r10_0 = xor %r11_0, 0x00010000
4304: %r10_0 = and %r11_0, 0x0003e000
430c: %r10_0 = or %r11_0, 0x1f280000
4314: store_word_0_100 %r11_0, MC0_DRAM_CMD
4318: %r10_0 = xor %r11_0, 0x00008000
4320: store_word_0_100 %r11_0, MC0_DRAM_CMD
4324: %r10_0 = xor %r11_0, 0x00008000
432c: %r10_0 = xor %r11_0, 0x00010000
4334: store_word_0_100 %r11_0, MC0_DRAM_CMD
4338: %r10_0 = xor %r11_0, 0x00010000
4340: store_word_0_100 2, MC0_CNTL
4344: store_word_0_100 0x00001605, MC0_CNTL
434c: store_word_0_100 0x00000605, MC0_CNTL
4354: %r10_1 = add %r10_1, 0x00000020
435c: store_word_0_100 0, MC0_CNTL
4360: store_word_0_100 0, MC0_POINTER
4364: %r10_0 = 0
4368: %r11_1 = rotlw_by_25_then_and %r10_1, 1
436c: beq %r11_1, 1 -> 0x4374 v
4370: %r10_0 = -1
4374: store_word %r11_0, MC0_DRAM_DATA
4378: %r10_0 = xor %r11_0, -1
437c: store_word %r11_0, MC1_DRAM_DATA
4380: store_word_0_100 %r10_0, MC0_DRAM_DATA
4384: store_word_0_100 %r10_0, MC0_DRAM_DATA
4388: store_word_0_100 %r10_0, MC0_DRAM_DATA
438c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4390: store_word_0_100 %r10_0, MC0_DRAM_DATA
4394: store_word_0_100 %r10_0, MC0_DRAM_DATA
4398: store_word_0_100 %r10_0, MC0_DRAM_DATA
439c: store_word_0_100 %r10_0, MC0_DRAM_DATA
43a0: %r10_0 = 0
43a4: %r11_1 = rotlw_by_25_then_and %r10_1, 1
43a8: beq %r11_1, 1 -> 0x43b0 v
43ac: %r10_0 = -1
43b0: store_word %r11_0, MC0_DRAM_DATA
43b4: %r10_0 = xor %r11_0, -1
43b8: store_word %r11_0, MC1_DRAM_DATA
43bc: store_word_0_100 %r10_0, MC0_DRAM_DATA
43c0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43c4: store_word_0_100 %r10_0, MC0_DRAM_DATA
43c8: store_word_0_100 %r10_0, MC0_DRAM_DATA
43cc: %r10_0 = xor %r10_0, -1
43d0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43d4: store_word_0_100 %r10_0, MC0_DRAM_DATA
43d8: %r10_0 = xor %r10_0, -1
43dc: store_word_0_100 %r10_0, MC0_DRAM_DATA
43e0: store_word_0_100 %r10_0, MC0_DRAM_DATA
43e4: %r10_0 = xor %r10_0, -1
43e8: %r10_0 = 0x0f2c0000
43f0: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
43f8: %r10_0 = or %r11_0, %r11_1
43fc: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4404: %r10_0 = or %r11_0, %r11_1
4408: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4410: %r10_0 = or %r11_0, %r11_1
4414: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
441c: %r10_0 = or %r11_0, %r11_1
4420: store_word_0_100 %r11_0, MC0_DRAM_CMD
4424: %r10_0 = and %r11_0, 0x0003e000
442c: %r10_0 = xor %r11_0, 0x00008000
4434: %r10_0 = or %r11_0, 0x012c0000
443c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4440: %r10_0 = xor %r11_0, 0x00008000
4448: %r10_0 = and %r11_0, 0x0003e000
4450: %r10_0 = or %r11_0, 0x01b00000
4458: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
4460: %r10_0 = or %r11_0, %r11_1
4464: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
446c: %r10_0 = or %r11_0, %r11_1
4470: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4478: %r10_0 = or %r11_0, %r11_1
447c: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4484: %r10_0 = or %r11_0, %r11_1
4488: store_word_0_100 %r11_0, MC0_DRAM_CMD
448c: %r10_0 = or %r11_0, 0x02000000
4494: store_word_0_100 %r11_0, MC0_DRAM_CMD
4498: %r10_0 = and %r11_0, 0x0003e000
44a0: %r10_0 = xor %r11_0, 0x00010000
44a8: %r10_0 = or %r11_0, 0x1f2c0000
44b0: store_word_0_100 %r11_0, MC0_DRAM_CMD
44b4: %r10_0 = xor %r11_0, 0x00010000
44bc: %r10_0 = and %r11_0, 0x0003e000
44c4: %r10_0 = or %r11_0, 0x1f280000
44cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
44d0: %r10_0 = xor %r11_0, 0x00008000
44d8: store_word_0_100 %r11_0, MC0_DRAM_CMD
44dc: %r10_0 = xor %r11_0, 0x00008000
44e4: %r10_0 = xor %r11_0, 0x00010000
44ec: store_word_0_100 %r11_0, MC0_DRAM_CMD
44f0: %r10_0 = xor %r11_0, 0x00010000
44f8: store_word_0_100 2, MC0_CNTL
44fc: store_word_0_100 0x00001605, MC0_CNTL
4504: store_word_0_100 0x00000605, MC0_CNTL
450c: %r10_1 = add %r10_1, 0x00000020
4514: store_word_0_100 0, MC0_CNTL
4518: store_word_0_100 0, MC0_POINTER
451c: %r10_0 = 0
4520: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4524: beq %r11_1, 1 -> 0x452c v
4528: %r10_0 = -1
452c: store_word %r11_0, MC0_DRAM_DATA
4530: %r10_0 = xor %r11_0, -1
4534: store_word %r11_0, MC1_DRAM_DATA
4538: store_word_0_100 %r10_0, MC0_DRAM_DATA
453c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4540: store_word_0_100 %r10_0, MC0_DRAM_DATA
4544: store_word_0_100 %r10_0, MC0_DRAM_DATA
4548: store_word_0_100 %r10_0, MC0_DRAM_DATA
454c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4550: store_word_0_100 %r10_0, MC0_DRAM_DATA
4554: store_word_0_100 %r10_0, MC0_DRAM_DATA
4558: %r10_0 = 0
455c: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4560: beq %r11_1, 1 -> 0x4568 v
4564: %r10_0 = -1
4568: store_word %r11_0, MC0_DRAM_DATA
456c: %r10_0 = xor %r11_0, -1
4570: store_word %r11_0, MC1_DRAM_DATA
4574: store_word_0_100 %r10_0, MC0_DRAM_DATA
4578: store_word_0_100 %r10_0, MC0_DRAM_DATA
457c: %r10_0 = xor %r10_0, -1
4580: store_word_0_100 %r10_0, MC0_DRAM_DATA
4584: store_word_0_100 %r10_0, MC0_DRAM_DATA
4588: %r10_0 = xor %r10_0, -1
458c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4590: store_word_0_100 %r10_0, MC0_DRAM_DATA
4594: %r10_0 = xor %r10_0, -1
4598: store_word_0_100 %r10_0, MC0_DRAM_DATA
459c: store_word_0_100 %r10_0, MC0_DRAM_DATA
45a0: %r10_0 = 0x0f2c0000
45a8: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
45b0: %r10_0 = or %r11_0, %r11_1
45b4: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
45bc: %r10_0 = or %r11_0, %r11_1
45c0: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
45c8: %r10_0 = or %r11_0, %r11_1
45cc: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
45d4: %r10_0 = or %r11_0, %r11_1
45d8: store_word_0_100 %r11_0, MC0_DRAM_CMD
45dc: %r10_0 = and %r11_0, 0x0003e000
45e4: %r10_0 = xor %r11_0, 0x00008000
45ec: %r10_0 = or %r11_0, 0x012c0000
45f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
45f8: %r10_0 = xor %r11_0, 0x00008000
4600: %r10_0 = and %r11_0, 0x0003e000
4608: %r10_0 = or %r11_0, 0x01b00000
4610: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
4618: %r10_0 = or %r11_0, %r11_1
461c: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4624: %r10_0 = or %r11_0, %r11_1
4628: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4630: %r10_0 = or %r11_0, %r11_1
4634: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
463c: %r10_0 = or %r11_0, %r11_1
4640: store_word_0_100 %r11_0, MC0_DRAM_CMD
4644: %r10_0 = or %r11_0, 0x02000000
464c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4650: %r10_0 = and %r11_0, 0x0003e000
4658: %r10_0 = xor %r11_0, 0x00010000
4660: %r10_0 = or %r11_0, 0x1f2c0000
4668: store_word_0_100 %r11_0, MC0_DRAM_CMD
466c: %r10_0 = xor %r11_0, 0x00010000
4674: %r10_0 = and %r11_0, 0x0003e000
467c: %r10_0 = or %r11_0, 0x1f280000
4684: store_word_0_100 %r11_0, MC0_DRAM_CMD
4688: %r10_0 = xor %r11_0, 0x00008000
4690: store_word_0_100 %r11_0, MC0_DRAM_CMD
4694: %r10_0 = xor %r11_0, 0x00008000
469c: %r10_0 = xor %r11_0, 0x00010000
46a4: store_word_0_100 %r11_0, MC0_DRAM_CMD
46a8: %r10_0 = xor %r11_0, 0x00010000
46b0: store_word_0_100 2, MC0_CNTL
46b4: store_word_0_100 0x00001605, MC0_CNTL
46bc: store_word_0_100 0x00000605, MC0_CNTL
46c4: %r10_1 = add %r10_1, 0x00000020
46cc: store_word_0_100 0, MC0_CNTL
46d0: store_word_0_100 0, MC0_POINTER
46d4: %r10_0 = 0
46d8: %r11_1 = rotlw_by_25_then_and %r10_1, 1
46dc: beq %r11_1, 1 -> 0x46e4 v
46e0: %r10_0 = -1
46e4: store_word %r11_0, MC0_DRAM_DATA
46e8: %r10_0 = xor %r11_0, -1
46ec: store_word %r11_0, MC1_DRAM_DATA
46f0: store_word_0_100 %r10_0, MC0_DRAM_DATA
46f4: store_word_0_100 %r10_0, MC0_DRAM_DATA
46f8: store_word_0_100 %r10_0, MC0_DRAM_DATA
46fc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4700: store_word_0_100 %r10_0, MC0_DRAM_DATA
4704: store_word_0_100 %r10_0, MC0_DRAM_DATA
4708: store_word_0_100 %r10_0, MC0_DRAM_DATA
470c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4710: %r10_0 = 0
4714: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4718: beq %r11_1, 1 -> 0x4720 v
471c: %r10_0 = -1
4720: store_word %r11_0, MC0_DRAM_DATA
4724: %r10_0 = xor %r11_0, -1
4728: store_word %r11_0, MC1_DRAM_DATA
472c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4730: store_word_0_100 %r10_0, MC0_DRAM_DATA
4734: %r10_0 = xor %r10_0, -1
4738: store_word_0_100 %r10_0, MC0_DRAM_DATA
473c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4740: %r10_0 = xor %r10_0, -1
4744: store_word_0_100 %r10_0, MC0_DRAM_DATA
4748: store_word_0_100 %r10_0, MC0_DRAM_DATA
474c: %r10_0 = xor %r10_0, -1
4750: store_word_0_100 %r10_0, MC0_DRAM_DATA
4754: store_word_0_100 %r10_0, MC0_DRAM_DATA
4758: %r10_0 = 0x0f2c0000
4760: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4768: %r10_0 = or %r11_0, %r11_1
476c: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4774: %r10_0 = or %r11_0, %r11_1
4778: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4780: %r10_0 = or %r11_0, %r11_1
4784: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
478c: %r10_0 = or %r11_0, %r11_1
4790: store_word_0_100 %r11_0, MC0_DRAM_CMD
4794: %r10_0 = and %r11_0, 0x0003e000
479c: %r10_0 = xor %r11_0, 0x00008000
47a4: %r10_0 = or %r11_0, 0x012c0000
47ac: store_word_0_100 %r11_0, MC0_DRAM_CMD
47b0: %r10_0 = xor %r11_0, 0x00008000
47b8: %r10_0 = and %r11_0, 0x0003e000
47c0: %r10_0 = or %r11_0, 0x01b00000
47c8: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
47d0: %r10_0 = or %r11_0, %r11_1
47d4: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
47dc: %r10_0 = or %r11_0, %r11_1
47e0: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
47e8: %r10_0 = or %r11_0, %r11_1
47ec: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
47f4: %r10_0 = or %r11_0, %r11_1
47f8: store_word_0_100 %r11_0, MC0_DRAM_CMD
47fc: %r10_0 = or %r11_0, 0x02000000
4804: store_word_0_100 %r11_0, MC0_DRAM_CMD
4808: %r10_0 = and %r11_0, 0x0003e000
4810: %r10_0 = xor %r11_0, 0x00010000
4818: %r10_0 = or %r11_0, 0x1f2c0000
4820: store_word_0_100 %r11_0, MC0_DRAM_CMD
4824: %r10_0 = xor %r11_0, 0x00010000
482c: %r10_0 = and %r11_0, 0x0003e000
4834: %r10_0 = or %r11_0, 0x1f280000
483c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4840: %r10_0 = xor %r11_0, 0x00008000
4848: store_word_0_100 %r11_0, MC0_DRAM_CMD
484c: %r10_0 = xor %r11_0, 0x00008000
4854: %r10_0 = xor %r11_0, 0x00010000
485c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4860: %r10_0 = xor %r11_0, 0x00010000
4868: store_word_0_100 2, MC0_CNTL
486c: store_word_0_100 0x00001605, MC0_CNTL
4874: store_word_0_100 0x00000605, MC0_CNTL
487c: %r10_1 = add %r10_1, 0x00000020
4884: store_word_0_100 0, MC0_CNTL
4888: store_word_0_100 0, MC0_POINTER
488c: %r10_0 = 0
4890: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4894: beq %r11_1, 1 -> 0x489c v
4898: %r10_0 = -1
489c: store_word %r11_0, MC0_DRAM_DATA
48a0: %r10_0 = xor %r11_0, -1
48a4: store_word %r11_0, MC1_DRAM_DATA
48a8: store_word_0_100 %r10_0, MC0_DRAM_DATA
48ac: store_word_0_100 %r10_0, MC0_DRAM_DATA
48b0: store_word_0_100 %r10_0, MC0_DRAM_DATA
48b4: store_word_0_100 %r10_0, MC0_DRAM_DATA
48b8: store_word_0_100 %r10_0, MC0_DRAM_DATA
48bc: store_word_0_100 %r10_0, MC0_DRAM_DATA
48c0: store_word_0_100 %r10_0, MC0_DRAM_DATA
48c4: store_word_0_100 %r10_0, MC0_DRAM_DATA
48c8: %r10_0 = 0
48cc: %r11_1 = rotlw_by_25_then_and %r10_1, 1
48d0: beq %r11_1, 1 -> 0x48d8 v
48d4: %r10_0 = -1
48d8: store_word %r11_0, MC0_DRAM_DATA
48dc: %r10_0 = xor %r11_0, -1
48e0: store_word %r11_0, MC1_DRAM_DATA
48e4: store_word_0_100 %r10_0, MC0_DRAM_DATA
48e8: store_word_0_100 %r10_0, MC0_DRAM_DATA
48ec: store_word_0_100 %r10_0, MC0_DRAM_DATA
48f0: store_word_0_100 %r10_0, MC0_DRAM_DATA
48f4: %r10_0 = xor %r10_0, -1
48f8: store_word_0_100 %r10_0, MC0_DRAM_DATA
48fc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4900: %r10_0 = xor %r10_0, -1
4904: store_word_0_100 %r10_0, MC0_DRAM_DATA
4908: store_word_0_100 %r10_0, MC0_DRAM_DATA
490c: %r10_0 = xor %r10_0, -1
4910: %r10_0 = 0x0f2c0000
4918: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4920: %r10_0 = or %r11_0, %r11_1
4924: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
492c: %r10_0 = or %r11_0, %r11_1
4930: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4938: %r10_0 = or %r11_0, %r11_1
493c: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4944: %r10_0 = or %r11_0, %r11_1
4948: store_word_0_100 %r11_0, MC0_DRAM_CMD
494c: %r10_0 = and %r11_0, 0x0003e000
4954: %r10_0 = xor %r11_0, 0x00008000
495c: %r10_0 = or %r11_0, 0x012c0000
4964: store_word_0_100 %r11_0, MC0_DRAM_CMD
4968: %r10_0 = xor %r11_0, 0x00008000
4970: %r10_0 = and %r11_0, 0x0003e000
4978: %r10_0 = or %r11_0, 0x01b00000
4980: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
4988: %r10_0 = or %r11_0, %r11_1
498c: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4994: %r10_0 = or %r11_0, %r11_1
4998: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
49a0: %r10_0 = or %r11_0, %r11_1
49a4: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
49ac: %r10_0 = or %r11_0, %r11_1
49b0: store_word_0_100 %r11_0, MC0_DRAM_CMD
49b4: %r10_0 = or %r11_0, 0x02000000
49bc: store_word_0_100 %r11_0, MC0_DRAM_CMD
49c0: %r10_0 = and %r11_0, 0x0003e000
49c8: %r10_0 = xor %r11_0, 0x00010000
49d0: %r10_0 = or %r11_0, 0x1f2c0000
49d8: store_word_0_100 %r11_0, MC0_DRAM_CMD
49dc: %r10_0 = xor %r11_0, 0x00010000
49e4: %r10_0 = and %r11_0, 0x0003e000
49ec: %r10_0 = or %r11_0, 0x1f280000
49f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
49f8: %r10_0 = xor %r11_0, 0x00008000
4a00: store_word_0_100 %r11_0, MC0_DRAM_CMD
4a04: %r10_0 = xor %r11_0, 0x00008000
4a0c: %r10_0 = xor %r11_0, 0x00010000
4a14: store_word_0_100 %r11_0, MC0_DRAM_CMD
4a18: %r10_0 = xor %r11_0, 0x00010000
4a20: store_word_0_100 2, MC0_CNTL
4a24: store_word_0_100 0x00001605, MC0_CNTL
4a2c: store_word_0_100 0x00000605, MC0_CNTL
4a34: %r10_1 = add %r10_1, 0x00000020
4a3c: store_word_0_100 0, MC0_CNTL
4a40: store_word_0_100 0, MC0_POINTER
4a44: %r10_0 = 0
4a48: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4a4c: beq %r11_1, 1 -> 0x4a54 v
4a50: %r10_0 = -1
4a54: store_word %r11_0, MC0_DRAM_DATA
4a58: %r10_0 = xor %r11_0, -1
4a5c: store_word %r11_0, MC1_DRAM_DATA
4a60: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a64: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a68: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a6c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a70: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a74: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a78: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a7c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4a80: %r10_0 = 0
4a84: %r11_1 = rotlw_by_25_then_and %r10_1, 1
4a88: beq %r11_1, 1 -> 0x4a90 v
4a8c: %r10_0 = -1
4a90: store_word %r11_0, MC0_DRAM_DATA
4a94: %r10_0 = xor %r11_0, -1
4a98: store_word %r11_0, MC1_DRAM_DATA
4a9c: store_word_0_100 %r10_0, MC0_DRAM_DATA
4aa0: store_word_0_100 %r10_0, MC0_DRAM_DATA
4aa4: store_word_0_100 %r10_0, MC0_DRAM_DATA
4aa8: store_word_0_100 %r10_0, MC0_DRAM_DATA
4aac: %r10_0 = xor %r10_0, -1
4ab0: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ab4: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ab8: %r10_0 = xor %r10_0, -1
4abc: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ac0: store_word_0_100 %r10_0, MC0_DRAM_DATA
4ac4: %r10_0 = xor %r10_0, -1
4ac8: %r10_0 = 0x0f2c0000
4ad0: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
4ad8: %r10_0 = or %r11_0, %r11_1
4adc: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
4ae4: %r10_0 = or %r11_0, %r11_1
4ae8: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
4af0: %r10_0 = or %r11_0, %r11_1
4af4: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
4afc: %r10_0 = or %r11_0, %r11_1
4b00: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b04: %r10_0 = and %r11_0, 0x0003e000
4b0c: %r10_0 = xor %r11_0, 0x00008000
4b14: %r10_0 = or %r11_0, 0x012c0000
4b1c: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b20: %r10_0 = xor %r11_0, 0x00008000
4b28: %r10_0 = and %r11_0, 0x0003e000
4b30: %r10_0 = or %r11_0, 0x01b00000
4b38: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
4b40: %r10_0 = or %r11_0, %r11_1
4b44: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
4b4c: %r10_0 = or %r11_0, %r11_1
4b50: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
4b58: %r10_0 = or %r11_0, %r11_1
4b5c: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
4b64: %r10_0 = or %r11_0, %r11_1
4b68: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b6c: %r10_0 = or %r11_0, 0x02000000
4b74: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b78: %r10_0 = and %r11_0, 0x0003e000
4b80: %r10_0 = xor %r11_0, 0x00010000
4b88: %r10_0 = or %r11_0, 0x1f2c0000
4b90: store_word_0_100 %r11_0, MC0_DRAM_CMD
4b94: %r10_0 = xor %r11_0, 0x00010000
4b9c: %r10_0 = and %r11_0, 0x0003e000
4ba4: %r10_0 = or %r11_0, 0x1f280000
4bac: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bb0: %r10_0 = xor %r11_0, 0x00008000
4bb8: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bbc: %r10_0 = xor %r11_0, 0x00008000
4bc4: %r10_0 = xor %r11_0, 0x00010000
4bcc: store_word_0_100 %r11_0, MC0_DRAM_CMD
4bd0: %r10_0 = xor %r11_0, 0x00010000
4bd8: store_word_0_100 2, MC0_CNTL
4bdc: store_word_0_100 0x00001605, MC0_CNTL
4be4: store_word_0_100 0x00000605, MC0_CNTL
4bec: %r10_1 = add %r10_1, 0x00000020
4bf4: return
4bf8: %r10_1 = 0x00001800
4c00: %r10_0 = 0x01800180
4c08: call 0x3e34
4c0c: %r10_0 = 0x02400240
4c14: call 0x3e34
4c18: %r10_0 = 0x04200420
4c20: call 0x3e34
4c24: %r10_0 = 0x08100810
4c2c: call 0x3e34
4c30: %r10_0 = 0x10081008
4c38: call 0x3e34
4c3c: %r10_0 = 0x20042004
4c44: call 0x3e34
4c48: %r10_0 = 0x40024002
4c50: call 0x3e34
4c54: %r10_0 = 0x80018001
4c5c: call 0x3e34
4c60: return
4c64: %r10_0 = load_word -4
4c68: %r11_1 = xor %r11_1, %r10_0
4c6c: %r12_1 = or %r12_1, %r11_1
4c70: %r10_1 = add %r10_1, 0x00000008
4c78: %r10_0 = xor %r10_0, -1
4c7c: %r10_0 = load_word -4
4c80: %r11_1 = xor %r11_1, %r10_0
4c84: %r12_1 = or %r12_1, %r11_1
4c88: %r10_1 = add %r10_1, 0x00000008
4c90: %r10_0 = xor %r10_0, -1
4c94: %r10_0 = load_word -4
4c98: %r11_1 = xor %r11_1, %r10_0
4c9c: %r12_1 = or %r12_1, %r11_1
4ca0: %r10_1 = add %r10_1, 0x00000008
4ca8: %r10_0 = xor %r10_0, -1
4cac: %r10_0 = load_word -4
4cb0: %r11_1 = xor %r11_1, %r10_0
4cb4: %r12_1 = or %r12_1, %r11_1
4cb8: %r10_1 = add %r10_1, 0x00000008
4cc0: %r10_0 = load_word -4
4cc4: %r11_1 = xor %r11_1, %r10_0
4cc8: %r12_1 = or %r12_1, %r11_1
4ccc: %r10_1 = add %r10_1, 0x00000008
4cd4: %r10_0 = xor %r10_0, -1
4cd8: %r10_0 = load_word -4
4cdc: %r11_1 = xor %r11_1, %r10_0
4ce0: %r12_1 = or %r12_1, %r11_1
4ce4: %r10_1 = add %r10_1, 0x00000008
4cec: %r10_0 = xor %r10_0, -1
4cf0: %r10_0 = load_word -4
4cf4: %r11_1 = xor %r11_1, %r10_0
4cf8: %r12_1 = or %r12_1, %r11_1
4cfc: %r10_1 = add %r10_1, 0x00000008
4d04: %r10_0 = xor %r10_0, -1
4d08: %r10_0 = load_word -4
4d0c: %r11_1 = xor %r11_1, %r10_0
4d10: %r12_1 = or %r12_1, %r11_1
4d14: %r10_1 = add %r10_1, 0x00000008
4d1c: %r10_1 = add %r10_1, 0x000000c0
4d24: return
4d28: %r12_1 = 0
4d2c: store_word_0_100 0x00001605, MC0_CNTL
4d34: store_word_0_100 0x00000605, MC0_CNTL
4d3c: %r10_0 = 0x01800180
4d44: call 0x4c64
4d48: %r10_0 = 0x02400240
4d50: call 0x4c64
4d54: %r10_0 = 0x04200420
4d5c: call 0x4c64
4d60: %r10_0 = 0x08100810
4d68: call 0x4c64
4d6c: %r10_0 = 0x10081008
4d74: call 0x4c64
4d78: %r10_0 = 0x20042004
4d80: call 0x4c64
4d84: %r10_0 = 0x40024002
4d8c: call 0x4c64
4d90: %r10_0 = 0x80018001
4d98: call 0x4c64
4d9c: %r12_0 = %r12_1
4da0: %r12_1 = 0
4da4: store_word %r10_0, 0xe40015e0
4da8: %r10_0 = *(0xe40015e8)
4dac: %r10_0 = rotlw_by_30_then_and %r10_0, 1
4db0: bne %r10_0, 1 -> 0x4dbc v
4db4: %r10_0 = *(0xe40015e0)
4db8: jmp 0x4e58 v
4dbc: %r10_0 = *(0xe40015e0)
4dc0: %r10_0 = load_word -4
4dc4: %r11_1 = rotlw_by_31_then_and %r11_1, 0x7fffffff
4dcc: %r10_1 = add %r10_1, %r11_1
4dd0: %r10_1 = subf %r10_1, 0x00000800
4dd8: store_word_0_100 0x00001605, MC0_CNTL
4de0: store_word_0_100 0x00000605, MC0_CNTL
4de8: %r10_0 = 0x01800180
4df0: call 0x4c64
4df4: %r10_0 = 0x02400240
4dfc: call 0x4c64
4e00: %r10_0 = 0x04200420
4e08: call 0x4c64
4e0c: %r10_0 = 0x08100810
4e14: call 0x4c64
4e18: %r10_0 = 0x10081008
4e20: call 0x4c64
4e24: %r10_0 = 0x20042004
4e2c: call 0x4c64
4e30: %r10_0 = 0x40024002
4e38: call 0x4c64
4e3c: %r10_0 = 0x80018001
4e44: call 0x4c64
4e48: %r10_0 = load_word -4
4e4c: %r11_1 = rotlw_by_31_then_and %r11_1, 0x7fffffff
4e54: %r10_1 = subf %r10_1, %r11_1
4e58: return
4e5c: %r10_0 = xor %r10_0, -1
4e60: %r10_0 = load_word -1
4e64: %r12_0 = xor %r13_0, %r10_0
4e68: %r12_1 = or %r12_1, %r13_0
4e6c: %r12_0 = xor %r13_0, -1
4e70: %r12_0 = or %r12_0, %r13_0
4e74: %r10_1 = add %r10_1, 0x00000008
4e7c: %r10_0 = xor %r10_0, -1
4e80: %r10_0 = load_word -1
4e84: %r12_0 = xor %r13_0, %r10_0
4e88: %r12_1 = or %r12_1, %r13_0
4e8c: %r12_0 = xor %r13_0, -1
4e90: %r12_0 = or %r12_0, %r13_0
4e94: %r10_1 = add %r10_1, 0x00000008
4e9c: %r10_0 = xor %r10_0, -1
4ea0: %r10_1 = add %r10_1, 0x00000010
4ea8: %r10_0 = xor %r10_0, -1
4eac: %r10_0 = load_word -1
4eb0: %r12_0 = xor %r13_0, %r10_0
4eb4: %r12_1 = or %r12_1, %r13_0
4eb8: %r12_0 = xor %r13_0, -1
4ebc: %r12_0 = or %r12_0, %r13_0
4ec0: %r10_1 = add %r10_1, 0x00000008
4ec8: %r10_0 = xor %r10_0, -1
4ecc: %r10_0 = load_word -1
4ed0: %r12_0 = xor %r13_0, %r10_0
4ed4: %r12_1 = or %r12_1, %r13_0
4ed8: %r12_0 = xor %r13_0, -1
4edc: %r12_0 = or %r12_0, %r13_0
4ee0: %r10_1 = add %r10_1, 0x00000008
4ee8: %r10_0 = xor %r10_0, -1
4eec: %r10_1 = add %r10_1, 0x00000010
4ef4: %r10_1 = add %r10_1, 0x000000c0
4efc: return
4f00: %r12_0 = 0
4f04: %r12_1 = 0
4f08: %r10_0 = 0x01800180
4f10: call 0x4e5c
4f14: %r10_0 = 0x02400240
4f1c: call 0x4e5c
4f20: %r10_0 = 0x04200420
4f28: call 0x4e5c
4f2c: %r10_0 = 0x08100810
4f34: call 0x4e5c
4f38: %r10_0 = 0x10081008
4f40: call 0x4e5c
4f44: %r10_0 = 0x20042004
4f4c: call 0x4e5c
4f50: %r10_0 = 0x40024002
4f58: call 0x4e5c
4f5c: %r10_0 = 0x80018001
4f64: call 0x4e5c
4f68: %r10_0 = or %r11_0, %r12_0
4f6c: %r11_1 = or %r11_1, %r12_1
4f70: return
4f74: %r10_0 = xor %r10_0, -1
4f78: %r10_0 = load_word -1
4f7c: %r12_0 = xor %r13_0, %r10_0
4f80: %r12_1 = or %r12_1, %r13_0
4f84: %r12_0 = xor %r13_0, -1
4f88: %r12_0 = or %r12_0, %r13_0
4f8c: %r10_1 = add %r10_1, 0x00000008
4f94: %r10_0 = xor %r10_0, -1
4f98: %r10_0 = load_word -1
4f9c: %r12_0 = xor %r13_0, %r10_0
4fa0: %r12_1 = or %r12_1, %r13_0
4fa4: %r12_0 = xor %r13_0, -1
4fa8: %r12_0 = or %r12_0, %r13_0
4fac: %r10_1 = add %r10_1, 0x00000008
4fb4: %r10_0 = xor %r10_0, -1
4fb8: %r10_1 = add %r10_1, 0x00000010
4fc0: %r10_0 = xor %r10_0, -1
4fc4: %r10_0 = load_word -1
4fc8: %r12_0 = xor %r13_0, %r10_0
4fcc: %r12_1 = or %r12_1, %r13_0
4fd0: %r12_0 = xor %r13_0, -1
4fd4: %r12_0 = or %r12_0, %r13_0
4fd8: %r10_1 = add %r10_1, 0x00000008
4fe0: %r10_0 = xor %r10_0, -1
4fe4: %r10_0 = load_word -1
4fe8: %r12_0 = xor %r13_0, %r10_0
4fec: %r12_1 = or %r12_1, %r13_0
4ff0: %r12_0 = xor %r13_0, -1
4ff4: %r12_0 = or %r12_0, %r13_0
4ff8: %r10_1 = add %r10_1, 0x00000008
5000: %r10_0 = xor %r10_0, -1
5004: %r10_1 = add %r10_1, 0x00000010
500c: %r10_1 = add %r10_1, 0x00000008
5014: %r10_0 = xor %r10_0, -1
5018: %r10_0 = load_word -1
501c: %r12_0 = xor %r13_0, %r10_0
5020: %r12_1 = or %r12_1, %r13_0
5024: %r12_0 = xor %r13_0, -1
5028: %r12_0 = or %r12_0, %r13_0
502c: %r10_1 = add %r10_1, 0x00000008
5034: %r10_0 = xor %r10_0, -1
5038: %r10_0 = load_word -1
503c: %r12_0 = xor %r13_0, %r10_0
5040: %r12_1 = or %r12_1, %r13_0
5044: %r12_0 = xor %r13_0, -1
5048: %r12_0 = or %r12_0, %r13_0
504c: %r10_1 = add %r10_1, 0x00000008
5054: %r10_0 = xor %r10_0, -1
5058: %r10_1 = add %r10_1, 0x00000010
5060: %r10_0 = xor %r10_0, -1
5064: %r10_0 = load_word -1
5068: %r12_0 = xor %r13_0, %r10_0
506c: %r12_1 = or %r12_1, %r13_0
5070: %r12_0 = xor %r13_0, -1
5074: %r12_0 = or %r12_0, %r13_0
5078: %r10_1 = add %r10_1, 0x00000008
5080: %r10_0 = xor %r10_0, -1
5084: %r10_0 = load_word -1
5088: %r12_0 = xor %r13_0, %r10_0
508c: %r12_1 = or %r12_1, %r13_0
5090: %r12_0 = xor %r13_0, -1
5094: %r12_0 = or %r12_0, %r13_0
5098: %r10_1 = add %r10_1, 0x00000008
50a0: %r10_0 = xor %r10_0, -1
50a4: %r10_1 = add %r10_1, 0x00000010
50ac: %r10_1 = add %r10_1, 0x00000078
50b4: return
50b8: store_word %r12_0, 0xe400001c
50bc: %r12_0 = 0
50c0: %r12_1 = 0
50c4: %r10_0 = 0x01800180
50cc: call 0x4f74
50d0: %r10_0 = 0x02400240
50d8: call 0x4f74
50dc: %r10_0 = 0x04200420
50e4: call 0x4f74
50e8: %r10_0 = 0x08100810
50f0: call 0x4f74
50f4: %r10_0 = 0x10081008
50fc: call 0x4f74
5100: %r10_0 = 0x20042004
5108: call 0x4f74
510c: %r10_0 = 0x40024002
5114: call 0x4f74
5118: %r10_0 = 0x80018001
5120: call 0x4f74
5124: %r10_0 = or %r11_0, %r12_0
5128: %r11_1 = or %r11_1, %r12_1
512c: return
5130: %r10_0 = and %r11_1, 0x000000ff
5138: bne %r10_0, 0 -> 0x5150 v
513c: %r12_0 = *(0xe400001c)
5140: %r10_0 = and %r10_0, 0x000000ff
5148: %r12_0 = add %r12_0, %r10_0
514c: %r12_0 = add %r13_0, 1
5150: %r10_0 = and %r11_1, 0x0000ff00
5158: bne %r10_0, 0 -> 0x5174 v
515c: %r12_0 = *(0xe400001c)
5160: %r10_0 = rotlw_by_8_then_and %r10_0, 0x00ff0000
5168: %r12_0 = add %r12_0, %r10_0
516c: %r12_0 = add %r13_0, 0x00000100
5174: %r10_0 = and %r11_1, 0x00ff0000
517c: bne %r10_0, 0 -> 0x5198 v
5180: %r12_0 = *(0xe400001c)
5184: %r10_0 = rotlw_by_16_then_and %r10_0, 0x000000ff
518c: %r12_1 = add %r12_1, %r10_0
5190: %r12_0 = add %r13_0, 0x00010000
5198: %r10_0 = and %r11_1, 0xff000000
51a0: bne %r10_0, 0 -> 0x51bc v
51a4: %r12_0 = *(0xe400001c)
51a8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x00ff0000
51b0: %r12_1 = add %r12_1, %r10_0
51b4: %r12_0 = add %r13_0, 0x01000000
51bc: return
51c0: %r10_0 = and %r11_0, 0x000000ff
51c8: bne %r10_0, 0 -> 0x51e8 v
51cc: %r12_0 = *(0xe400001c)
51d0: %r10_0 = and %r10_0, 0x000000ff
51d8: %r12_0 = add %r12_0, %r10_0
51dc: %r12_0 = subf %r12_0, 0x00000050
51e4: %r12_0 = add %r13_0, 1
51e8: %r10_0 = and %r11_0, 0x0000ff00
51f0: bne %r10_0, 0 -> 0x5214 v
51f4: %r12_0 = *(0xe400001c)
51f8: %r10_0 = rotlw_by_8_then_and %r10_0, 0x00ff0000
5200: %r12_0 = add %r12_0, %r10_0
5204: %r12_0 = subf %r12_0, 0x00500000
520c: %r12_0 = add %r13_0, 0x00000100
5214: %r10_0 = and %r11_0, 0x00ff0000
521c: bne %r10_0, 0 -> 0x5240 v
5220: %r12_0 = *(0xe400001c)
5224: %r10_0 = rotlw_by_16_then_and %r10_0, 0x000000ff
522c: %r12_1 = add %r12_1, %r10_0
5230: %r12_1 = subf %r12_1, 0x00000050
5238: %r12_0 = add %r13_0, 0x00010000
5240: %r10_0 = and %r11_0, 0xff000000
5248: bne %r10_0, 0 -> 0x526c v
524c: %r12_0 = *(0xe400001c)
5250: %r10_0 = rotlw_by_24_then_and %r10_0, 0x00ff0000
5258: %r12_1 = add %r12_1, %r10_0
525c: %r12_1 = subf %r12_1, 0x00500000
5264: %r12_0 = add %r13_0, 0x01000000
526c: return
5270: %r10_0 = and %r11_1, 0x000000ff
5278: bne %r10_0, 0 -> 0x5290 v
527c: %r10_0 = *(0xe4000018)
5280: %r10_0 = and %r10_0, 0x000000ff
5288: %r12_0 = add %r12_0, %r10_0
528c: %r12_0 = add %r13_0, 1
5290: %r10_0 = and %r11_1, 0x0000ff00
5298: bne %r10_0, 0 -> 0x52b4 v
529c: %r10_0 = *(0xe4000018)
52a0: %r10_0 = and %r10_0, 0x00ff0000
52a8: %r12_0 = add %r12_0, %r10_0
52ac: %r12_0 = add %r13_0, 0x00000100
52b4: %r10_0 = and %r11_1, 0x00ff0000
52bc: bne %r10_0, 0 -> 0x52d8 v
52c0: %r10_0 = *(0xe4000018)
52c4: %r10_0 = and %r10_0, 0x000000ff
52cc: %r12_1 = add %r12_1, %r10_0
52d0: %r12_0 = add %r13_0, 0x00010000
52d8: %r10_0 = and %r11_1, 0xff000000
52e0: bne %r10_0, 0 -> 0x52fc v
52e4: %r10_0 = *(0xe4000018)
52e8: %r10_0 = and %r10_0, 0x00ff0000
52f0: %r12_1 = add %r12_1, %r10_0
52f4: %r12_0 = add %r13_0, 0x01000000
52fc: return
5300: %r10_0 = and %r11_0, 0x000000ff
5308: bne %r10_0, 0 -> 0x5328 v
530c: %r10_0 = *(0xe4000018)
5310: %r10_0 = and %r10_0, 0x000000ff
5318: %r12_0 = add %r12_0, %r10_0
531c: %r12_0 = subf %r12_0, 0x00000050
5324: %r12_0 = add %r13_0, 1
5328: %r10_0 = and %r11_0, 0x0000ff00
5330: bne %r10_0, 0 -> 0x5354 v
5334: %r10_0 = *(0xe4000018)
5338: %r10_0 = and %r10_0, 0x00ff0000
5340: %r12_0 = add %r12_0, %r10_0
5344: %r12_0 = subf %r12_0, 0x00500000
534c: %r12_0 = add %r13_0, 0x00000100
5354: %r10_0 = and %r11_0, 0x00ff0000
535c: bne %r10_0, 0 -> 0x5380 v
5360: %r10_0 = *(0xe4000018)
5364: %r10_0 = and %r10_0, 0x000000ff
536c: %r12_1 = add %r12_1, %r10_0
5370: %r12_1 = subf %r12_1, 0x00000050
5378: %r12_0 = add %r13_0, 0x00010000
5380: %r10_0 = and %r11_0, 0xff000000
5388: bne %r10_0, 0 -> 0x53ac v
538c: %r10_0 = *(0xe4000018)
5390: %r10_0 = and %r10_0, 0x00ff0000
5398: %r12_1 = add %r12_1, %r10_0
539c: %r12_1 = subf %r12_1, 0x00500000
53a4: %r12_0 = add %r13_0, 0x01000000
53ac: return
53b0: store_word %r10_0, 0xe40015e0
53b4: %r10_0 = *(0xe40015e8)
53b8: %r10_0 = rotlw_by_31_then_and %r10_0, 1
53bc: bne %r10_0, 1 -> 0x53c8 v
53c0: %r10_0 = *(0xe40015e0)
53c4: jmp 0x53d0 v
53c8: %r10_0 = *(0xe40015e0)
53cc: jmp 0x5460 v
53d0: %r13_1 = 0x0000000a
53d8: jmp 0x3784 ^
53dc: store_word %r10_0, 0xe40015e0
53e0: %r10_0 = *(0xe40015e8)
53e4: %r10_0 = rotlw_by_31_then_and %r10_0, 1
53e8: bne %r10_0, 1 -> 0x53f4 v
53ec: %r10_0 = *(0xe40015e0)
53f0: jmp 0x53fc v
53f4: %r10_0 = *(0xe40015e0)
53f8: jmp 0x5460 v
53fc: %r13_1 = or %r13_1, 0x00000a00
5404: jmp 0x37a8 ^
5408: store_word %r10_0, 0xe40015e0
540c: %r10_0 = *(0xe40015e8)
5410: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5414: bne %r10_0, 1 -> 0x5420 v
5418: %r10_0 = *(0xe40015e0)
541c: jmp 0x5428 v
5420: %r10_0 = *(0xe40015e0)
5424: jmp 0x5460 v
5428: %r13_1 = or %r13_1, 0x000a0000
5430: jmp 0x37cc ^
5434: store_word %r10_0, 0xe40015e0
5438: %r10_0 = *(0xe40015e8)
543c: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5440: bne %r10_0, 1 -> 0x544c v
5444: %r10_0 = *(0xe40015e0)
5448: jmp 0x5454 v
544c: %r10_0 = *(0xe40015e0)
5450: jmp 0x5460 v
5454: %r13_1 = or %r13_1, 0x0a000000
545c: jmp 0x37f0 ^
5460: op_1E %r10_0, -7
5464: op_1E 0, -7
5468: call 0x1024
546c: op_1E 0, -7
5470: op_1E 1, -7
5474: call 0x1024
5478: op_1E 1, -7
547c: op_1E 2, -7
5480: call 0x1024
5484: op_1E 2, -7
5488: op_1E 3, -7
548c: call 0x1024
5490: op_1E 3, -7
5494: store_word 0x0012129a, 0xe4000024
549c: call 0x0fb0
54a0: %r10_0 = 0x0a0a0a0a
54a8: store_word_0_100 %r10_0, MC0_RD_STR_DLY_0
54ac: store_word_0_100 %r10_0, MC0_RD_STR_DLY_1
54b0: %r10_0 = 0x0f0f0f0f
54b8: store_word_0_100 %r10_0, MC0_WR_STR_DLL_0
54bc: store_word_0_100 %r10_0, MC0_WR_STR_DLL_1
54c0: %r12_0 = *(MC1_WR_STR_DLL_1)
54c4: sync
54c8: delay -7
54cc: jmp 0x31dc ^
54d0: store_word %r10_0, 0xe40015e0
54d4: %r10_0 = *(0xe40015e8)
54d8: %r10_0 = rotlw_by_31_then_and %r10_0, 1
54dc: bne %r10_0, 1 -> 0x54e8 v
54e0: %r10_0 = *(0xe40015e0)
54e4: jmp 0x54fc v
54e8: %r10_0 = *(0xe40015e0)
54ec: %r10_0 = load_word -4
54f0: %r11_1 = and %r11_1, 0x0000000f
54f8: bne %r11_1, 0 -> 0x55b0 v
54fc: %r13_1 = 0x0000000f
5504: jmp 0x3b0c ^
5508: store_word %r10_0, 0xe40015e0
550c: %r10_0 = *(0xe40015e8)
5510: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5514: bne %r10_0, 1 -> 0x5520 v
5518: %r10_0 = *(0xe40015e0)
551c: jmp 0x5534 v
5520: %r10_0 = *(0xe40015e0)
5524: %r10_0 = load_word -4
5528: %r11_1 = and %r11_1, 0x0000000f
5530: bne %r11_1, 0 -> 0x55b0 v
5534: %r13_1 = or %r13_1, 0x00000f00
553c: jmp 0x3b30 ^
5540: store_word %r10_0, 0xe40015e0
5544: %r10_0 = *(0xe40015e8)
5548: %r10_0 = rotlw_by_31_then_and %r10_0, 1
554c: bne %r10_0, 1 -> 0x5558 v
5550: %r10_0 = *(0xe40015e0)
5554: jmp 0x556c v
5558: %r10_0 = *(0xe40015e0)
555c: %r10_0 = load_word -4
5560: %r11_1 = and %r11_1, 0x0000000f
5568: bne %r11_1, 0 -> 0x55b0 v
556c: %r13_1 = or %r13_1, 0x000f0000
5574: jmp 0x3b54 ^
5578: store_word %r10_0, 0xe40015e0
557c: %r10_0 = *(0xe40015e8)
5580: %r10_0 = rotlw_by_31_then_and %r10_0, 1
5584: bne %r10_0, 1 -> 0x5590 v
5588: %r10_0 = *(0xe40015e0)
558c: jmp 0x55a4 v
5590: %r10_0 = *(0xe40015e0)
5594: %r10_0 = load_word -4
5598: %r11_1 = and %r11_1, 0x0000000f
55a0: bne %r11_1, 0 -> 0x55b0 v
55a4: %r13_1 = or %r13_1, 0x0f000000
55ac: jmp 0x3b78 ^
55b0: op_1E %r10_0, -7
55b4: op_1E 0, -7
55b8: call 0x1024
55bc: op_1E 0, -7
55c0: op_1E 1, -7
55c4: call 0x1024
55c8: op_1E 1, -7
55cc: op_1E 2, -7
55d0: call 0x1024
55d4: op_1E 2, -7
55d8: op_1E 3, -7
55dc: call 0x1024
55e0: op_1E 3, -7
55e4: store_word 0x0013139a, 0xe4000024
55ec: call 0x0fb0
55f0: jmp 0x54a0 ^
55f4: store_word 0x00000515, 0xe1020008
55fc: store_word 0x00000010, 0xe1060030
5604: %r10_0 = load_word -5
560c: %r10_0 = and %r11_0, 0xffffe3ff
5614: %r10_0 = or %r11_0, 0x00001000
561c: store_word %r11_0, 0xe1060034
5624: %r12_0 = load_word -5
5628: %r10_0 = or %r11_0, 0x08000000
5630: store_word %r11_0, 0xe1040024
5634: %r10_0 = 0x00356ca9
563c: %r10_0 = or %r10_0, 0x01000000
5644: store_word %r10_0, 0xe400001c
5648: %r10_0 = *(0xe40015e8)
564c: %r10_0 = rotlw_by_29_then_and %r10_0, 1
5650: %r10_0 = load_word -6
5654: %r10_1 = rotlw_by_30_then_and %r10_1, 1
5658: %r10_1 = rotlw_by_1_then_and %r10_1, -1
565c: %r10_0 = or %r10_0, %r10_1
5660: %r12_0 = load_word -6
5664: %r10_1 = rotlw_by_0_then_and %r10_1, 0x0000000f
566c: %r10_1 = rotlw_by_8_then_and %r10_1, -1
5670: %r10_0 = or %r10_0, %r10_1
5674: %r12_0 = load_word -6
5678: %r10_1 = rotlw_by_28_then_and %r10_1, 0x0000000f
5680: %r10_1 = rotlw_by_12_then_and %r10_1, -1
5684: %r10_0 = or %r10_0, %r10_1
5688: store_word %r10_0, 0xe4000020
568c: return
