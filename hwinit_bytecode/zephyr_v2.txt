0000: store_word 0xe0000000, 0xd0008010
0008: store_half 2, 0xd0008004
000c: %r12_0 = load_half -7
0010: sync
0014: store_word 0, 0xe0020000
001c: %r10_0 = *(0xe0020000)
0024: sync
0028: store_word 0xc0000000, 0xe0020004
0034: %r10_0 = *(0xe0020004)
003c: sync
0040: store_word 0x00000018, 0xe1020004
0048: %r12_0 = *(0xe1020004)
004c: sync
0050: store_word 0x5f076009, 0xe1010000
0058: %r10_0 = *(0xe1010010)
005c: sync
0060: store_word 0x00004000, 0xe1018020
0068: %r10_0 = *(0xe1018000)
006c: sync
0070: store_word 0xe4000000, 0xd0010010
0078: store_half 2, 0xd0010004
007c: %r12_0 = load_half -7
0080: sync
0084: %r10_1 = 0x20000000
008c: store_word %r10_1, 0xe4000284
0090: %r12_0 = *(0xe4000284)
0094: sync
0098: store_word 0, 0xe4000200
009c: store_word %r10_1, 0xe4000210
00a0: store_word %r10_1, 0xe4000244
00a4: store_word_0_100 0, MC0_CNTL
00a8: store_word 0, 0xe40002a4
00ac: %r12_0 = *(0xe40002a4)
00b0: sync
00b4: store_word 0x00020100, 0xd0000018
00bc: store_word 0xea001000, 0xd0150010
00c8: store_half 2, 0xd0150004
00d0: %r10_0 = load_half -7
00d8: sync
00dc: store_word 0x000001e6, 0xea00101c
00e4: %r10_0 = *(0xea00101c)
00ec: sync
00f0: call 0x074c
00f4: call 0x0750
00f8: store_word 0, 0xe400002c
00fc: store_word 0x00000100, 0xe400002c
0104: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
010c: store_word 0x00000012, SMC_FIFO_INBOX_DATA
0114: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
011c: %r10_0 = *(SMC_FIFO_OUTBOX_CTRL_STATUS)
0124: %r10_1 = and %r10_0, 4
0128: beq %r10_1, 0 -> 0x011c ^
012c: store_word 4, SMC_FIFO_OUTBOX_CTRL_STATUS
0134: %r10_0 = *(SMC_FIFO_OUTBOX_DATA)
013c: %r10_0 = *(SMC_FIFO_OUTBOX_DATA)
0144: store_word 0, SMC_FIFO_OUTBOX_CTRL_STATUS
014c: %r10_0 = and %r10_0, 0x000000ff
0154: %r12_0 = load_word -6
0158: %r10_1 = and %r10_1, 0xffffff00
0160: %r10_1 = or %r10_1, %r10_0
0164: store_word %r10_1, 0xe400002c
0168: call 0x0cc8
016c: store_word 0, 0xe1020004
0170: store_half 6, 0xd0008004
0174: %r12_0 = load_half -7
0178: sync
017c: delay -7
0180: store_word 0xff60ffce, 0xe1013100
0188: store_word 0, 0xe1013000
018c: store_word 0, 0xe1013200
0190: store_word 0x001d0031, 0xe1013300
0198: store_word 0x00000030, 0xe1003100
01a0: store_word 0, 0xe1003000
01a8: store_word 0, 0xe1003200
01b0: store_word 0xe0f7fd00, 0xe1003300
01bc: return
01c0: %r10_0 = load_word -3
01c4: %r12_1 = and %r12_0, 0x000000ff
01cc: %r12_0 = and %r12_0, 0xffffff00
01d4: %r12_1 = mul %r12_1, %r11_1
01d8: %r12_0 = and %r10_1, 0x000000ff
01e0: %r12_1 = add %r12_1, %r13_0
01e4: %r12_1 = and %r12_1, 0x000000ff
01ec: %r12_0 = and %r12_1, 0x00000080
01f4: beq %r13_0, 0 -> 0x01fc v
01f8: %r12_1 = 0
01fc: %r12_0 = rotlw_by_0_then_and %r11_0, -1
0200: branch_cond5 %r12_1, %r13_0 -> 0x0208 v
0204: %r12_1 = and %r13_0, -1
0208: %r12_0 = or %r12_0, %r12_1
020c: %r12_1 = and %r12_0, 0x0000ff00
0214: %r12_0 = and %r12_0, 0xffff00ff
021c: %r12_1 = mul %r12_1, %r11_1
0220: %r12_0 = and %r10_1, 0x0000ff00
0228: %r12_1 = add %r12_1, %r13_0
022c: %r12_1 = and %r12_1, 0x0000ff00
0234: %r12_0 = and %r12_1, 0x00008000
023c: beq %r13_0, 0 -> 0x0244 v
0240: %r12_1 = 0
0244: %r12_0 = rotlw_by_8_then_and %r11_0, -1
0248: branch_cond5 %r12_1, %r13_0 -> 0x0250 v
024c: %r12_1 = and %r13_0, -1
0250: %r12_0 = or %r12_0, %r12_1
0254: %r12_1 = and %r12_0, 0x00ff0000
025c: %r12_0 = and %r12_0, 0xff00ffff
0264: %r12_1 = mul %r12_1, %r11_1
0268: %r12_0 = and %r10_1, 0x00ff0000
0270: %r12_1 = add %r12_1, %r13_0
0274: %r12_1 = and %r12_1, 0x00ff0000
027c: %r12_0 = and %r12_1, 0x00800000
0284: beq %r13_0, 0 -> 0x028c v
0288: %r12_1 = 0
028c: %r12_0 = rotlw_by_16_then_and %r11_0, -1
0290: branch_cond5 %r12_1, %r13_0 -> 0x0298 v
0294: %r12_1 = and %r13_0, -1
0298: %r12_0 = or %r12_0, %r12_1
029c: %r12_1 = and %r12_0, 0xff000000
02a4: %r12_0 = and %r12_0, 0x00ffffff
02ac: %r12_1 = mul %r12_1, %r11_1
02b0: %r12_0 = and %r10_1, 0xff000000
02b8: %r12_1 = add %r12_1, %r13_0
02bc: %r12_1 = and %r12_1, 0xff000000
02c4: %r12_0 = and %r12_1, 0x80000000
02cc: beq %r13_0, 0 -> 0x02d4 v
02d0: %r12_1 = 0
02d4: %r12_0 = rotlw_by_24_then_and %r11_0, -1
02d8: branch_cond5 %r12_1, %r13_0 -> 0x02e0 v
02dc: %r12_1 = and %r13_0, -1
02e0: %r12_0 = or %r12_0, %r12_1
02e4: store_word %r12_0, %r10_0
02e8: return
02ec: store_word %r10_0, 0xe40015e0
02f0: %r12_0 = *(0xe40015ec)
02f4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
02fc: branch_cond0 %r10_0, 2 -> 0x0308 v
0300: %r10_0 = *(0xe40015e0)
0304: jmp 0x0424 v
0308: %r10_0 = *(0xe40015e0)
030c: store_word %r10_0, 0xe40015e0
0310: %r12_0 = *(0xe40015ec)
0314: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
031c: beq %r10_0, 1 -> 0x0328 v
0320: %r10_0 = *(0xe40015e0)
0324: jmp 0x0368 v
0328: %r10_0 = *(0xe40015e0)
032c: beq %r11_0, 0 -> 0x033c v
0330: beq %r11_0, 1 -> 0x0348 v
0334: beq %r11_0, 2 -> 0x0354 v
0338: beq %r11_0, 3 -> 0x0360 v
033c: %r11_1 = 0x001ff306
0344: jmp 0x0368 v
0348: %r11_1 = 0x001bb306
0350: jmp 0x0368 v
0354: %r11_1 = 0x001fa306
035c: jmp 0x0368 v
0360: %r11_1 = 0x0018f306
0368: store_word %r10_0, 0xe40015e0
036c: %r12_0 = *(0xe40015ec)
0370: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0378: beq %r10_0, 2 -> 0x0384 v
037c: %r10_0 = *(0xe40015e0)
0380: jmp 0x03c4 v
0384: %r10_0 = *(0xe40015e0)
0388: beq %r11_0, 0 -> 0x0398 v
038c: beq %r11_0, 1 -> 0x03a4 v
0390: beq %r11_0, 2 -> 0x03b0 v
0394: beq %r11_0, 3 -> 0x03bc v
0398: %r11_1 = 0x001ff306
03a0: jmp 0x03c4 v
03a4: %r11_1 = 0x001bb306
03ac: jmp 0x03c4 v
03b0: %r11_1 = 0x001fa306
03b8: jmp 0x03c4 v
03bc: %r11_1 = 0x0018f306
03c4: store_word %r10_0, 0xe40015e0
03c8: %r12_0 = *(0xe40015ec)
03cc: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
03d4: beq %r10_0, 6 -> 0x03e0 v
03d8: %r10_0 = *(0xe40015e0)
03dc: jmp 0x0420 v
03e0: %r10_0 = *(0xe40015e0)
03e4: beq %r11_0, 0 -> 0x03f4 v
03e8: beq %r11_0, 1 -> 0x0400 v
03ec: beq %r11_0, 2 -> 0x040c v
03f0: beq %r11_0, 3 -> 0x0418 v
03f4: %r11_1 = 0x001ff306
03fc: jmp 0x0420 v
0400: %r11_1 = 0x001bb306
0408: jmp 0x0420 v
040c: %r11_1 = 0x001fa306
0414: jmp 0x0420 v
0418: %r11_1 = 0x0018f306
0420: jmp 0x05d4 v
0424: store_word %r10_0, 0xe40015e0
0428: %r12_0 = *(0xe40015ec)
042c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0434: beq %r10_0, 1 -> 0x0440 v
0438: %r10_0 = *(0xe40015e0)
043c: jmp 0x0480 v
0440: %r10_0 = *(0xe40015e0)
0444: beq %r11_0, 0 -> 0x0454 v
0448: beq %r11_0, 1 -> 0x0460 v
044c: beq %r11_0, 2 -> 0x046c v
0450: beq %r11_0, 3 -> 0x0478 v
0454: %r11_1 = 0x000af306
045c: jmp 0x0480 v
0460: %r11_1 = 0x0008f306
0468: jmp 0x0480 v
046c: %r11_1 = 0x0006f306
0474: jmp 0x0480 v
0478: %r11_1 = 0x0004f306
0480: store_word %r10_0, 0xe40015e0
0484: %r12_0 = *(0xe40015ec)
0488: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0490: beq %r10_0, 2 -> 0x049c v
0494: %r10_0 = *(0xe40015e0)
0498: jmp 0x04fc v
049c: %r10_0 = *(0xe40015e0)
04a0: store_word %r10_0, 0xe40015e0
04a4: %r12_0 = *(0xe40015ec)
04a8: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
04b0: beq %r10_0, 0 -> 0x04bc v
04b4: %r10_0 = *(0xe40015e0)
04b8: jmp 0x04fc v
04bc: %r10_0 = *(0xe40015e0)
04c0: beq %r11_0, 0 -> 0x04d0 v
04c4: beq %r11_0, 1 -> 0x04dc v
04c8: beq %r11_0, 2 -> 0x04e8 v
04cc: beq %r11_0, 3 -> 0x04f4 v
04d0: %r11_1 = 0x005ff306
04d8: jmp 0x04fc v
04dc: %r11_1 = 0x005bb306
04e4: jmp 0x04fc v
04e8: %r11_1 = 0x005fa306
04f0: jmp 0x04fc v
04f4: %r11_1 = 0x0058f306
04fc: store_word %r10_0, 0xe40015e0
0500: %r12_0 = *(0xe40015ec)
0504: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
050c: beq %r10_0, 2 -> 0x0518 v
0510: %r10_0 = *(0xe40015e0)
0514: jmp 0x0578 v
0518: %r10_0 = *(0xe40015e0)
051c: store_word %r10_0, 0xe40015e0
0520: %r12_0 = *(0xe40015ec)
0524: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
052c: beq %r10_0, 3 -> 0x0538 v
0530: %r10_0 = *(0xe40015e0)
0534: jmp 0x0578 v
0538: %r10_0 = *(0xe40015e0)
053c: beq %r11_0, 0 -> 0x054c v
0540: beq %r11_0, 1 -> 0x0558 v
0544: beq %r11_0, 2 -> 0x0564 v
0548: beq %r11_0, 3 -> 0x0570 v
054c: %r11_1 = 0x005ff306
0554: jmp 0x0578 v
0558: %r11_1 = 0x005bb306
0560: jmp 0x0578 v
0564: %r11_1 = 0x005fa306
056c: jmp 0x0578 v
0570: %r11_1 = 0x005f6306
0578: store_word %r10_0, 0xe40015e0
057c: %r12_0 = *(0xe40015ec)
0580: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
0588: beq %r10_0, 6 -> 0x0594 v
058c: %r10_0 = *(0xe40015e0)
0590: jmp 0x05d4 v
0594: %r10_0 = *(0xe40015e0)
0598: beq %r11_0, 0 -> 0x05a8 v
059c: beq %r11_0, 1 -> 0x05b4 v
05a0: beq %r11_0, 2 -> 0x05c0 v
05a4: beq %r11_0, 3 -> 0x05cc v
05a8: %r11_1 = 0x00faf306
05b0: jmp 0x05d4 v
05b4: %r11_1 = 0x00faf306
05bc: jmp 0x05d4 v
05c0: %r11_1 = 0x00fef306
05c8: jmp 0x05d4 v
05cc: %r11_1 = 0x00fef306
05d4: return
05d8: %r10_0 = 0
05dc: branch_cond0 %r10_0, 5 -> 0x05ec v
05e0: store_word 0x0015159a, 0xe4000024
05e8: jmp 0x0ad0 v
05ec: %r10_0 = add %r10_0, 1
05f0: store_word_0_100 %r11_1, MC0_PAD_CAL_CNTL
05f4: %r10_0 = load_word -6
05f8: sync
05fc: delay -7
0600: %r10_1 = and %r11_1, -7
0604: store_word_0_100 %r10_1, MC0_PAD_CAL_CNTL
0608: %r10_0 = load_word -6
060c: sync
0610: delay -7
0614: store_word 0x00000200, MC0_PAD_CAL_CNTL
061c: %r10_0 = load_word -6
0620: %r10_0 = rotlw_by_20_then_and %r10_1, 0x00f00000
0628: store_word 0, MC0_PAD_CAL_CNTL
062c: %r10_0 = load_word -6
0630: %r10_1 = rotlw_by_5_then_and %r10_1, 0x00000200
0638: %r10_0 = or %r11_0, %r10_1
063c: %r10_0 = load_word -6
0640: %r10_1 = xor %r10_1, 0x0000000f
0648: %r10_1 = rotlw_by_16_then_and %r10_1, 0x000f0000
0650: %r10_0 = or %r11_0, %r10_1
0654: store_word 0x00000100, MC0_PAD_CAL_CNTL
065c: %r10_0 = load_word -6
0660: %r10_1 = rotlw_by_4_then_and %r10_1, 0x00000100
0668: %r10_0 = or %r11_0, %r10_1
066c: %r10_0 = load_word -6
0670: %r10_1 = rotlw_by_12_then_and %r10_1, 0x0000f000
0678: %r10_0 = or %r11_0, %r10_1
067c: %r10_1 = and %r11_1, 0x00fff300
0684: branch_cond0 %r10_1, %r11_0 -> 0x05dc ^
0688: store_word 0x00000200, MC1_PAD_CAL_CNTL
0690: %r10_0 = load_word -6
0694: %r10_0 = rotlw_by_20_then_and %r10_1, 0x00f00000
069c: store_word 0, MC1_PAD_CAL_CNTL
06a0: %r10_0 = load_word -6
06a4: %r10_1 = rotlw_by_5_then_and %r10_1, 0x00000200
06ac: %r10_0 = or %r11_0, %r10_1
06b0: %r10_0 = load_word -6
06b4: %r10_1 = xor %r10_1, 0x0000000f
06bc: %r10_1 = rotlw_by_16_then_and %r10_1, 0x000f0000
06c4: %r10_0 = or %r11_0, %r10_1
06c8: store_word 0x00000100, MC1_PAD_CAL_CNTL
06d0: %r10_0 = load_word -6
06d4: %r10_1 = rotlw_by_4_then_and %r10_1, 0x00000100
06dc: %r10_0 = or %r11_0, %r10_1
06e0: %r10_0 = load_word -6
06e4: %r10_1 = rotlw_by_12_then_and %r10_1, 0x0000f000
06ec: %r10_0 = or %r11_0, %r10_1
06f0: %r10_1 = and %r11_1, 0x00fff300
06f8: branch_cond0 %r10_1, %r11_0 -> 0x05dc ^
06fc: return
0700: %r12_0 = load_word -5
0704: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
070c: branch_cond2 %r11_1, %r11_0 -> 0x0714 v
0710: %r10_0 = %r11_1
0714: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
071c: branch_cond2 %r11_1, %r11_0 -> 0x0724 v
0720: %r10_0 = %r11_1
0724: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
072c: branch_cond2 %r11_1, %r11_0 -> 0x0734 v
0730: %r10_0 = %r11_1
0734: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
073c: branch_cond2 %r11_1, %r11_0 -> 0x0744 v
0740: %r10_0 = %r11_1
0744: store_word %r11_0, 0xe4000024
0748: return
074c: return
0750: return
0754: store_word 0x0010109a, 0xe4000024
075c: call 0x0ad0
0760: jmp 0x1034 v
0764: %r10_0 = *(SMC_FIFO_INBOX_CTRL_STATUS)
076c: %r10_0 = and %r10_0, 4
0770: beq %r10_0, 0 -> 0x0764 ^
0774: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
077c: store_word %r10_1, SMC_FIFO_INBOX_DATA
0784: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
078c: return
0790: beq %r10_0, 3 -> 0x0820 v
0794: beq %r10_0, 2 -> 0x07f4 v
0798: beq %r10_0, 1 -> 0x07c8 v
079c: %r10_1 = 0x000f0199
07a4: call 0x0764
07a8: delay -7
07b0: %r10_1 = 0x00000099
07b8: call 0x0764
07bc: delay -7
07c4: return
07c8: %r10_1 = 0x00010199
07d0: call 0x0764
07d4: delay -7
07dc: %r10_1 = 0x00000099
07e4: call 0x0764
07e8: delay -7
07f0: return
07f4: %r10_1 = 0x00030199
07fc: call 0x0764
0800: delay -7
0808: %r10_1 = 0x00000099
0810: call 0x0764
0814: delay -7
081c: return
0820: %r10_1 = 0x00070199
0828: call 0x0764
082c: delay -7
0834: %r10_1 = 0x00000099
083c: call 0x0764
0840: delay -7
0848: return
084c: beq %r10_0, 3 -> 0x08dc v
0850: beq %r10_0, 2 -> 0x08b0 v
0854: beq %r10_0, 1 -> 0x0884 v
0858: %r10_1 = 0x00f00199
0860: call 0x0764
0864: delay -7
086c: %r10_1 = 0x00000099
0874: call 0x0764
0878: delay -7
0880: return
0884: %r10_1 = 0x00100199
088c: call 0x0764
0890: delay -7
0898: %r10_1 = 0x00000099
08a0: call 0x0764
08a4: delay -7
08ac: return
08b0: %r10_1 = 0x00300199
08b8: call 0x0764
08bc: delay -7
08c4: %r10_1 = 0x00000099
08cc: call 0x0764
08d0: delay -7
08d8: return
08dc: %r10_1 = 0x00700199
08e4: call 0x0764
08e8: delay -7
08f0: %r10_1 = 0x00000099
08f8: call 0x0764
08fc: delay -7
0904: return
0908: beq %r10_0, 3 -> 0x0998 v
090c: beq %r10_0, 2 -> 0x096c v
0910: beq %r10_0, 1 -> 0x0940 v
0914: %r10_1 = 0x00ff0199
091c: call 0x0764
0920: delay -7
0928: %r10_1 = 0x00000099
0930: call 0x0764
0934: delay -7
093c: return
0940: %r10_1 = 0x00110199
0948: call 0x0764
094c: delay -7
0954: %r10_1 = 0x00000099
095c: call 0x0764
0960: delay -7
0968: return
096c: %r10_1 = 0x00330199
0974: call 0x0764
0978: delay -7
0980: %r10_1 = 0x00000099
0988: call 0x0764
098c: delay -7
0994: return
0998: %r10_1 = 0x00770199
09a0: call 0x0764
09a4: delay -7
09ac: %r10_1 = 0x00000099
09b4: call 0x0764
09b8: delay -7
09c0: return
09c4: %r10_1 = 1
09c8: call 0x0764
09cc: %r10_1 = 0x0000038c
09d4: call 0x0764
09d8: delay -7
09e0: %r11_1 = 0
09e4: %r10_0 = rotlw_by_26_then_and %r11_1, 3
09e8: call 0x0908
09ec: %r10_0 = rotlw_by_28_then_and %r11_1, 3
09f0: call 0x0908
09f4: %r10_0 = rotlw_by_30_then_and %r11_1, 3
09f8: call 0x0908
09fc: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0a00: call 0x0908
0a04: delay -7
0a0c: %r11_1 = 0x00000016
0a14: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0a18: call 0x084c
0a1c: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0a20: call 0x084c
0a24: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0a28: call 0x084c
0a2c: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0a30: call 0x084c
0a34: delay -7
0a3c: %r10_1 = 0x0000018c
0a44: call 0x0764
0a48: delay -7
0a50: return
0a54: call 0x09c4
0a58: %r12_0 = load_word -4
0a5c: %r11_1 = rotlw_by_24_then_and %r11_1, 0x000000ff
0a64: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0a68: call 0x0790
0a6c: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0a70: call 0x0790
0a74: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0a78: call 0x0790
0a7c: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0a80: call 0x0790
0a84: delay -7
0a8c: %r12_0 = load_word -4
0a90: %r10_0 = rotlw_by_26_then_and %r11_1, 3
0a94: call 0x084c
0a98: %r10_0 = rotlw_by_28_then_and %r11_1, 3
0a9c: call 0x084c
0aa0: %r10_0 = rotlw_by_30_then_and %r11_1, 3
0aa4: call 0x084c
0aa8: %r10_0 = rotlw_by_0_then_and %r11_1, 3
0aac: call 0x084c
0ab0: delay -7
0ab8: jmp 0x0a58 ^
0abc: call 0x09c4
0ac0: %r10_1 = 0x00ff0199
0ac8: call 0x0764
0acc: jmp 0x0acc ^
0ad0: store_word %r10_0, 0xe4000028
0ad4: %r12_0 = *(0xe400002c)
0ad8: %r10_0 = and %r10_0, 0x00000100
0ae0: beq %r10_0, 0 -> 0x0b10 v
0ae4: %r10_0 = *(SMC_FIFO_INBOX_CTRL_STATUS)
0aec: %r10_0 = and %r10_0, 4
0af0: beq %r10_0, 0 -> 0x0ae4 ^
0af4: store_word 4, SMC_FIFO_INBOX_CTRL_STATUS
0afc: %r12_0 = *(0xe4000024)
0b00: store_word %r10_0, SMC_FIFO_INBOX_DATA
0b08: store_word 0, SMC_FIFO_INBOX_CTRL_STATUS
0b10: %r10_0 = *(0xe4000028)
0b14: return
0b18: %r11_1 = rotlw_by_31_then_and %r11_1, 0x0000007f
0b20: branch_cond0 %r10_1, 0x00000016 -> 0x0b2c v
0b28: return
0b2c: %r11_1 = or %r11_1, 0x00000080
0b34: return
0b38: %r11_1 = rotlw_by_31_then_and %r11_1, 7
0b3c: %r10_0 = rotlw_by_0_then_and %r13_0, 0x000000ff
0b44: beq %r10_0, 0 -> 0x0b70 v
0b48: %r10_0 = rotlw_by_24_then_and %r13_0, 0x000000ff
0b50: beq %r10_0, 0 -> 0x0b70 v
0b54: %r10_0 = rotlw_by_16_then_and %r13_0, 0x000000ff
0b5c: beq %r10_0, 0 -> 0x0b70 v
0b60: %r10_0 = rotlw_by_8_then_and %r13_0, 0x000000ff
0b68: beq %r10_0, 0 -> 0x0b70 v
0b6c: return
0b70: %r11_1 = or %r11_1, 0x00000008
0b78: return
0b7c: %r10_1 = 0
0b80: %r10_0 = and %r12_0, 0x000000ff
0b88: branch_cond0 %r10_0, 0 -> 0x0b90 v
0b8c: %r10_1 = or %r10_1, 1
0b90: %r10_0 = and %r12_0, 0x0000ff00
0b98: branch_cond0 %r10_0, 0 -> 0x0ba0 v
0b9c: %r10_1 = or %r10_1, 2
0ba0: %r10_0 = and %r12_0, 0x00ff0000
0ba8: branch_cond0 %r10_0, 0 -> 0x0bb0 v
0bac: %r10_1 = or %r10_1, 4
0bb0: %r10_0 = and %r12_0, 0xff000000
0bb8: branch_cond0 %r10_0, 0 -> 0x0bc4 v
0bbc: %r10_1 = or %r10_1, 0x00000008
0bc4: %r10_0 = and %r12_1, 0x000000ff
0bcc: branch_cond0 %r10_0, 0 -> 0x0bd4 v
0bd0: %r10_1 = or %r10_1, 1
0bd4: %r10_0 = and %r12_1, 0x0000ff00
0bdc: branch_cond0 %r10_0, 0 -> 0x0be4 v
0be0: %r10_1 = or %r10_1, 2
0be4: %r10_0 = and %r12_1, 0x00ff0000
0bec: branch_cond0 %r10_0, 0 -> 0x0bf4 v
0bf0: %r10_1 = or %r10_1, 4
0bf4: %r10_0 = and %r12_1, 0xff000000
0bfc: branch_cond0 %r10_0, 0 -> 0x0c08 v
0c00: %r10_1 = or %r10_1, 0x00000008
0c08: return
0c0c: %r12_0 = 0
0c10: %r10_0 = and %r13_1, 0x0000000f
0c18: beq %r10_0, 0x0000000f -> 0x0c24 v
0c20: %r12_0 = or %r12_0, 1
0c24: %r10_0 = and %r13_1, 0x000000f0
0c2c: beq %r10_0, 0x000000f0 -> 0x0c38 v
0c34: %r12_0 = or %r12_0, 2
0c38: %r10_0 = and %r13_1, 0x00000f00
0c40: beq %r10_0, 0x00000f00 -> 0x0c4c v
0c48: %r12_0 = or %r12_0, 4
0c4c: %r10_0 = and %r13_1, 0x0000f000
0c54: beq %r10_0, 0x0000f000 -> 0x0c64 v
0c5c: %r12_0 = or %r12_0, 0x00000008
0c64: %r10_0 = and %r13_1, 0x000f0000
0c6c: beq %r10_0, 0x000f0000 -> 0x0c7c v
0c74: %r12_0 = or %r12_0, 0x00000010
0c7c: %r10_0 = and %r13_1, 0x00f00000
0c84: beq %r10_0, 0x00f00000 -> 0x0c94 v
0c8c: %r12_0 = or %r12_0, 0x00000020
0c94: %r10_0 = and %r13_1, 0x0f000000
0c9c: beq %r10_0, 0x0f000000 -> 0x0cac v
0ca4: %r12_0 = or %r12_0, 0x00000040
0cac: %r10_0 = and %r13_1, 0xf0000000
0cb4: beq %r10_0, 0xf0000000 -> 0x0cc4 v
0cbc: %r12_0 = or %r12_0, 0x00000080
0cc4: return
0cc8: store_word 0x20000000, 0xe1020000
0cd0: store_word 0x20000000, 0xe1040000
0cd8: store_word 0, 0xe4002800
0cdc: store_word 0x08000000, 0xe4002804
0ce4: %r12_0 = load_word -4
0ce8: %r11_1 = rotlw_by_28_then_and %r11_1, 7
0cec: branch_cond0 %r11_1, 5 -> 0x0cf8 v
0cf0: %r10_1 = 0x20003021
0cf8: branch_cond0 %r11_1, 6 -> 0x0d04 v
0cfc: %r10_1 = 0x20001011
0d04: branch_cond0 %r11_1, 7 -> 0x0d10 v
0d08: %r10_1 = 0x20003025
0d10: branch_cond0 %r11_1, 0 -> 0x0d1c v
0d14: %r10_1 = 0x20000009
0d1c: branch_cond0 %r11_1, 1 -> 0x0d28 v
0d20: %r10_1 = 0x20003029
0d28: branch_cond0 %r11_1, 2 -> 0x0d34 v
0d2c: %r10_1 = 0x20001015
0d34: branch_cond0 %r11_1, 3 -> 0x0d40 v
0d38: %r10_1 = 0x2000302d
0d40: branch_cond0 %r11_1, 4 -> 0x0d4c v
0d44: %r10_1 = 0x2000000b
0d4c: store_word %r10_1, 0xe4000210
0d50: %r10_1 = or %r10_1, 0x000c0000
0d58: store_word %r10_1, 0xe4000210
0d5c: %r10_0 = *(0xe4000210)
0d60: sync
0d64: delay -7
0d68: %r10_1 = and %r10_1, 0xdff3ffff
0d70: store_word %r10_1, 0xe4000210
0d74: store_word 0x00000200, 0xe4000200
0d7c: store_word %r10_1, 0xe4000284
0d80: %r10_1 = or %r10_1, 0x000c0000
0d88: store_word %r10_1, 0xe4000284
0d8c: %r12_0 = *(0xe4000284)
0d90: sync
0d94: delay -7
0d98: %r10_1 = and %r10_1, 0xdff3ffff
0da0: store_word %r10_1, 0xe4000284
0da4: call 0x28fc
0da8: %r10_1 = 0x20000013
0db0: store_word %r10_1, 0xe4000244
0db4: %r10_1 = or %r10_1, 0x000c0000
0dbc: store_word %r10_1, 0xe4000244
0dc0: %r12_0 = *(0xe4000244)
0dc4: sync
0dc8: delay -7
0dcc: %r10_1 = and %r10_1, 0xdff3ffff
0dd4: store_word %r10_1, 0xe4000244
0dd8: store_word 0, 0xe40001a8
0ddc: store_word 0x00024024, 0xe40002a0
0de4: store_word 0x00024024, 0xe40002a8
0dec: store_word_0_100 0x00000342, MC0_PAD_IF_CNTL
0df4: store_word_0_100 0, MC0_PAD_IF_CNTL_2
0df8: %r10_0 = 0x50505050
0e00: store_word_0_100 %r10_0, MC0_DLL_MASTER_ADJ_0
0e04: store_word_0_100 %r10_0, MC0_DLL_MASTER_ADJ_1
0e08: %r10_0 = *(0xd0008000)
0e0c: %r10_0 = rotlw_by_16_then_and %r10_0, 0x0000ffff
0e14: %r10_1 = rotlw_by_28_then_and %r10_0, 0x0000000f
0e1c: store_word %r10_0, 0xe40015e0
0e20: store_word %r10_1, 0xe40015e4
0e24: %r10_1 = and %r10_1, 0x0000000f
0e2c: %r12_0 = *(0xe40015ec)
0e30: %r10_0 = rotlw_by_24_then_and %r10_0, 0xfffffff0
0e38: %r10_0 = or %r10_0, %r10_1
0e3c: %r10_0 = rotlw_by_8_then_and %r10_0, -1
0e40: store_word %r10_0, 0xe40015ec
0e44: %r10_0 = *(0xe40015e0)
0e48: %r12_0 = load_word -6
0e4c: %r10_0 = load_word -6
0e50: %r10_1 = and %r10_1, 0x000000ff
0e58: store_word %r10_0, 0xe40015e0
0e5c: %r12_0 = *(0xe40015ec)
0e60: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
0e68: beq %r10_0, 2 -> 0x0e74 v
0e6c: %r10_0 = *(0xe40015e0)
0e70: jmp 0x0eb4 v
0e74: %r10_0 = *(0xe40015e0)
0e78: store_word 0x0000000e, 0xe1016100
0e80: delay -7
0e84: sync
0e88: store_word 0x00000009, 0xe1016000
0e90: %r10_0 = *(0xe1016000)
0e94: sync
0e98: store_word 0x00000401, 0xe1016100
0ea0: delay -7
0ea4: sync
0ea8: store_word 3, 0xe1016000
0eac: %r10_0 = *(0xe1016000)
0eb0: sync
0eb4: %r10_0 = 0x0a0a0a0a
0ebc: store_word_0_100 %r10_0, MC0_RD_STR_DLY_0
0ec0: store_word_0_100 %r10_0, MC0_RD_STR_DLY_1
0ec4: %r10_0 = 0x0f0f0f0f
0ecc: store_word_0_100 %r10_0, MC0_WR_STR_DLL_0
0ed0: store_word_0_100 %r10_0, MC0_WR_STR_DLL_1
0ed4: %r12_0 = *(MC1_WR_STR_DLL_1)
0ed8: sync
0edc: delay -7
0ee0: call 0x28fc
0ee4: store_word_0_100 0, MC0_TERM_CNTL
0ee8: store_word -1, MC0_WR_STR_DLY
0eec: store_word -1, MC1_WR_STR_DLY
0ef0: store_word_0_100 1, MC0_PAD_CAL_CNTL
0ef4: %r10_0 = *(MC1_PAD_CAL_CNTL)
0ef8: sync
0efc: delay -7
0f00: store_word_0_100 0, MC0_PAD_CAL_CNTL
0f04: %r11_1 = 0x000ff306
0f0c: call 0x05d8
0f10: store_word 0, 0xe40002a4
0f14: store_word_0_100 0, MC0_CNTL
0f18: store_word_0_100 0, MC0_POINTER
0f1c: store_word_0_100 0x001c0000, MC0_DRAM_CMD
0f24: store_word_0_100 2, MC0_CNTL
0f28: %r10_0 = *(MC1_CNTL)
0f2c: sync
0f30: delay -7
0f34: store_word 0x00000019, 0xe40002a4
0f3c: %r12_0 = *(0xe40002a4)
0f40: sync
0f44: delay -7
0f48: store_word_0_100 0, MC0_POINTER
0f4c: store_word_0_100 0x423c0000, MC0_DRAM_CMD
0f54: store_word_0_100 0x0a280100, MC0_DRAM_CMD
0f5c: store_word_0_100 0x06200221, MC0_DRAM_CMD
0f64: store_word_0_100 0x0620808d, MC0_DRAM_CMD
0f6c: store_word_0_100 0x06200772, MC0_DRAM_CMD
0f74: store_word_0_100 2, MC0_CNTL
0f78: %r10_0 = *(MC1_CNTL)
0f7c: sync
0f80: delay -7
0f84: store_word_0_100 0, MC0_POINTER
0f88: store_word_0_100 0x0a280100, MC0_DRAM_CMD
0f90: store_word_0_100 0x2f240000, MC0_DRAM_CMD
0f98: store_word_0_100 0x2f240000, MC0_DRAM_CMD
0fa0: store_word_0_100 0x0620c48d, MC0_DRAM_CMD
0fa8: store_word_0_100 2, MC0_CNTL
0fac: %r10_0 = *(MC1_CNTL)
0fb0: sync
0fb4: %r12_0 = load_word -3
0fb8: %r12_0 = load_word -2
0fbc: store_word_0_100 0, MC0_POINTER
0fc0: store_word_0_100 0x0620c08d, MC0_DRAM_CMD
0fc8: store_word_0_100 2, MC0_CNTL
0fcc: store_word_0_100 0, MC0_POINTER
0fd0: store_word_0_100 0x0620a48d, MC0_DRAM_CMD
0fd8: store_word_0_100 2, MC0_CNTL
0fdc: %r10_0 = *(MC1_CNTL)
0fe0: sync
0fe4: %r12_0 = load_word -1
0fe8: %r12_0 = load_word 0
0fec: store_word_0_100 0, MC0_POINTER
0ff0: store_word_0_100 0x0620a08d, MC0_DRAM_CMD
0ff8: store_word_0_100 2, MC0_CNTL
0ffc: %r10_1 = and %r12_0, 0x00ff00ff
1004: %r10_0 = and %r12_1, 0x00ff00ff
100c: branch_cond0 %r10_1, %r11_0 -> 0x0754 ^
1010: %r10_0 = rotlw_by_16_then_and %r11_0, -1
1014: branch_cond0 %r10_1, %r11_0 -> 0x0754 ^
1018: %r10_1 = and %r13_0, 0xff00ff00
1020: %r10_0 = and %r13_1, 0xff00ff00
1028: branch_cond0 %r10_1, %r11_0 -> 0x0754 ^
102c: %r10_0 = rotlw_by_16_then_and %r11_0, -1
1030: branch_cond0 %r10_1, %r11_0 -> 0x0754 ^
1034: %r10_1 = 0
1038: %r10_0 = 0x20000000
1040: beq %r12_0, %r13_0 -> 0x1068 v
1044: %r10_1 = 0x00000018
104c: %r10_0 = 0x10000000
1054: beq %r12_0, -1 -> 0x1068 v
1058: beq %r13_0, -1 -> 0x1068 v
105c: %r10_1 = 0
1060: %r10_0 = 0x20000000
1068: %r12_0 = load_word -4
106c: %r11_1 = and %r11_1, 0xffffffe7
1074: %r11_1 = or %r11_1, %r10_1
1078: store_word %r11_1, 0xe40002a4
107c: store_word %r11_0, 0xe1020000
1080: store_word %r11_0, 0xe1040000
1084: %r10_1 = and %r12_0, 0x0000000f
108c: branch_cond0 %r10_1, 1 -> 0x10ac v
1090: store_word %r10_0, 0xe40015e0
1094: %r12_0 = *(0xe40015ec)
1098: %r10_0 = and %r10_0, 0xfffffff0
10a0: %r10_0 = or %r10_0, 1
10a4: store_word %r10_0, 0xe40015ec
10a8: %r10_0 = *(0xe40015e0)
10ac: branch_cond0 %r10_1, 2 -> 0x10cc v
10b0: store_word %r10_0, 0xe40015e0
10b4: %r12_0 = *(0xe40015ec)
10b8: %r10_0 = and %r10_0, 0xfffffff0
10c0: %r10_0 = or %r10_0, 2
10c4: store_word %r10_0, 0xe40015ec
10c8: %r10_0 = *(0xe40015e0)
10cc: branch_cond0 %r10_1, 6 -> 0x10ec v
10d0: store_word %r10_0, 0xe40015e0
10d4: %r12_0 = *(0xe40015ec)
10d8: %r10_0 = and %r10_0, 0xfffffff0
10e0: %r10_0 = or %r10_0, 6
10e4: store_word %r10_0, 0xe40015ec
10e8: %r10_0 = *(0xe40015e0)
10ec: %r10_1 = rotlw_by_28_then_and %r12_0, 0x0000000f
10f4: store_word %r10_0, 0xe40015e0
10f8: store_word %r10_1, 0xe40015e4
10fc: %r10_1 = and %r10_1, 0x0000000f
1104: %r12_0 = *(0xe40015ec)
1108: %r10_0 = rotlw_by_28_then_and %r10_0, 0xfffffff0
1110: %r10_0 = or %r10_0, %r10_1
1114: %r10_0 = rotlw_by_4_then_and %r10_0, -1
1118: store_word %r10_0, 0xe40015ec
111c: %r10_0 = *(0xe40015e0)
1120: %r12_0 = load_word -6
1124: %r10_1 = 0x001ff306
112c: store_word %r10_0, 0xe40015e0
1130: %r12_0 = *(0xe40015ec)
1134: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
113c: beq %r10_0, 2 -> 0x1148 v
1140: %r10_0 = *(0xe40015e0)
1144: jmp 0x1174 v
1148: %r10_0 = *(0xe40015e0)
114c: store_word %r10_0, 0xe40015e0
1150: %r12_0 = *(0xe40015ec)
1154: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
115c: beq %r10_0, 0 -> 0x1168 v
1160: %r10_0 = *(0xe40015e0)
1164: jmp 0x1174 v
1168: %r10_0 = *(0xe40015e0)
116c: %r10_1 = 0x001bb306
1174: store_word %r10_0, 0xe40015e0
1178: %r12_0 = *(0xe40015ec)
117c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1184: beq %r10_0, 2 -> 0x1190 v
1188: %r10_0 = *(0xe40015e0)
118c: jmp 0x11bc v
1190: %r10_0 = *(0xe40015e0)
1194: store_word %r10_0, 0xe40015e0
1198: %r12_0 = *(0xe40015ec)
119c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
11a4: beq %r10_0, 3 -> 0x11b0 v
11a8: %r10_0 = *(0xe40015e0)
11ac: jmp 0x11bc v
11b0: %r10_0 = *(0xe40015e0)
11b4: %r10_1 = 0x001bb306
11bc: store_word %r10_0, 0xe40015e0
11c0: %r12_0 = *(0xe40015ec)
11c4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
11cc: beq %r10_0, 6 -> 0x11d8 v
11d0: %r10_0 = *(0xe40015e0)
11d4: jmp 0x11e4 v
11d8: %r10_0 = *(0xe40015e0)
11dc: %r10_1 = 0x001fa306
11e4: %r11_1 = %r10_1
11e8: call 0x05d8
11ec: %r10_1 = %r11_1
11f0: %r12_0 = load_word -6
11f4: %r10_1 = and %r10_1, -2
11f8: store_word %r10_1, 0xe40002a4
11fc: store_word_0_100 0, MC0_POINTER
1200: store_word_0_100 0x001c0000, MC0_DRAM_CMD
1208: store_word_0_100 2, MC0_CNTL
120c: %r10_0 = *(MC1_CNTL)
1210: sync
1214: delay -7
1218: %r10_1 = or %r10_1, 1
121c: store_word %r10_1, 0xe40002a4
1220: %r12_0 = *(0xe40002a4)
1224: sync
1228: delay -7
122c: %r10_1 = 0x040e3202
1234: %r12_0 = load_word -4
1238: branch_cond2 %r11_1, 0x00000018 -> 0x1244 v
1240: %r10_1 = or %r10_1, 1
1244: store_word_0_100 %r10_1, MC0_DRAM_CONFIG
1248: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
1250: store_word_0_100 0x00348084, MC0_TUNING_0
1258: store_word_0_100 0x0000007a, MC0_TUNING_1
1260: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1268: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
1270: store_word_0_100 0x01283446, MC0_TIMING_CNTL_0
1278: store_word_0_100 0x03620991, MC0_TIMING_CNTL_1
1280: store_word_0_100 0x0c958107, MC0_TIMING_CNTL_2
1288: store_word_0_100 0x00000018, MC0_WR_DATA_DLY_0
1290: store_word_0_100 0x00000030, MC0_INTERRUPT_MASK
1298: store_word_0_100 0, MC0_POINTER
129c: store_word_0_100 0x423c0000, MC0_DRAM_CMD
12a4: store_word_0_100 0x0a280100, MC0_DRAM_CMD
12ac: store_word_0_100 0x06200221, MC0_DRAM_CMD
12b4: %r10_1 = 0x06208089
12bc: store_word %r10_0, 0xe40015e0
12c0: %r12_0 = *(0xe40015ec)
12c4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
12cc: beq %r10_0, 2 -> 0x12d8 v
12d0: %r10_0 = *(0xe40015e0)
12d4: jmp 0x1304 v
12d8: %r10_0 = *(0xe40015e0)
12dc: store_word %r10_0, 0xe40015e0
12e0: %r12_0 = *(0xe40015ec)
12e4: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
12ec: beq %r10_0, 0 -> 0x12f8 v
12f0: %r10_0 = *(0xe40015e0)
12f4: jmp 0x1304 v
12f8: %r10_0 = *(0xe40015e0)
12fc: %r10_1 = 0x0620808a
1304: store_word %r10_0, 0xe40015e0
1308: %r12_0 = *(0xe40015ec)
130c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1314: beq %r10_0, 2 -> 0x1320 v
1318: %r10_0 = *(0xe40015e0)
131c: jmp 0x134c v
1320: %r10_0 = *(0xe40015e0)
1324: store_word %r10_0, 0xe40015e0
1328: %r12_0 = *(0xe40015ec)
132c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1334: beq %r10_0, 3 -> 0x1340 v
1338: %r10_0 = *(0xe40015e0)
133c: jmp 0x134c v
1340: %r10_0 = *(0xe40015e0)
1344: %r10_1 = 0x0620808a
134c: store_word %r10_0, 0xe40015e0
1350: %r12_0 = *(0xe40015ec)
1354: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
135c: beq %r10_0, 6 -> 0x1368 v
1360: %r10_0 = *(0xe40015e0)
1364: jmp 0x1374 v
1368: %r10_0 = *(0xe40015e0)
136c: %r10_1 = 0x06208089
1374: %r12_0 = load_word -4
1378: branch_cond2 %r11_1, 0x00000018 -> 0x1384 v
1380: %r10_1 = or %r10_1, 4
1384: store_word_0_100 %r10_1, MC0_DRAM_CMD
1388: store_word_0_100 0x06200772, MC0_DRAM_CMD
1390: store_word %r10_0, 0xe40015e0
1394: %r12_0 = *(0xe40015ec)
1398: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
13a0: beq %r10_0, 2 -> 0x13ac v
13a4: %r10_0 = *(0xe40015e0)
13a8: jmp 0x13d8 v
13ac: %r10_0 = *(0xe40015e0)
13b0: store_word %r10_0, 0xe40015e0
13b4: %r12_0 = *(0xe40015ec)
13b8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
13c0: beq %r10_0, 6 -> 0x13cc v
13c4: %r10_0 = *(0xe40015e0)
13c8: jmp 0x13d8 v
13cc: %r10_0 = *(0xe40015e0)
13d0: store_word_0_100 0x0621001b, MC0_DRAM_CMD
13d8: store_word_0_100 2, MC0_CNTL
13dc: %r10_0 = *(MC1_CNTL)
13e0: sync
13e4: delay -7
13e8: store_word_0_100 0, MC0_POINTER
13ec: store_word_0_100 0x0a280100, MC0_DRAM_CMD
13f4: store_word_0_100 0x2f240000, MC0_DRAM_CMD
13fc: store_word_0_100 0x2f240000, MC0_DRAM_CMD
1404: store_word_0_100 0x003c0000, MC0_DRAM_CMD
140c: store_word_0_100 2, MC0_CNTL
1410: store_word_0_100 0x00001000, MC0_CNTL
1418: store_word_0_100 0x00000605, MC0_CNTL
1420: %r10_0 = *(MC1_CNTL)
1424: sync
1428: delay -7
142c: store_word %r12_0, 4
1430: store_word %r12_1, 0x00000008
1434: store_word %r13_0, 0x0000000c
1438: store_word %r13_1, 0x00000010
143c: store_word 0, 0
1440: %r10_0 = *(0)
1444: sync
1448: store_word 0x00008000, 0x00008000
1450: %r10_0 = *(0x00008000)
1454: sync
1458: %r10_0 = *(0)
145c: beq %r10_0, 0 -> 0x14a4 v
1460: store_word 0x08000000, 0xe1020000
1468: store_word 0x08000000, 0xe1040000
1470: store_word_0_100 0x020f1242, MC0_DRAM_CONFIG
1478: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
1480: store_word_0_100 0x00344041, MC0_TUNING_0
1488: store_word_0_100 0x0000007a, MC0_TUNING_1
1490: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1498: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
14a0: jmp 0x28a0 v
14a4: call 0x395c
14a8: %r10_0 = 0
14ac: op_1E 0, -7
14b0: %r10_1 = 0x00001800
14b8: call 0x3a8c
14bc: beq %r12_0, 0 -> 0x14c4 v
14c0: %r10_0 = or %r11_0, 1
14c4: beq %r12_1, 0 -> 0x14d0 v
14c8: %r10_0 = or %r11_0, 0x00000010
14d0: op_1E 0, -7
14d4: op_1E 1, -7
14d8: %r10_1 = 0x00001804
14e0: call 0x3a8c
14e4: beq %r12_0, 0 -> 0x14ec v
14e8: %r10_0 = or %r11_0, 2
14ec: beq %r12_1, 0 -> 0x14f8 v
14f0: %r10_0 = or %r11_0, 0x00000020
14f8: op_1E 1, -7
14fc: op_1E 2, -7
1500: %r10_1 = 0x00001880
1508: call 0x3a8c
150c: beq %r12_0, 0 -> 0x1514 v
1510: %r10_0 = or %r11_0, 4
1514: beq %r12_1, 0 -> 0x1520 v
1518: %r10_0 = or %r11_0, 0x00000040
1520: op_1E 2, -7
1524: op_1E 3, -7
1528: %r10_1 = 0x00001884
1530: call 0x3a8c
1534: beq %r12_0, 0 -> 0x1540 v
1538: %r10_0 = or %r11_0, 0x00000008
1540: beq %r12_1, 0 -> 0x154c v
1544: %r10_0 = or %r11_0, 0x00000080
154c: op_1E 3, -7
1550: beq %r11_0, 0 -> 0x1580 v
1554: op_1E 0, -7
1558: op_1E 0, -7
155c: op_1E 1, -7
1560: op_1E 1, -7
1564: op_1E 2, -7
1568: op_1E 2, -7
156c: op_1E 3, -7
1570: op_1E 3, -7
1574: store_word 0x0011119a, 0xe4000024
157c: call 0x0ad0
1580: store_word_0_100 0, MC0_CNTL
1584: store_word_0_100 0, MC0_POINTER
1588: store_word_0_100 0x00040000, MC0_DRAM_CMD
1590: store_word_0_100 2, MC0_CNTL
1594: %r10_0 = *(MC1_CNTL)
1598: sync
159c: delay -7
15a0: %r10_0 = 0x040e3202
15a8: %r12_0 = load_word -4
15ac: %r11_1 = and %r11_1, 0x0000000f
15b4: branch_cond0 %r11_1, 0x0000000c -> 0x15cc v
15bc: %r10_1 = 0x2000000b
15c4: %r10_0 = 0x04113202
15cc: branch_cond0 %r11_1, 0x0000000d -> 0x15e4 v
15d4: %r10_1 = 0x20007061
15dc: %r10_0 = 0x04113202
15e4: branch_cond0 %r11_1, 0x0000000e -> 0x15fc v
15ec: %r10_1 = 0x20003031
15f4: %r10_0 = 0x04123202
15fc: branch_cond0 %r11_1, 0x0000000f -> 0x1614 v
1604: %r10_1 = 0x20007065
160c: %r10_0 = 0x04123202
1614: branch_cond0 %r11_1, 0 -> 0x1628 v
1618: %r10_1 = 0x20001019
1620: %r10_0 = 0x04123202
1628: branch_cond0 %r11_1, 1 -> 0x163c v
162c: %r10_1 = 0x20007069
1634: %r10_0 = 0x04133202
163c: branch_cond0 %r11_1, 2 -> 0x1650 v
1640: %r10_1 = 0x20003035
1648: %r10_0 = 0x04133202
1650: branch_cond0 %r11_1, 3 -> 0x1664 v
1654: %r10_1 = 0x2000706d
165c: %r10_0 = 0x04133202
1664: branch_cond0 %r11_1, 4 -> 0x1678 v
1668: %r10_1 = 0x2000000d
1670: %r10_0 = 0x04143202
1678: branch_cond0 %r11_1, 5 -> 0x168c v
167c: %r10_1 = 0x20007071
1684: %r10_0 = 0x04143202
168c: branch_cond0 %r11_1, 6 -> 0x16a0 v
1690: %r10_1 = 0x20003039
1698: %r10_0 = 0x04153202
16a0: branch_cond0 %r11_1, 7 -> 0x16b4 v
16a4: %r10_1 = 0x20007075
16ac: %r10_0 = 0x04153202
16b4: branch_cond0 %r11_1, 0x00000008 -> 0x16cc v
16bc: %r10_1 = 0x2000101d
16c4: %r10_0 = 0x04153202
16cc: branch_cond0 %r11_1, 0x00000009 -> 0x16e4 v
16d4: %r10_1 = 0x20007079
16dc: %r10_0 = 0x04163202
16e4: branch_cond0 %r11_1, 0x0000000a -> 0x16fc v
16ec: %r10_1 = 0x2000303d
16f4: %r10_0 = 0x04163202
16fc: branch_cond0 %r11_1, 0x0000000b -> 0x1714 v
1704: %r10_1 = 0x2000707d
170c: %r10_0 = 0x04163202
1714: store_word %r10_1, 0xe4000284
1718: %r10_1 = or %r10_1, 0x000c0000
1720: store_word %r10_1, 0xe4000284
1724: %r12_0 = *(0xe4000284)
1728: sync
172c: delay -7
1730: %r10_1 = and %r10_1, 0xdff3ffff
1738: store_word %r10_1, 0xe4000284
173c: call 0x28fc
1740: %r12_0 = load_word -4
1744: branch_cond2 %r11_1, 0x00000018 -> 0x1750 v
174c: %r10_0 = or %r11_0, 1
1750: store_word_0_100 %r11_0, MC0_DRAM_CONFIG
1754: store_word_0_100 0x00000080, MC0_BSB_SNOOPED_TIMER_CNTL
175c: store_word_0_100 0x20988088, MC0_TUNING_0
1764: store_word_0_100 0x0000007a, MC0_TUNING_1
176c: store_word_0_100 1, MC0_ARBITRATION_CNTL
1770: store_word_0_100 0x00106514, MC0_RD_BUFFER_CNTL_0
1778: store_word_0_100 0x00210414, MC0_RD_BUFFER_CNTL_1
1780: store_word_0_100 0x0128d87b, MC0_TIMING_CNTL_0
1788: store_word_0_100 0x03820edb, MC0_TIMING_CNTL_1
1790: store_word_0_100 0x0c97914b, MC0_TIMING_CNTL_2
1798: store_word_0_100 0x00000025, MC0_WR_DATA_DLY_0
17a0: store_word_0_100 0x00000030, MC0_INTERRUPT_MASK
17a8: store_word_0_100 0, MC0_POINTER
17ac: store_word_0_100 0x003c0000, MC0_DRAM_CMD
17b4: store_word_0_100 2, MC0_CNTL
17b8: %r10_0 = *(MC1_CNTL)
17bc: sync
17c0: delay -7
17c4: store_word_0_100 0, MC0_POINTER
17c8: store_word_0_100 0x0c280100, MC0_DRAM_CMD
17d0: store_word_0_100 0x2f240000, MC0_DRAM_CMD
17d8: %r10_1 = 0x06208009
17e0: store_word %r10_0, 0xe40015e0
17e4: %r12_0 = *(0xe40015ec)
17e8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
17f0: beq %r10_0, 2 -> 0x17fc v
17f4: %r10_0 = *(0xe40015e0)
17f8: jmp 0x1828 v
17fc: %r10_0 = *(0xe40015e0)
1800: store_word %r10_0, 0xe40015e0
1804: %r12_0 = *(0xe40015ec)
1808: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1810: beq %r10_0, 0 -> 0x181c v
1814: %r10_0 = *(0xe40015e0)
1818: jmp 0x1828 v
181c: %r10_0 = *(0xe40015e0)
1820: %r10_1 = 0x0620800a
1828: store_word %r10_0, 0xe40015e0
182c: %r12_0 = *(0xe40015ec)
1830: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1838: beq %r10_0, 2 -> 0x1844 v
183c: %r10_0 = *(0xe40015e0)
1840: jmp 0x1870 v
1844: %r10_0 = *(0xe40015e0)
1848: store_word %r10_0, 0xe40015e0
184c: %r12_0 = *(0xe40015ec)
1850: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1858: beq %r10_0, 3 -> 0x1864 v
185c: %r10_0 = *(0xe40015e0)
1860: jmp 0x1870 v
1864: %r10_0 = *(0xe40015e0)
1868: %r10_1 = 0x06208009
1870: store_word %r10_0, 0xe40015e0
1874: %r12_0 = *(0xe40015ec)
1878: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1880: beq %r10_0, 6 -> 0x188c v
1884: %r10_0 = *(0xe40015e0)
1888: jmp 0x1898 v
188c: %r10_0 = *(0xe40015e0)
1890: %r10_1 = 0x062080b9
1898: %r12_0 = load_word -4
189c: branch_cond2 %r11_1, 0x00000018 -> 0x18a8 v
18a4: %r10_1 = or %r10_1, 4
18a8: store_word %r10_1, 0xe4000014
18ac: store_word_0_100 %r10_1, MC0_DRAM_CMD
18b0: %r10_1 = 0x06200712
18b8: store_word %r10_1, 0xe4000010
18bc: store_word_0_100 %r10_1, MC0_DRAM_CMD
18c0: store_word %r10_0, 0xe40015e0
18c4: %r12_0 = *(0xe40015ec)
18c8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
18d0: beq %r10_0, 2 -> 0x18dc v
18d4: %r10_0 = *(0xe40015e0)
18d8: jmp 0x1908 v
18dc: %r10_0 = *(0xe40015e0)
18e0: store_word %r10_0, 0xe40015e0
18e4: %r12_0 = *(0xe40015ec)
18e8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
18f0: beq %r10_0, 6 -> 0x18fc v
18f4: %r10_0 = *(0xe40015e0)
18f8: jmp 0x1908 v
18fc: %r10_0 = *(0xe40015e0)
1900: store_word_0_100 0x0621001b, MC0_DRAM_CMD
1908: store_word_0_100 0x003c0000, MC0_DRAM_CMD
1910: store_word_0_100 2, MC0_CNTL
1914: store_word_0_100 0x00001000, MC0_CNTL
191c: store_word_0_100 0x00000605, MC0_CNTL
1924: %r10_0 = *(MC1_CNTL)
1928: sync
192c: delay -7
1930: %r10_0 = 0
1934: op_1E %r11_0, -7
1938: %r12_0 = 0
193c: %r12_1 = 0
1940: %r12_0 = 0
1944: op_1E %r11_0, -7
1948: %r10_0 = add %r11_0, 1
194c: branch_cond0 %r11_0, 4 -> 0x1934 ^
1950: %r10_0 = 0
1954: %r13_1 = 0
1958: store_word %r11_0, 0xe4000018
195c: store_word_0_100 %r11_0, MC0_RD_STR_DLY_0
1960: store_word_0_100 %r11_0, MC0_RD_STR_DLY_1
1964: %r10_0 = *(MC1_RD_STR_DLY_1)
1968: sync
196c: delay -7
1970: store_word_0_100 0x00001605, MC0_CNTL
1978: store_word_0_100 0x00000605, MC0_CNTL
1980: %r10_0 = 0
1984: %r11_1 = 0
1988: %r10_1 = 0x00001808
1990: call 0x3c5c
1994: call 0x0b7c
1998: %r10_1 = rotlw_by_0_then_and %r10_1, -1
199c: %r13_1 = or %r13_1, %r10_1
19a0: %r10_1 = 0x000000ff
19a8: %r12_0 = *(0xe40002a4)
19ac: branch_cond2 %r10_0, 0x00000018 -> 0x19cc v
19b4: %r10_0 = load_word -6
19b8: %r10_1 = rotlw_by_31_then_and %r10_1, -1
19bc: %r10_1 = add %r10_1, 0x00001808
19c4: call 0x3c5c
19c8: call 0x0b7c
19cc: %r10_1 = rotlw_by_16_then_and %r10_1, -1
19d0: %r13_1 = or %r13_1, %r10_1
19d4: op_1E 0, -7
19d8: call 0x3fcc
19dc: call 0x405c
19e0: op_1E 0, -7
19e4: %r10_0 = 0
19e8: %r11_1 = 0
19ec: %r10_1 = 0x0000180c
19f4: call 0x3c5c
19f8: call 0x0b7c
19fc: %r10_1 = rotlw_by_4_then_and %r10_1, -1
1a00: %r13_1 = or %r13_1, %r10_1
1a04: %r10_1 = 0x000000ff
1a0c: %r12_0 = *(0xe40002a4)
1a10: branch_cond2 %r10_0, 0x00000018 -> 0x1a30 v
1a18: %r10_0 = load_word -6
1a1c: %r10_1 = rotlw_by_31_then_and %r10_1, -1
1a20: %r10_1 = add %r10_1, 0x0000180c
1a28: call 0x3c5c
1a2c: call 0x0b7c
1a30: %r10_1 = rotlw_by_20_then_and %r10_1, -1
1a34: %r13_1 = or %r13_1, %r10_1
1a38: op_1E 1, -7
1a3c: call 0x3fcc
1a40: call 0x405c
1a44: op_1E 1, -7
1a48: %r10_0 = 0
1a4c: %r11_1 = 0
1a50: %r10_1 = 0x00001888
1a58: call 0x3c5c
1a5c: call 0x0b7c
1a60: %r10_1 = rotlw_by_8_then_and %r10_1, -1
1a64: %r13_1 = or %r13_1, %r10_1
1a68: %r10_1 = 0x000000ff
1a70: %r12_0 = *(0xe40002a4)
1a74: branch_cond2 %r10_0, 0x00000018 -> 0x1a94 v
1a7c: %r10_0 = load_word -6
1a80: %r10_1 = rotlw_by_31_then_and %r10_1, -1
1a84: %r10_1 = add %r10_1, 0x00001888
1a8c: call 0x3c5c
1a90: call 0x0b7c
1a94: %r10_1 = rotlw_by_24_then_and %r10_1, -1
1a98: %r13_1 = or %r13_1, %r10_1
1a9c: op_1E 2, -7
1aa0: call 0x3fcc
1aa4: call 0x405c
1aa8: op_1E 2, -7
1aac: %r10_0 = 0
1ab0: %r11_1 = 0
1ab4: %r10_1 = 0x0000188c
1abc: call 0x3c5c
1ac0: call 0x0b7c
1ac4: %r10_1 = rotlw_by_12_then_and %r10_1, -1
1ac8: %r13_1 = or %r13_1, %r10_1
1acc: %r10_1 = 0x000000ff
1ad4: %r12_0 = *(0xe40002a4)
1ad8: branch_cond2 %r10_0, 0x00000018 -> 0x1af8 v
1ae0: %r10_0 = load_word -6
1ae4: %r10_1 = rotlw_by_31_then_and %r10_1, -1
1ae8: %r10_1 = add %r10_1, 0x0000188c
1af0: call 0x3c5c
1af4: call 0x0b7c
1af8: %r10_1 = rotlw_by_28_then_and %r10_1, -1
1afc: %r13_1 = or %r13_1, %r10_1
1b00: op_1E 3, -7
1b04: call 0x3fcc
1b08: call 0x405c
1b0c: op_1E 3, -7
1b10: %r10_0 = load_word -5
1b14: %r10_0 = add %r11_0, 0x01010101
1b1c: branch_cond0 %r11_0, 0x50505050 -> 0x1958 ^
1b24: %r10_0 = 0
1b28: op_1E %r10_0, -7
1b2c: %r10_0 = rotlw_by_2_then_and %r10_0, 0x000000ff
1b34: %r11_1 = add %r11_0, 0xe4001600
1b3c: store_word %r13_0, %r11_1
1b40: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
1b48: beq %r11_1, 0 -> 0x410c v
1b4c: %r10_0 = and %r12_0, 0x0000ffff
1b54: %r10_0 = div %r11_0, %r11_1
1b58: %r13_1 = rotlw_by_0_then_and %r11_0, 0x000000ff
1b60: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
1b68: beq %r11_1, 0 -> 0x410c v
1b6c: %r10_0 = rotlw_by_16_then_and %r12_0, 0x0000ffff
1b74: %r10_0 = div %r11_0, %r11_1
1b78: %r10_0 = rotlw_by_8_then_and %r11_0, 0x0000ff00
1b80: %r13_1 = or %r13_1, %r11_0
1b84: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
1b8c: beq %r11_1, 0 -> 0x410c v
1b90: %r10_0 = and %r12_1, 0x0000ffff
1b98: %r10_0 = div %r11_0, %r11_1
1b9c: %r10_0 = rotlw_by_16_then_and %r11_0, 0x00ff0000
1ba4: %r13_1 = or %r13_1, %r11_0
1ba8: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
1bb0: beq %r11_1, 0 -> 0x410c v
1bb4: %r10_0 = rotlw_by_16_then_and %r12_1, 0x0000ffff
1bbc: %r10_0 = div %r11_0, %r11_1
1bc0: %r10_0 = rotlw_by_24_then_and %r11_0, 0xff000000
1bc8: %r13_1 = or %r13_1, %r11_0
1bcc: op_1E %r10_0, -7
1bd0: %r10_0 = add %r10_0, 1
1bd4: branch_cond0 %r10_0, 4 -> 0x1b28 ^
1bd8: op_1E 0, -7
1bdc: store_word %r13_1, MC0_RD_STR_DLY_0
1be0: op_1E 0, -7
1be4: op_1E 1, -7
1be8: store_word %r13_1, MC0_RD_STR_DLY_1
1bec: op_1E 1, -7
1bf0: op_1E 2, -7
1bf4: store_word %r13_1, MC1_RD_STR_DLY_0
1bf8: op_1E 2, -7
1bfc: op_1E 3, -7
1c00: store_word %r13_1, MC1_RD_STR_DLY_1
1c04: op_1E 3, -7
1c08: store_word %r10_0, 0xe40015e0
1c0c: %r12_0 = *(0xe40015ec)
1c10: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
1c18: branch_cond0 %r10_0, 2 -> 0x1c24 v
1c1c: %r10_0 = *(0xe40015e0)
1c20: jmp 0x1d94 v
1c24: %r10_0 = *(0xe40015e0)
1c28: store_word %r10_0, 0xe40015e0
1c2c: %r12_0 = *(0xe40015ec)
1c30: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1c38: beq %r10_0, 1 -> 0x1c44 v
1c3c: %r10_0 = *(0xe40015e0)
1c40: jmp 0x1ca0 v
1c44: %r10_0 = *(0xe40015e0)
1c48: %r10_0 = 0
1c4c: %r11_1 = 0
1c50: %r10_0 = MC0_RD_STR_DLY_0
1c58: %r10_1 = 0x0a0a0a0a
1c60: call 0x01c0
1c64: %r10_0 = MC0_RD_STR_DLY_1
1c6c: %r10_1 = 0x0a0a0a0a
1c74: call 0x01c0
1c78: %r10_0 = MC1_RD_STR_DLY_0
1c80: %r10_1 = 0x0a0a0a0a
1c88: call 0x01c0
1c8c: %r10_0 = MC1_RD_STR_DLY_1
1c94: %r10_1 = 0x0a0a0a0a
1c9c: call 0x01c0
1ca0: store_word %r10_0, 0xe40015e0
1ca4: %r12_0 = *(0xe40015ec)
1ca8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1cb0: beq %r10_0, 2 -> 0x1cbc v
1cb4: %r10_0 = *(0xe40015e0)
1cb8: jmp 0x1d18 v
1cbc: %r10_0 = *(0xe40015e0)
1cc0: %r10_0 = 0
1cc4: %r11_1 = 0
1cc8: %r10_0 = MC0_RD_STR_DLY_0
1cd0: %r10_1 = 0x05060505
1cd8: call 0x01c0
1cdc: %r10_0 = MC0_RD_STR_DLY_1
1ce4: %r10_1 = 0x03060504
1cec: call 0x01c0
1cf0: %r10_0 = MC1_RD_STR_DLY_0
1cf8: %r10_1 = 0x04060605
1d00: call 0x01c0
1d04: %r10_0 = MC1_RD_STR_DLY_1
1d0c: %r10_1 = 0x05050605
1d14: call 0x01c0
1d18: store_word %r10_0, 0xe40015e0
1d1c: %r12_0 = *(0xe40015ec)
1d20: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1d28: beq %r10_0, 6 -> 0x1d34 v
1d2c: %r10_0 = *(0xe40015e0)
1d30: jmp 0x1d90 v
1d34: %r10_0 = *(0xe40015e0)
1d38: %r10_0 = 0
1d3c: %r11_1 = 0
1d40: %r10_0 = MC0_RD_STR_DLY_0
1d48: %r10_1 = 0x10101011
1d50: call 0x01c0
1d54: %r10_0 = MC0_RD_STR_DLY_1
1d5c: %r10_1 = 0x0e100f0e
1d64: call 0x01c0
1d68: %r10_0 = MC1_RD_STR_DLY_0
1d70: %r10_1 = 0x0d110f10
1d78: call 0x01c0
1d7c: %r10_0 = MC1_RD_STR_DLY_1
1d84: %r10_1 = 0x0d0d100d
1d8c: call 0x01c0
1d90: jmp 0x1fb4 v
1d94: store_word %r10_0, 0xe40015e0
1d98: %r12_0 = *(0xe40015ec)
1d9c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1da4: beq %r10_0, 1 -> 0x1db0 v
1da8: %r10_0 = *(0xe40015e0)
1dac: jmp 0x1e0c v
1db0: %r10_0 = *(0xe40015e0)
1db4: %r10_0 = 0
1db8: %r11_1 = 0
1dbc: %r10_0 = MC0_RD_STR_DLY_0
1dc4: %r10_1 = 0x0a0a0a0a
1dcc: call 0x01c0
1dd0: %r10_0 = MC0_RD_STR_DLY_1
1dd8: %r10_1 = 0x0a0a0a0a
1de0: call 0x01c0
1de4: %r10_0 = MC1_RD_STR_DLY_0
1dec: %r10_1 = 0x0a0a0a0a
1df4: call 0x01c0
1df8: %r10_0 = MC1_RD_STR_DLY_1
1e00: %r10_1 = 0x0a0a0a0a
1e08: call 0x01c0
1e0c: store_word %r10_0, 0xe40015e0
1e10: %r12_0 = *(0xe40015ec)
1e14: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1e1c: beq %r10_0, 2 -> 0x1e28 v
1e20: %r10_0 = *(0xe40015e0)
1e24: jmp 0x1ea4 v
1e28: %r10_0 = *(0xe40015e0)
1e2c: store_word %r10_0, 0xe40015e0
1e30: %r12_0 = *(0xe40015ec)
1e34: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1e3c: beq %r10_0, 0 -> 0x1e48 v
1e40: %r10_0 = *(0xe40015e0)
1e44: jmp 0x1ea4 v
1e48: %r10_0 = *(0xe40015e0)
1e4c: %r10_0 = 0
1e50: %r11_1 = 0
1e54: %r10_0 = MC0_RD_STR_DLY_0
1e5c: %r10_1 = 0x090c0905
1e64: call 0x01c0
1e68: %r10_0 = MC0_RD_STR_DLY_1
1e70: %r10_1 = 0x0a0a0a09
1e78: call 0x01c0
1e7c: %r10_0 = MC1_RD_STR_DLY_0
1e84: %r10_1 = 0x04050505
1e8c: call 0x01c0
1e90: %r10_0 = MC1_RD_STR_DLY_1
1e98: %r10_1 = 0x05050906
1ea0: call 0x01c0
1ea4: store_word %r10_0, 0xe40015e0
1ea8: %r12_0 = *(0xe40015ec)
1eac: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1eb4: beq %r10_0, 2 -> 0x1ec0 v
1eb8: %r10_0 = *(0xe40015e0)
1ebc: jmp 0x1f3c v
1ec0: %r10_0 = *(0xe40015e0)
1ec4: store_word %r10_0, 0xe40015e0
1ec8: %r12_0 = *(0xe40015ec)
1ecc: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
1ed4: beq %r10_0, 3 -> 0x1ee0 v
1ed8: %r10_0 = *(0xe40015e0)
1edc: jmp 0x1f3c v
1ee0: %r10_0 = *(0xe40015e0)
1ee4: %r10_0 = 0
1ee8: %r11_1 = 0
1eec: %r10_0 = MC0_RD_STR_DLY_0
1ef4: %r10_1 = 0x06090603
1efc: call 0x01c0
1f00: %r10_0 = MC0_RD_STR_DLY_1
1f08: %r10_1 = 0x08050a08
1f10: call 0x01c0
1f14: %r10_0 = MC1_RD_STR_DLY_0
1f1c: %r10_1 = 0x03040303
1f24: call 0x01c0
1f28: %r10_0 = MC1_RD_STR_DLY_1
1f30: %r10_1 = 0x05050706
1f38: call 0x01c0
1f3c: store_word %r10_0, 0xe40015e0
1f40: %r12_0 = *(0xe40015ec)
1f44: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
1f4c: beq %r10_0, 6 -> 0x1f58 v
1f50: %r10_0 = *(0xe40015e0)
1f54: jmp 0x1fb4 v
1f58: %r10_0 = *(0xe40015e0)
1f5c: %r10_0 = 0
1f60: %r11_1 = 0
1f64: %r10_0 = MC0_RD_STR_DLY_0
1f6c: %r10_1 = 0x110f0f0f
1f74: call 0x01c0
1f78: %r10_0 = MC0_RD_STR_DLY_1
1f80: %r10_1 = 0x0f100f0e
1f88: call 0x01c0
1f8c: %r10_0 = MC1_RD_STR_DLY_0
1f94: %r10_1 = 0x0a0b0d09
1f9c: call 0x01c0
1fa0: %r10_0 = MC1_RD_STR_DLY_1
1fa8: %r10_1 = 0x0f0d0d0d
1fb0: call 0x01c0
1fb4: %r10_0 = *(MC1_RD_STR_DLY_1)
1fb8: sync
1fbc: delay -7
1fc0: store_word_0_100 0x00001605, MC0_CNTL
1fc8: store_word_0_100 0x00000605, MC0_CNTL
1fd0: store_word_0_100 0, MC0_WR_STR_DLL_0
1fd4: store_word_0_100 0, MC0_WR_STR_DLL_1
1fd8: store_word 0, 0xe4000020
1fdc: %r11_1 = 0
1fe0: store_word %r11_1, 0xe4000028
1fe4: %r11_1 = and %r11_1, 0x0000000f
1fec: branch_cond0 %r11_1, 0 -> 0x2004 v
1ff0: call 0x0750
1ff4: store_word %r11_1, 0xe4000028
1ff8: %r10_0 = rotlw_by_28_then_and %r11_1, 7
1ffc: call 0x02ec
2000: call 0x05d8
2004: %r10_0 = 0
2008: op_1E %r11_0, -7
200c: %r12_0 = 0
2010: %r12_1 = 0
2014: %r12_0 = 0
2018: op_1E %r11_0, -7
201c: %r10_0 = add %r11_0, 1
2020: branch_cond0 %r11_0, 4 -> 0x2008 ^
2024: call 0x298c
2028: %r10_0 = 0
202c: %r13_1 = 0
2030: store_word %r11_0, 0xe4000018
2034: call 0x29f8
2038: call 0x395c
203c: %r10_0 = 0
2040: %r11_1 = 0
2044: %r10_1 = 0x00001808
204c: %r10_0 = load_word -3
2050: call 0x3e14
2054: call 0x0b7c
2058: %r10_1 = rotlw_by_0_then_and %r10_1, -1
205c: %r13_1 = or %r13_1, %r10_1
2060: %r10_1 = 0x000000ff
2068: %r12_0 = *(0xe40002a4)
206c: branch_cond2 %r10_0, 0x00000018 -> 0x2090 v
2074: %r10_0 = load_word -6
2078: %r10_1 = rotlw_by_31_then_and %r10_1, -1
207c: %r10_1 = add %r10_1, 0x00001808
2084: %r10_0 = load_word -3
2088: call 0x3e14
208c: call 0x0b7c
2090: %r10_1 = rotlw_by_16_then_and %r10_1, -1
2094: %r13_1 = or %r13_1, %r10_1
2098: op_1E 0, -7
209c: call 0x3e8c
20a0: call 0x3f1c
20a4: op_1E 0, -7
20a8: %r10_0 = 0
20ac: %r11_1 = 0
20b0: %r10_1 = 0x0000180c
20b8: %r12_0 = load_word -3
20bc: call 0x3e14
20c0: call 0x0b7c
20c4: %r10_1 = rotlw_by_4_then_and %r10_1, -1
20c8: %r13_1 = or %r13_1, %r10_1
20cc: %r10_1 = 0x000000ff
20d4: %r12_0 = *(0xe40002a4)
20d8: branch_cond2 %r10_0, 0x00000018 -> 0x20fc v
20e0: %r10_0 = load_word -6
20e4: %r10_1 = rotlw_by_31_then_and %r10_1, -1
20e8: %r10_1 = add %r10_1, 0x0000180c
20f0: %r12_0 = load_word -3
20f4: call 0x3e14
20f8: call 0x0b7c
20fc: %r10_1 = rotlw_by_20_then_and %r10_1, -1
2100: %r13_1 = or %r13_1, %r10_1
2104: op_1E 1, -7
2108: call 0x3e8c
210c: call 0x3f1c
2110: op_1E 1, -7
2114: %r10_0 = 0
2118: %r11_1 = 0
211c: %r10_1 = 0x00001888
2124: %r10_0 = load_word -3
2128: call 0x3e14
212c: call 0x0b7c
2130: %r10_1 = rotlw_by_8_then_and %r10_1, -1
2134: %r13_1 = or %r13_1, %r10_1
2138: %r10_1 = 0x000000ff
2140: %r12_0 = *(0xe40002a4)
2144: branch_cond2 %r10_0, 0x00000018 -> 0x2168 v
214c: %r10_0 = load_word -6
2150: %r10_1 = rotlw_by_31_then_and %r10_1, -1
2154: %r10_1 = add %r10_1, 0x00001888
215c: %r10_0 = load_word -3
2160: call 0x3e14
2164: call 0x0b7c
2168: %r10_1 = rotlw_by_24_then_and %r10_1, -1
216c: %r13_1 = or %r13_1, %r10_1
2170: op_1E 2, -7
2174: call 0x3e8c
2178: call 0x3f1c
217c: op_1E 2, -7
2180: %r10_0 = 0
2184: %r11_1 = 0
2188: %r10_1 = 0x0000188c
2190: %r12_0 = load_word -3
2194: call 0x3e14
2198: call 0x0b7c
219c: %r10_1 = rotlw_by_12_then_and %r10_1, -1
21a0: %r13_1 = or %r13_1, %r10_1
21a4: %r10_1 = 0x000000ff
21ac: %r12_0 = *(0xe40002a4)
21b0: branch_cond2 %r10_0, 0x00000018 -> 0x21d4 v
21b8: %r10_0 = load_word -6
21bc: %r10_1 = rotlw_by_31_then_and %r10_1, -1
21c0: %r10_1 = add %r10_1, 0x0000188c
21c8: %r12_0 = load_word -3
21cc: call 0x3e14
21d0: call 0x0b7c
21d4: %r10_1 = rotlw_by_28_then_and %r10_1, -1
21d8: %r13_1 = or %r13_1, %r10_1
21dc: op_1E 3, -7
21e0: call 0x3e8c
21e4: call 0x3f1c
21e8: op_1E 3, -7
21ec: %r10_0 = load_word -5
21f0: %r10_0 = add %r11_0, 0x01010101
21f8: branch_cond0 %r11_0, 0x50505050 -> 0x2030 ^
2200: store_word 0x000000ff, 0xe4000024
2208: %r10_0 = 0
220c: op_1E %r10_0, -7
2210: %r10_0 = rotlw_by_2_then_and %r10_0, 0x000000ff
2218: %r11_1 = add %r11_0, 0xe4001610
2220: store_word %r13_0, %r11_1
2224: call 0x0700
2228: %r11_1 = rotlw_by_0_then_and %r13_0, 0x000000ff
2230: beq %r11_1, 0 -> 0x417c v
2234: %r10_0 = and %r12_0, 0x0000ffff
223c: %r10_0 = div %r11_0, %r11_1
2240: %r13_1 = rotlw_by_0_then_and %r11_0, 0x000000ff
2248: %r11_1 = rotlw_by_24_then_and %r13_0, 0x000000ff
2250: beq %r11_1, 0 -> 0x4198 v
2254: %r10_0 = rotlw_by_16_then_and %r12_0, 0x0000ffff
225c: %r10_0 = div %r11_0, %r11_1
2260: %r10_0 = rotlw_by_8_then_and %r11_0, 0x0000ff00
2268: %r13_1 = or %r13_1, %r11_0
226c: %r11_1 = rotlw_by_16_then_and %r13_0, 0x000000ff
2274: beq %r11_1, 0 -> 0x41b4 v
2278: %r10_0 = and %r12_1, 0x0000ffff
2280: %r10_0 = div %r11_0, %r11_1
2284: %r10_0 = rotlw_by_16_then_and %r11_0, 0x00ff0000
228c: %r13_1 = or %r13_1, %r11_0
2290: %r11_1 = rotlw_by_8_then_and %r13_0, 0x000000ff
2298: beq %r11_1, 0 -> 0x41d0 v
229c: %r10_0 = rotlw_by_16_then_and %r12_1, 0x0000ffff
22a4: %r10_0 = div %r11_0, %r11_1
22a8: %r10_0 = rotlw_by_24_then_and %r11_0, 0xff000000
22b0: %r13_1 = or %r13_1, %r11_0
22b4: op_1E %r10_0, -7
22b8: %r10_0 = add %r10_0, 1
22bc: branch_cond0 %r10_0, 4 -> 0x220c ^
22c0: op_1E 0, -7
22c4: store_word %r13_1, MC0_WR_STR_DLL_0
22c8: op_1E 0, -7
22cc: op_1E 1, -7
22d0: store_word %r13_1, MC0_WR_STR_DLL_1
22d4: op_1E 1, -7
22d8: op_1E 2, -7
22dc: store_word %r13_1, MC1_WR_STR_DLL_0
22e0: op_1E 2, -7
22e4: op_1E 3, -7
22e8: store_word %r13_1, MC1_WR_STR_DLL_1
22ec: op_1E 3, -7
22f0: store_word %r10_0, 0xe40015e0
22f4: %r12_0 = *(0xe40015ec)
22f8: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
2300: branch_cond0 %r10_0, 2 -> 0x230c v
2304: %r10_0 = *(0xe40015e0)
2308: jmp 0x246c v
230c: %r10_0 = *(0xe40015e0)
2310: store_word %r10_0, 0xe40015e0
2314: %r12_0 = *(0xe40015ec)
2318: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2320: beq %r10_0, 1 -> 0x232c v
2324: %r10_0 = *(0xe40015e0)
2328: jmp 0x2378 v
232c: %r10_0 = *(0xe40015e0)
2330: %r10_0 = 0
2334: %r11_1 = 1
2338: %r10_0 = MC0_WR_STR_DLL_0
2340: %r10_1 = 0
2344: call 0x01c0
2348: %r10_0 = MC0_WR_STR_DLL_1
2350: %r10_1 = 0
2354: call 0x01c0
2358: %r10_0 = MC1_WR_STR_DLL_0
2360: %r10_1 = 0
2364: call 0x01c0
2368: %r10_0 = MC1_WR_STR_DLL_1
2370: %r10_1 = 0
2374: call 0x01c0
2378: store_word %r10_0, 0xe40015e0
237c: %r12_0 = *(0xe40015ec)
2380: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2388: beq %r10_0, 2 -> 0x2394 v
238c: %r10_0 = *(0xe40015e0)
2390: jmp 0x23f0 v
2394: %r10_0 = *(0xe40015e0)
2398: %r10_0 = 0
239c: %r11_1 = 1
23a0: %r10_0 = MC0_WR_STR_DLL_0
23a8: %r10_1 = 0x01ff0301
23b0: call 0x01c0
23b4: %r10_0 = MC0_WR_STR_DLL_1
23bc: %r10_1 = 0x01000101
23c4: call 0x01c0
23c8: %r10_0 = MC1_WR_STR_DLL_0
23d0: %r10_1 = 0x01020201
23d8: call 0x01c0
23dc: %r10_0 = MC1_WR_STR_DLL_1
23e4: %r10_1 = 0x01010101
23ec: call 0x01c0
23f0: store_word %r10_0, 0xe40015e0
23f4: %r12_0 = *(0xe40015ec)
23f8: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2400: beq %r10_0, 6 -> 0x240c v
2404: %r10_0 = *(0xe40015e0)
2408: jmp 0x2468 v
240c: %r10_0 = *(0xe40015e0)
2410: %r10_0 = 0
2414: %r11_1 = 1
2418: %r10_0 = MC0_WR_STR_DLL_0
2420: %r10_1 = 0xfafcfefe
2428: call 0x01c0
242c: %r10_0 = MC0_WR_STR_DLL_1
2434: %r10_1 = 0xfdfefdfc
243c: call 0x01c0
2440: %r10_0 = MC1_WR_STR_DLL_0
2448: %r10_1 = 0xfdfdfe00
2450: call 0x01c0
2454: %r10_0 = MC1_WR_STR_DLL_1
245c: %r10_1 = 0xfffdfefd
2464: call 0x01c0
2468: jmp 0x2684 v
246c: store_word %r10_0, 0xe40015e0
2470: %r12_0 = *(0xe40015ec)
2474: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
247c: beq %r10_0, 1 -> 0x2488 v
2480: %r10_0 = *(0xe40015e0)
2484: jmp 0x24dc v
2488: %r10_0 = *(0xe40015e0)
248c: %r10_0 = 0
2490: %r11_1 = 1
2494: %r10_0 = MC0_WR_STR_DLL_0
249c: %r10_1 = 0
24a0: call 0x01c0
24a4: %r10_0 = MC0_WR_STR_DLL_1
24ac: %r10_1 = 0
24b0: call 0x01c0
24b4: %r10_0 = MC1_WR_STR_DLL_0
24bc: %r10_1 = 0xfdfe00fe
24c4: call 0x01c0
24c8: %r10_0 = MC1_WR_STR_DLL_1
24d0: %r10_1 = 0xff00fffe
24d8: call 0x01c0
24dc: store_word %r10_0, 0xe40015e0
24e0: %r12_0 = *(0xe40015ec)
24e4: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
24ec: beq %r10_0, 2 -> 0x24f8 v
24f0: %r10_0 = *(0xe40015e0)
24f4: jmp 0x2574 v
24f8: %r10_0 = *(0xe40015e0)
24fc: store_word %r10_0, 0xe40015e0
2500: %r12_0 = *(0xe40015ec)
2504: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
250c: beq %r10_0, 0 -> 0x2518 v
2510: %r10_0 = *(0xe40015e0)
2514: jmp 0x2574 v
2518: %r10_0 = *(0xe40015e0)
251c: %r10_0 = 0
2520: %r11_1 = 1
2524: %r10_0 = MC0_WR_STR_DLL_0
252c: %r10_1 = 0x00ff0202
2534: call 0x01c0
2538: %r10_0 = MC0_WR_STR_DLL_1
2540: %r10_1 = 0x01000100
2548: call 0x01c0
254c: %r10_0 = MC1_WR_STR_DLL_0
2554: %r10_1 = 0xfeff00ff
255c: call 0x01c0
2560: %r10_0 = MC1_WR_STR_DLL_1
2568: %r10_1 = 0x0201ff00
2570: call 0x01c0
2574: store_word %r10_0, 0xe40015e0
2578: %r12_0 = *(0xe40015ec)
257c: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2584: beq %r10_0, 2 -> 0x2590 v
2588: %r10_0 = *(0xe40015e0)
258c: jmp 0x260c v
2590: %r10_0 = *(0xe40015e0)
2594: store_word %r10_0, 0xe40015e0
2598: %r12_0 = *(0xe40015ec)
259c: %r10_0 = rotlw_by_28_then_and %r10_0, 0x0000000f
25a4: beq %r10_0, 3 -> 0x25b0 v
25a8: %r10_0 = *(0xe40015e0)
25ac: jmp 0x260c v
25b0: %r10_0 = *(0xe40015e0)
25b4: %r10_0 = 0
25b8: %r11_1 = 1
25bc: %r10_0 = MC0_WR_STR_DLL_0
25c4: %r10_1 = 0xfe030202
25cc: call 0x01c0
25d0: %r10_0 = MC0_WR_STR_DLL_1
25d8: %r10_1 = 0x01000100
25e0: call 0x01c0
25e4: %r10_0 = MC1_WR_STR_DLL_0
25ec: %r10_1 = 0xfdff0000
25f4: call 0x01c0
25f8: %r10_0 = MC1_WR_STR_DLL_1
2600: %r10_1 = 0x00ffffff
2608: call 0x01c0
260c: store_word %r10_0, 0xe40015e0
2610: %r12_0 = *(0xe40015ec)
2614: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
261c: beq %r10_0, 6 -> 0x2628 v
2620: %r10_0 = *(0xe40015e0)
2624: jmp 0x2684 v
2628: %r10_0 = *(0xe40015e0)
262c: %r10_0 = 0
2630: %r11_1 = 1
2634: %r10_0 = MC0_WR_STR_DLL_0
263c: %r10_1 = 0xfcfafefc
2644: call 0x01c0
2648: %r10_0 = MC0_WR_STR_DLL_1
2650: %r10_1 = 0xfbfcf8f8
2658: call 0x01c0
265c: %r10_0 = MC1_WR_STR_DLL_0
2664: %r10_1 = 0xfcf9fbfc
266c: call 0x01c0
2670: %r10_0 = MC1_WR_STR_DLL_1
2678: %r10_1 = 0xfcfbfafb
2680: call 0x01c0
2684: %r12_0 = *(MC1_WR_STR_DLL_1)
2688: sync
268c: delay -7
2690: %r10_0 = load_word -4
2694: %r10_0 = and %r11_1, 0x0000000f
269c: branch_cond0 %r11_0, 0 -> 0x273c v
26a0: %r12_0 = load_word -4
26a4: %r10_0 = load_word -5
26a8: %r10_0 = and %r11_0, 0x0000ffff
26b0: branch_cond1 %r11_1, %r11_0 -> 0x26c8 v
26b4: %r10_0 = load_word -5
26b8: %r10_0 = rotlw_by_12_then_and %r11_0, 0x00070000
26c0: %r10_0 = or %r11_1, %r11_0
26c4: store_word %r11_0, 0xe4000020
26c8: store_word_0_100 0, MC0_WR_STR_DLL_0
26cc: store_word_0_100 0, MC0_WR_STR_DLL_1
26d0: %r10_0 = load_word -4
26d4: %r11_1 = add %r11_1, 0x00000010
26dc: %r10_0 = rotlw_by_28_then_and %r11_1, 7
26e0: branch_cond6 %r11_0, 4 -> 0x1ff0 ^
26e4: %r10_0 = load_word -5
26e8: %r10_0 = rotlw_by_16_then_and %r11_0, 7
26ec: store_word %r10_0, 0xe40015e0
26f0: %r12_0 = *(0xe40015ec)
26f4: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
26fc: branch_cond0 %r10_0, 2 -> 0x2708 v
2700: %r10_0 = *(0xe40015e0)
2704: jmp 0x2734 v
2708: %r10_0 = *(0xe40015e0)
270c: store_word %r10_0, 0xe40015e0
2710: %r12_0 = *(0xe40015ec)
2714: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
271c: beq %r10_0, 2 -> 0x2728 v
2720: %r10_0 = *(0xe40015e0)
2724: jmp 0x2730 v
2728: %r10_0 = *(0xe40015e0)
272c: %r10_0 = 1
2730: jmp 0x2734 v
2734: call 0x02ec
2738: call 0x05d8
273c: %r10_0 = load_word -4
2740: %r11_1 = add %r11_1, 1
2744: %r10_0 = and %r11_1, 0x0000000f
274c: branch_cond6 %r11_0, 2 -> 0x1fe0 ^
2750: call 0x2b54
2754: store_word_0_100 0, MC0_CNTL
2758: store_word_0_100 0, MC0_POINTER
275c: %r10_0 = load_word -6
2760: store_word_0_100 %r10_1, MC0_DRAM_CMD
2764: store_word_0_100 0x003c0000, MC0_DRAM_CMD
276c: store_word_0_100 2, MC0_CNTL
2770: store_word %r10_0, 0xe40015e0
2774: %r12_0 = *(0xe40015ec)
2778: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2780: beq %r10_0, 6 -> 0x278c v
2784: %r10_0 = *(0xe40015e0)
2788: jmp 0x2854 v
278c: %r10_0 = *(0xe40015e0)
2790: store_word_0_100 0, MC0_POINTER
2794: store_word_0_100 0x062003da, MC0_DRAM_CMD
279c: store_word_0_100 0x062006da, MC0_DRAM_CMD
27a4: store_word_0_100 0x062001da, MC0_DRAM_CMD
27ac: store_word_0_100 0x062003e2, MC0_DRAM_CMD
27b4: store_word_0_100 0x062006e2, MC0_DRAM_CMD
27bc: store_word_0_100 0x062001e2, MC0_DRAM_CMD
27c4: store_word_0_100 0x06200712, MC0_DRAM_CMD
27cc: store_word_0_100 2, MC0_CNTL
27d0: sync
27d4: delay -7
27d8: store_word_0_100 0, MC0_POINTER
27dc: store_word_0_100 0x062003f6, MC0_DRAM_CMD
27e4: store_word_0_100 0x062006f6, MC0_DRAM_CMD
27ec: store_word_0_100 0x062001f6, MC0_DRAM_CMD
27f4: store_word_0_100 0x062003f2, MC0_DRAM_CMD
27fc: store_word_0_100 0x062006f2, MC0_DRAM_CMD
2804: store_word_0_100 0x062001f2, MC0_DRAM_CMD
280c: store_word_0_100 2, MC0_CNTL
2810: sync
2814: delay -7
2818: store_word_0_100 0, MC0_POINTER
281c: store_word_0_100 0x0620038e, MC0_DRAM_CMD
2824: store_word_0_100 0x0620068e, MC0_DRAM_CMD
282c: store_word_0_100 0x0620018e, MC0_DRAM_CMD
2834: store_word_0_100 0x062003b2, MC0_DRAM_CMD
283c: store_word_0_100 0x062006b2, MC0_DRAM_CMD
2844: store_word_0_100 0x062001b2, MC0_DRAM_CMD
284c: store_word_0_100 2, MC0_CNTL
2850: store_word_0_100 0, MC0_POINTER
2854: store_word_0_100 0x00001605, MC0_CNTL
285c: store_word_0_100 0x00000605, MC0_CNTL
2864: %r10_0 = *(MC1_CNTL)
2868: sync
286c: delay -7
2870: store_word_0_100 0, MC0_POINTER
2874: store_word_0_100 0x003c0000, MC0_DRAM_CMD
287c: store_word_0_100 2, MC0_CNTL
2880: store_word_0_100 0x00001000, MC0_CNTL
2888: store_word_0_100 0x00000605, MC0_CNTL
2890: %r10_0 = *(MC1_CNTL)
2894: sync
2898: delay -7
289c: call 0x395c
28a0: %r10_0 = load_word -6
28a4: %r10_1 = rotlw_by_31_then_and %r10_1, 0x7fffffff
28ac: branch_cond1 %r10_1, 0x00000080 -> 0x4230 v
28b4: store_word 0, 0
28b8: %r10_0 = *(0)
28bc: sync
28c0: store_word %r10_1, %r10_1
28c4: %r10_0 = *(%r10_1)
28c8: sync
28cc: %r10_0 = *(0)
28d0: branch_cond0 %r10_0, 0 -> 0x28dc v
28d4: %r10_0 = load_word -5
28d8: beq %r11_0, %r10_1 -> 0x28a4 ^
28dc: store_word 0x0014149a, 0xe4000024
28e4: call 0x0ad0
28e8: jmp 0x4230 v
28ec: %r10_0 = *(0xe4000288)
28f0: sync
28f4: delay -7
28f8: return
28fc: store_word 2, 0xe400028c
2900: %r12_0 = *(0xe400028c)
2904: sync
2908: delay -7
290c: store_word 0, 0xe400028c
2910: %r12_0 = *(0xe400028c)
2914: sync
2918: delay -7
291c: store_word 0, 0xe4000288
2920: call 0x28ec
2924: store_word 1, 0xe4000288
2928: call 0x28ec
292c: store_word 5, 0xe4000288
2930: call 0x28ec
2934: store_word 1, 0xe4000288
2938: call 0x28ec
293c: store_word 0, 0xe4000288
2940: call 0x28ec
2944: return
2948: %r10_0 = and %r10_1, 0x000000ff
2950: branch_cond5 %r11_0, %r10_0 -> 0x2958 v
2954: %r10_0 = or %r11_0, %r11_0
2958: %r10_0 = rotlw_by_24_then_and %r10_1, 0x000000ff
2960: branch_cond5 %r11_0, %r10_0 -> 0x2968 v
2964: %r10_0 = or %r11_0, %r11_0
2968: %r10_0 = rotlw_by_16_then_and %r10_1, 0x000000ff
2970: branch_cond5 %r11_0, %r10_0 -> 0x2978 v
2974: %r10_0 = or %r11_0, %r11_0
2978: %r10_0 = rotlw_by_8_then_and %r10_1, 0x000000ff
2980: branch_cond5 %r11_0, %r10_0 -> 0x2988 v
2984: %r10_0 = or %r11_0, %r11_0
2988: return
298c: %r10_0 = 0x00000050
2994: %r10_0 = load_word -6
2998: call 0x2948
299c: %r12_0 = load_word -6
29a0: call 0x2948
29a4: %r10_0 = load_word -6
29a8: call 0x2948
29ac: %r12_0 = load_word -6
29b0: call 0x2948
29b4: %r10_1 = rotlw_by_8_then_and %r10_0, -1
29b8: %r10_0 = or %r10_0, %r10_1
29bc: %r10_1 = rotlw_by_16_then_and %r10_0, -1
29c0: %r10_0 = or %r10_0, %r10_1
29c4: %r10_0 = load_word -6
29c8: %r10_1 = subf %r10_1, %r10_0
29cc: store_word %r10_1, MC0_WR_STR_DLL_0
29d0: %r12_0 = load_word -6
29d4: %r10_1 = subf %r10_1, %r10_0
29d8: store_word %r10_1, MC0_WR_STR_DLL_1
29dc: %r10_0 = load_word -6
29e0: %r10_1 = subf %r10_1, %r10_0
29e4: store_word %r10_1, MC1_WR_STR_DLL_0
29e8: %r12_0 = load_word -6
29ec: %r10_1 = subf %r10_1, %r10_0
29f0: store_word %r10_1, MC1_WR_STR_DLL_1
29f4: return
29f8: %r10_0 = load_word -6
29fc: %r10_1 = add %r10_1, 0x01010101
2a04: store_word %r10_1, MC0_WR_STR_DLL_0
2a08: %r12_0 = load_word -6
2a0c: %r10_1 = add %r10_1, 0x01010101
2a14: store_word %r10_1, MC0_WR_STR_DLL_1
2a18: %r10_0 = load_word -6
2a1c: %r10_1 = add %r10_1, 0x01010101
2a24: store_word %r10_1, MC1_WR_STR_DLL_0
2a28: %r12_0 = load_word -6
2a2c: %r10_1 = add %r10_1, 0x01010101
2a34: store_word %r10_1, MC1_WR_STR_DLL_1
2a38: %r12_0 = *(MC1_WR_STR_DLL_1)
2a3c: sync
2a40: delay -7
2a44: call 0x28fc
2a48: store_word_0_100 0, MC0_CNTL
2a4c: %r12_0 = load_word -6
2a50: %r10_1 = and %r10_1, -2
2a54: store_word %r10_1, 0xe40002a4
2a58: store_word_0_100 0, MC0_POINTER
2a5c: store_word_0_100 0x001c0000, MC0_DRAM_CMD
2a64: store_word_0_100 2, MC0_CNTL
2a68: %r10_0 = *(MC1_CNTL)
2a6c: sync
2a70: delay -7
2a74: %r10_1 = or %r10_1, 1
2a78: store_word %r10_1, 0xe40002a4
2a7c: %r12_0 = *(0xe40002a4)
2a80: sync
2a84: delay -7
2a88: store_word_0_100 0, MC0_POINTER
2a8c: store_word_0_100 0x423c0000, MC0_DRAM_CMD
2a94: store_word_0_100 0x0c280100, MC0_DRAM_CMD
2a9c: store_word_0_100 0x06200221, MC0_DRAM_CMD
2aa4: %r12_0 = *(0xe4000014)
2aa8: store_word_0_100 %r10_0, MC0_DRAM_CMD
2aac: %r10_0 = *(0xe4000010)
2ab0: store_word_0_100 %r10_0, MC0_DRAM_CMD
2ab4: store_word %r10_0, 0xe40015e0
2ab8: %r12_0 = *(0xe40015ec)
2abc: %r10_0 = rotlw_by_24_then_and %r10_0, 0x0000000f
2ac4: beq %r10_0, 2 -> 0x2ad0 v
2ac8: %r10_0 = *(0xe40015e0)
2acc: jmp 0x2afc v
2ad0: %r10_0 = *(0xe40015e0)
2ad4: store_word %r10_0, 0xe40015e0
2ad8: %r12_0 = *(0xe40015ec)
2adc: %r10_0 = rotlw_by_0_then_and %r10_0, 0x0000000f
2ae4: beq %r10_0, 6 -> 0x2af0 v
2ae8: %r10_0 = *(0xe40015e0)
2aec: jmp 0x2afc v
2af0: %r10_0 = *(0xe40015e0)
2af4: store_word_0_100 0x0621001b, MC0_DRAM_CMD
2afc: store_word_0_100 2, MC0_CNTL
2b00: %r10_0 = *(MC1_CNTL)
2b04: sync
2b08: delay -7
2b0c: store_word_0_100 0, MC0_POINTER
2b10: store_word_0_100 0x0c280100, MC0_DRAM_CMD
2b18: store_word_0_100 0x2f240000, MC0_DRAM_CMD
2b20: store_word_0_100 0x2f240000, MC0_DRAM_CMD
2b28: store_word_0_100 0x003c0000, MC0_DRAM_CMD
2b30: store_word_0_100 2, MC0_CNTL
2b34: store_word_0_100 0x00001605, MC0_CNTL
2b3c: store_word_0_100 0x00000605, MC0_CNTL
2b44: %r10_0 = *(MC1_CNTL)
2b48: sync
2b4c: delay -7
2b50: return
2b54: store_word_0_100 0, MC0_CNTL
2b58: store_word_0_100 0, MC0_POINTER
2b5c: store_word_0_100 0x00040000, MC0_DRAM_CMD
2b64: store_word_0_100 2, MC0_CNTL
2b68: %r10_0 = *(MC1_CNTL)
2b6c: sync
2b70: delay -7
2b74: call 0x28fc
2b78: store_word_0_100 0, MC0_POINTER
2b7c: store_word_0_100 0x003c0000, MC0_DRAM_CMD
2b84: store_word_0_100 2, MC0_CNTL
2b88: %r10_0 = *(MC1_CNTL)
2b8c: sync
2b90: delay -7
2b94: return
2b98: store_word_0_100 0, MC0_CNTL
2b9c: store_word_0_100 0, MC0_POINTER
2ba0: %r10_0 = 0
2ba4: %r11_1 = rotlw_by_25_then_and %r10_1, 1
2ba8: beq %r11_1, 1 -> 0x2bb0 v
2bac: %r10_0 = -1
2bb0: store_word %r11_0, MC0_DRAM_DATA
2bb4: %r10_0 = xor %r11_0, -1
2bb8: store_word %r11_0, MC1_DRAM_DATA
2bbc: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bc0: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bc4: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bc8: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bcc: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bd0: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bd4: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bd8: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bdc: %r10_0 = 0
2be0: %r11_1 = rotlw_by_25_then_and %r10_1, 1
2be4: beq %r11_1, 1 -> 0x2bec v
2be8: %r10_0 = -1
2bec: store_word %r11_0, MC0_DRAM_DATA
2bf0: %r10_0 = xor %r11_0, -1
2bf4: store_word %r11_0, MC1_DRAM_DATA
2bf8: store_word_0_100 %r10_0, MC0_DRAM_DATA
2bfc: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c00: %r10_0 = xor %r10_0, -1
2c04: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c08: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c0c: %r10_0 = xor %r10_0, -1
2c10: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c14: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c18: %r10_0 = xor %r10_0, -1
2c1c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c20: store_word_0_100 %r10_0, MC0_DRAM_DATA
2c24: %r10_0 = 0x0f2c0000
2c2c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
2c34: %r10_0 = or %r11_0, %r11_1
2c38: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
2c40: %r10_0 = or %r11_0, %r11_1
2c44: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
2c4c: %r10_0 = or %r11_0, %r11_1
2c50: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
2c58: %r10_0 = or %r11_0, %r11_1
2c5c: store_word_0_100 %r11_0, MC0_DRAM_CMD
2c60: %r10_0 = and %r11_0, 0x0003e000
2c68: %r10_0 = xor %r11_0, 0x00008000
2c70: %r10_0 = or %r11_0, 0x012c0000
2c78: store_word_0_100 %r11_0, MC0_DRAM_CMD
2c7c: %r10_0 = xor %r11_0, 0x00008000
2c84: %r10_0 = and %r11_0, 0x0003e000
2c8c: %r10_0 = or %r11_0, 0x01b00000
2c94: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
2c9c: %r10_0 = or %r11_0, %r11_1
2ca0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
2ca8: %r10_0 = or %r11_0, %r11_1
2cac: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
2cb4: %r10_0 = or %r11_0, %r11_1
2cb8: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
2cc0: %r10_0 = or %r11_0, %r11_1
2cc4: store_word_0_100 %r11_0, MC0_DRAM_CMD
2cc8: %r10_0 = or %r11_0, 0x02000000
2cd0: store_word_0_100 %r11_0, MC0_DRAM_CMD
2cd4: %r10_0 = and %r11_0, 0x0003e000
2cdc: %r10_0 = xor %r11_0, 0x00010000
2ce4: %r10_0 = or %r11_0, 0x1f2c0000
2cec: store_word_0_100 %r11_0, MC0_DRAM_CMD
2cf0: %r10_0 = xor %r11_0, 0x00010000
2cf8: %r10_0 = and %r11_0, 0x0003e000
2d00: %r10_0 = or %r11_0, 0x1f280000
2d08: store_word_0_100 %r11_0, MC0_DRAM_CMD
2d0c: %r10_0 = xor %r11_0, 0x00008000
2d14: store_word_0_100 %r11_0, MC0_DRAM_CMD
2d18: %r10_0 = xor %r11_0, 0x00008000
2d20: %r10_0 = xor %r11_0, 0x00010000
2d28: store_word_0_100 %r11_0, MC0_DRAM_CMD
2d2c: %r10_0 = xor %r11_0, 0x00010000
2d34: store_word_0_100 2, MC0_CNTL
2d38: store_word_0_100 0x00001605, MC0_CNTL
2d40: store_word_0_100 0x00000605, MC0_CNTL
2d48: %r10_1 = add %r10_1, 0x00000020
2d50: store_word_0_100 0, MC0_CNTL
2d54: store_word_0_100 0, MC0_POINTER
2d58: %r10_0 = 0
2d5c: %r11_1 = rotlw_by_25_then_and %r10_1, 1
2d60: beq %r11_1, 1 -> 0x2d68 v
2d64: %r10_0 = -1
2d68: store_word %r11_0, MC0_DRAM_DATA
2d6c: %r10_0 = xor %r11_0, -1
2d70: store_word %r11_0, MC1_DRAM_DATA
2d74: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d78: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d7c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d80: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d84: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d88: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d8c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d90: store_word_0_100 %r10_0, MC0_DRAM_DATA
2d94: %r10_0 = 0
2d98: %r11_1 = rotlw_by_25_then_and %r10_1, 1
2d9c: beq %r11_1, 1 -> 0x2da4 v
2da0: %r10_0 = -1
2da4: store_word %r11_0, MC0_DRAM_DATA
2da8: %r10_0 = xor %r11_0, -1
2dac: store_word %r11_0, MC1_DRAM_DATA
2db0: store_word_0_100 %r10_0, MC0_DRAM_DATA
2db4: store_word_0_100 %r10_0, MC0_DRAM_DATA
2db8: %r10_0 = xor %r10_0, -1
2dbc: store_word_0_100 %r10_0, MC0_DRAM_DATA
2dc0: store_word_0_100 %r10_0, MC0_DRAM_DATA
2dc4: %r10_0 = xor %r10_0, -1
2dc8: store_word_0_100 %r10_0, MC0_DRAM_DATA
2dcc: store_word_0_100 %r10_0, MC0_DRAM_DATA
2dd0: %r10_0 = xor %r10_0, -1
2dd4: store_word_0_100 %r10_0, MC0_DRAM_DATA
2dd8: store_word_0_100 %r10_0, MC0_DRAM_DATA
2ddc: %r10_0 = 0x0f2c0000
2de4: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
2dec: %r10_0 = or %r11_0, %r11_1
2df0: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
2df8: %r10_0 = or %r11_0, %r11_1
2dfc: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
2e04: %r10_0 = or %r11_0, %r11_1
2e08: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
2e10: %r10_0 = or %r11_0, %r11_1
2e14: store_word_0_100 %r11_0, MC0_DRAM_CMD
2e18: %r10_0 = and %r11_0, 0x0003e000
2e20: %r10_0 = xor %r11_0, 0x00008000
2e28: %r10_0 = or %r11_0, 0x012c0000
2e30: store_word_0_100 %r11_0, MC0_DRAM_CMD
2e34: %r10_0 = xor %r11_0, 0x00008000
2e3c: %r10_0 = and %r11_0, 0x0003e000
2e44: %r10_0 = or %r11_0, 0x01b00000
2e4c: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
2e54: %r10_0 = or %r11_0, %r11_1
2e58: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
2e60: %r10_0 = or %r11_0, %r11_1
2e64: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
2e6c: %r10_0 = or %r11_0, %r11_1
2e70: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
2e78: %r10_0 = or %r11_0, %r11_1
2e7c: store_word_0_100 %r11_0, MC0_DRAM_CMD
2e80: %r10_0 = or %r11_0, 0x02000000
2e88: store_word_0_100 %r11_0, MC0_DRAM_CMD
2e8c: %r10_0 = and %r11_0, 0x0003e000
2e94: %r10_0 = xor %r11_0, 0x00010000
2e9c: %r10_0 = or %r11_0, 0x1f2c0000
2ea4: store_word_0_100 %r11_0, MC0_DRAM_CMD
2ea8: %r10_0 = xor %r11_0, 0x00010000
2eb0: %r10_0 = and %r11_0, 0x0003e000
2eb8: %r10_0 = or %r11_0, 0x1f280000
2ec0: store_word_0_100 %r11_0, MC0_DRAM_CMD
2ec4: %r10_0 = xor %r11_0, 0x00008000
2ecc: store_word_0_100 %r11_0, MC0_DRAM_CMD
2ed0: %r10_0 = xor %r11_0, 0x00008000
2ed8: %r10_0 = xor %r11_0, 0x00010000
2ee0: store_word_0_100 %r11_0, MC0_DRAM_CMD
2ee4: %r10_0 = xor %r11_0, 0x00010000
2eec: store_word_0_100 2, MC0_CNTL
2ef0: store_word_0_100 0x00001605, MC0_CNTL
2ef8: store_word_0_100 0x00000605, MC0_CNTL
2f00: %r10_1 = add %r10_1, 0x00000020
2f08: store_word_0_100 0, MC0_CNTL
2f0c: store_word_0_100 0, MC0_POINTER
2f10: %r10_0 = 0
2f14: %r11_1 = rotlw_by_25_then_and %r10_1, 1
2f18: beq %r11_1, 1 -> 0x2f20 v
2f1c: %r10_0 = -1
2f20: store_word %r11_0, MC0_DRAM_DATA
2f24: %r10_0 = xor %r11_0, -1
2f28: store_word %r11_0, MC1_DRAM_DATA
2f2c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f30: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f34: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f38: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f3c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f40: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f44: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f48: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f4c: %r10_0 = 0
2f50: %r11_1 = rotlw_by_25_then_and %r10_1, 1
2f54: beq %r11_1, 1 -> 0x2f5c v
2f58: %r10_0 = -1
2f5c: store_word %r11_0, MC0_DRAM_DATA
2f60: %r10_0 = xor %r11_0, -1
2f64: store_word %r11_0, MC1_DRAM_DATA
2f68: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f6c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f70: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f74: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f78: %r10_0 = xor %r10_0, -1
2f7c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f80: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f84: %r10_0 = xor %r10_0, -1
2f88: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f8c: store_word_0_100 %r10_0, MC0_DRAM_DATA
2f90: %r10_0 = xor %r10_0, -1
2f94: %r10_0 = 0x0f2c0000
2f9c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
2fa4: %r10_0 = or %r11_0, %r11_1
2fa8: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
2fb0: %r10_0 = or %r11_0, %r11_1
2fb4: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
2fbc: %r10_0 = or %r11_0, %r11_1
2fc0: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
2fc8: %r10_0 = or %r11_0, %r11_1
2fcc: store_word_0_100 %r11_0, MC0_DRAM_CMD
2fd0: %r10_0 = and %r11_0, 0x0003e000
2fd8: %r10_0 = xor %r11_0, 0x00008000
2fe0: %r10_0 = or %r11_0, 0x012c0000
2fe8: store_word_0_100 %r11_0, MC0_DRAM_CMD
2fec: %r10_0 = xor %r11_0, 0x00008000
2ff4: %r10_0 = and %r11_0, 0x0003e000
2ffc: %r10_0 = or %r11_0, 0x01b00000
3004: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
300c: %r10_0 = or %r11_0, %r11_1
3010: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
3018: %r10_0 = or %r11_0, %r11_1
301c: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
3024: %r10_0 = or %r11_0, %r11_1
3028: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
3030: %r10_0 = or %r11_0, %r11_1
3034: store_word_0_100 %r11_0, MC0_DRAM_CMD
3038: %r10_0 = or %r11_0, 0x02000000
3040: store_word_0_100 %r11_0, MC0_DRAM_CMD
3044: %r10_0 = and %r11_0, 0x0003e000
304c: %r10_0 = xor %r11_0, 0x00010000
3054: %r10_0 = or %r11_0, 0x1f2c0000
305c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3060: %r10_0 = xor %r11_0, 0x00010000
3068: %r10_0 = and %r11_0, 0x0003e000
3070: %r10_0 = or %r11_0, 0x1f280000
3078: store_word_0_100 %r11_0, MC0_DRAM_CMD
307c: %r10_0 = xor %r11_0, 0x00008000
3084: store_word_0_100 %r11_0, MC0_DRAM_CMD
3088: %r10_0 = xor %r11_0, 0x00008000
3090: %r10_0 = xor %r11_0, 0x00010000
3098: store_word_0_100 %r11_0, MC0_DRAM_CMD
309c: %r10_0 = xor %r11_0, 0x00010000
30a4: store_word_0_100 2, MC0_CNTL
30a8: store_word_0_100 0x00001605, MC0_CNTL
30b0: store_word_0_100 0x00000605, MC0_CNTL
30b8: %r10_1 = add %r10_1, 0x00000020
30c0: store_word_0_100 0, MC0_CNTL
30c4: store_word_0_100 0, MC0_POINTER
30c8: %r10_0 = 0
30cc: %r11_1 = rotlw_by_25_then_and %r10_1, 1
30d0: beq %r11_1, 1 -> 0x30d8 v
30d4: %r10_0 = -1
30d8: store_word %r11_0, MC0_DRAM_DATA
30dc: %r10_0 = xor %r11_0, -1
30e0: store_word %r11_0, MC1_DRAM_DATA
30e4: store_word_0_100 %r10_0, MC0_DRAM_DATA
30e8: store_word_0_100 %r10_0, MC0_DRAM_DATA
30ec: store_word_0_100 %r10_0, MC0_DRAM_DATA
30f0: store_word_0_100 %r10_0, MC0_DRAM_DATA
30f4: store_word_0_100 %r10_0, MC0_DRAM_DATA
30f8: store_word_0_100 %r10_0, MC0_DRAM_DATA
30fc: store_word_0_100 %r10_0, MC0_DRAM_DATA
3100: store_word_0_100 %r10_0, MC0_DRAM_DATA
3104: %r10_0 = 0
3108: %r11_1 = rotlw_by_25_then_and %r10_1, 1
310c: beq %r11_1, 1 -> 0x3114 v
3110: %r10_0 = -1
3114: store_word %r11_0, MC0_DRAM_DATA
3118: %r10_0 = xor %r11_0, -1
311c: store_word %r11_0, MC1_DRAM_DATA
3120: store_word_0_100 %r10_0, MC0_DRAM_DATA
3124: store_word_0_100 %r10_0, MC0_DRAM_DATA
3128: store_word_0_100 %r10_0, MC0_DRAM_DATA
312c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3130: %r10_0 = xor %r10_0, -1
3134: store_word_0_100 %r10_0, MC0_DRAM_DATA
3138: store_word_0_100 %r10_0, MC0_DRAM_DATA
313c: %r10_0 = xor %r10_0, -1
3140: store_word_0_100 %r10_0, MC0_DRAM_DATA
3144: store_word_0_100 %r10_0, MC0_DRAM_DATA
3148: %r10_0 = xor %r10_0, -1
314c: %r10_0 = 0x0f2c0000
3154: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
315c: %r10_0 = or %r11_0, %r11_1
3160: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
3168: %r10_0 = or %r11_0, %r11_1
316c: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
3174: %r10_0 = or %r11_0, %r11_1
3178: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
3180: %r10_0 = or %r11_0, %r11_1
3184: store_word_0_100 %r11_0, MC0_DRAM_CMD
3188: %r10_0 = and %r11_0, 0x0003e000
3190: %r10_0 = xor %r11_0, 0x00008000
3198: %r10_0 = or %r11_0, 0x012c0000
31a0: store_word_0_100 %r11_0, MC0_DRAM_CMD
31a4: %r10_0 = xor %r11_0, 0x00008000
31ac: %r10_0 = and %r11_0, 0x0003e000
31b4: %r10_0 = or %r11_0, 0x01b00000
31bc: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
31c4: %r10_0 = or %r11_0, %r11_1
31c8: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
31d0: %r10_0 = or %r11_0, %r11_1
31d4: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
31dc: %r10_0 = or %r11_0, %r11_1
31e0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
31e8: %r10_0 = or %r11_0, %r11_1
31ec: store_word_0_100 %r11_0, MC0_DRAM_CMD
31f0: %r10_0 = or %r11_0, 0x02000000
31f8: store_word_0_100 %r11_0, MC0_DRAM_CMD
31fc: %r10_0 = and %r11_0, 0x0003e000
3204: %r10_0 = xor %r11_0, 0x00010000
320c: %r10_0 = or %r11_0, 0x1f2c0000
3214: store_word_0_100 %r11_0, MC0_DRAM_CMD
3218: %r10_0 = xor %r11_0, 0x00010000
3220: %r10_0 = and %r11_0, 0x0003e000
3228: %r10_0 = or %r11_0, 0x1f280000
3230: store_word_0_100 %r11_0, MC0_DRAM_CMD
3234: %r10_0 = xor %r11_0, 0x00008000
323c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3240: %r10_0 = xor %r11_0, 0x00008000
3248: %r10_0 = xor %r11_0, 0x00010000
3250: store_word_0_100 %r11_0, MC0_DRAM_CMD
3254: %r10_0 = xor %r11_0, 0x00010000
325c: store_word_0_100 2, MC0_CNTL
3260: store_word_0_100 0x00001605, MC0_CNTL
3268: store_word_0_100 0x00000605, MC0_CNTL
3270: %r10_1 = add %r10_1, 0x00000020
3278: store_word_0_100 0, MC0_CNTL
327c: store_word_0_100 0, MC0_POINTER
3280: %r10_0 = 0
3284: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3288: beq %r11_1, 1 -> 0x3290 v
328c: %r10_0 = -1
3290: store_word %r11_0, MC0_DRAM_DATA
3294: %r10_0 = xor %r11_0, -1
3298: store_word %r11_0, MC1_DRAM_DATA
329c: store_word_0_100 %r10_0, MC0_DRAM_DATA
32a0: store_word_0_100 %r10_0, MC0_DRAM_DATA
32a4: store_word_0_100 %r10_0, MC0_DRAM_DATA
32a8: store_word_0_100 %r10_0, MC0_DRAM_DATA
32ac: store_word_0_100 %r10_0, MC0_DRAM_DATA
32b0: store_word_0_100 %r10_0, MC0_DRAM_DATA
32b4: store_word_0_100 %r10_0, MC0_DRAM_DATA
32b8: store_word_0_100 %r10_0, MC0_DRAM_DATA
32bc: %r10_0 = 0
32c0: %r11_1 = rotlw_by_25_then_and %r10_1, 1
32c4: beq %r11_1, 1 -> 0x32cc v
32c8: %r10_0 = -1
32cc: store_word %r11_0, MC0_DRAM_DATA
32d0: %r10_0 = xor %r11_0, -1
32d4: store_word %r11_0, MC1_DRAM_DATA
32d8: store_word_0_100 %r10_0, MC0_DRAM_DATA
32dc: store_word_0_100 %r10_0, MC0_DRAM_DATA
32e0: %r10_0 = xor %r10_0, -1
32e4: store_word_0_100 %r10_0, MC0_DRAM_DATA
32e8: store_word_0_100 %r10_0, MC0_DRAM_DATA
32ec: %r10_0 = xor %r10_0, -1
32f0: store_word_0_100 %r10_0, MC0_DRAM_DATA
32f4: store_word_0_100 %r10_0, MC0_DRAM_DATA
32f8: %r10_0 = xor %r10_0, -1
32fc: store_word_0_100 %r10_0, MC0_DRAM_DATA
3300: store_word_0_100 %r10_0, MC0_DRAM_DATA
3304: %r10_0 = 0x0f2c0000
330c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
3314: %r10_0 = or %r11_0, %r11_1
3318: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
3320: %r10_0 = or %r11_0, %r11_1
3324: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
332c: %r10_0 = or %r11_0, %r11_1
3330: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
3338: %r10_0 = or %r11_0, %r11_1
333c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3340: %r10_0 = and %r11_0, 0x0003e000
3348: %r10_0 = xor %r11_0, 0x00008000
3350: %r10_0 = or %r11_0, 0x012c0000
3358: store_word_0_100 %r11_0, MC0_DRAM_CMD
335c: %r10_0 = xor %r11_0, 0x00008000
3364: %r10_0 = and %r11_0, 0x0003e000
336c: %r10_0 = or %r11_0, 0x01b00000
3374: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
337c: %r10_0 = or %r11_0, %r11_1
3380: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
3388: %r10_0 = or %r11_0, %r11_1
338c: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
3394: %r10_0 = or %r11_0, %r11_1
3398: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
33a0: %r10_0 = or %r11_0, %r11_1
33a4: store_word_0_100 %r11_0, MC0_DRAM_CMD
33a8: %r10_0 = or %r11_0, 0x02000000
33b0: store_word_0_100 %r11_0, MC0_DRAM_CMD
33b4: %r10_0 = and %r11_0, 0x0003e000
33bc: %r10_0 = xor %r11_0, 0x00010000
33c4: %r10_0 = or %r11_0, 0x1f2c0000
33cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
33d0: %r10_0 = xor %r11_0, 0x00010000
33d8: %r10_0 = and %r11_0, 0x0003e000
33e0: %r10_0 = or %r11_0, 0x1f280000
33e8: store_word_0_100 %r11_0, MC0_DRAM_CMD
33ec: %r10_0 = xor %r11_0, 0x00008000
33f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
33f8: %r10_0 = xor %r11_0, 0x00008000
3400: %r10_0 = xor %r11_0, 0x00010000
3408: store_word_0_100 %r11_0, MC0_DRAM_CMD
340c: %r10_0 = xor %r11_0, 0x00010000
3414: store_word_0_100 2, MC0_CNTL
3418: store_word_0_100 0x00001605, MC0_CNTL
3420: store_word_0_100 0x00000605, MC0_CNTL
3428: %r10_1 = add %r10_1, 0x00000020
3430: store_word_0_100 0, MC0_CNTL
3434: store_word_0_100 0, MC0_POINTER
3438: %r10_0 = 0
343c: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3440: beq %r11_1, 1 -> 0x3448 v
3444: %r10_0 = -1
3448: store_word %r11_0, MC0_DRAM_DATA
344c: %r10_0 = xor %r11_0, -1
3450: store_word %r11_0, MC1_DRAM_DATA
3454: store_word_0_100 %r10_0, MC0_DRAM_DATA
3458: store_word_0_100 %r10_0, MC0_DRAM_DATA
345c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3460: store_word_0_100 %r10_0, MC0_DRAM_DATA
3464: store_word_0_100 %r10_0, MC0_DRAM_DATA
3468: store_word_0_100 %r10_0, MC0_DRAM_DATA
346c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3470: store_word_0_100 %r10_0, MC0_DRAM_DATA
3474: %r10_0 = 0
3478: %r11_1 = rotlw_by_25_then_and %r10_1, 1
347c: beq %r11_1, 1 -> 0x3484 v
3480: %r10_0 = -1
3484: store_word %r11_0, MC0_DRAM_DATA
3488: %r10_0 = xor %r11_0, -1
348c: store_word %r11_0, MC1_DRAM_DATA
3490: store_word_0_100 %r10_0, MC0_DRAM_DATA
3494: store_word_0_100 %r10_0, MC0_DRAM_DATA
3498: %r10_0 = xor %r10_0, -1
349c: store_word_0_100 %r10_0, MC0_DRAM_DATA
34a0: store_word_0_100 %r10_0, MC0_DRAM_DATA
34a4: %r10_0 = xor %r10_0, -1
34a8: store_word_0_100 %r10_0, MC0_DRAM_DATA
34ac: store_word_0_100 %r10_0, MC0_DRAM_DATA
34b0: %r10_0 = xor %r10_0, -1
34b4: store_word_0_100 %r10_0, MC0_DRAM_DATA
34b8: store_word_0_100 %r10_0, MC0_DRAM_DATA
34bc: %r10_0 = 0x0f2c0000
34c4: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
34cc: %r10_0 = or %r11_0, %r11_1
34d0: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
34d8: %r10_0 = or %r11_0, %r11_1
34dc: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
34e4: %r10_0 = or %r11_0, %r11_1
34e8: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
34f0: %r10_0 = or %r11_0, %r11_1
34f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
34f8: %r10_0 = and %r11_0, 0x0003e000
3500: %r10_0 = xor %r11_0, 0x00008000
3508: %r10_0 = or %r11_0, 0x012c0000
3510: store_word_0_100 %r11_0, MC0_DRAM_CMD
3514: %r10_0 = xor %r11_0, 0x00008000
351c: %r10_0 = and %r11_0, 0x0003e000
3524: %r10_0 = or %r11_0, 0x01b00000
352c: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
3534: %r10_0 = or %r11_0, %r11_1
3538: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
3540: %r10_0 = or %r11_0, %r11_1
3544: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
354c: %r10_0 = or %r11_0, %r11_1
3550: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
3558: %r10_0 = or %r11_0, %r11_1
355c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3560: %r10_0 = or %r11_0, 0x02000000
3568: store_word_0_100 %r11_0, MC0_DRAM_CMD
356c: %r10_0 = and %r11_0, 0x0003e000
3574: %r10_0 = xor %r11_0, 0x00010000
357c: %r10_0 = or %r11_0, 0x1f2c0000
3584: store_word_0_100 %r11_0, MC0_DRAM_CMD
3588: %r10_0 = xor %r11_0, 0x00010000
3590: %r10_0 = and %r11_0, 0x0003e000
3598: %r10_0 = or %r11_0, 0x1f280000
35a0: store_word_0_100 %r11_0, MC0_DRAM_CMD
35a4: %r10_0 = xor %r11_0, 0x00008000
35ac: store_word_0_100 %r11_0, MC0_DRAM_CMD
35b0: %r10_0 = xor %r11_0, 0x00008000
35b8: %r10_0 = xor %r11_0, 0x00010000
35c0: store_word_0_100 %r11_0, MC0_DRAM_CMD
35c4: %r10_0 = xor %r11_0, 0x00010000
35cc: store_word_0_100 2, MC0_CNTL
35d0: store_word_0_100 0x00001605, MC0_CNTL
35d8: store_word_0_100 0x00000605, MC0_CNTL
35e0: %r10_1 = add %r10_1, 0x00000020
35e8: store_word_0_100 0, MC0_CNTL
35ec: store_word_0_100 0, MC0_POINTER
35f0: %r10_0 = 0
35f4: %r11_1 = rotlw_by_25_then_and %r10_1, 1
35f8: beq %r11_1, 1 -> 0x3600 v
35fc: %r10_0 = -1
3600: store_word %r11_0, MC0_DRAM_DATA
3604: %r10_0 = xor %r11_0, -1
3608: store_word %r11_0, MC1_DRAM_DATA
360c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3610: store_word_0_100 %r10_0, MC0_DRAM_DATA
3614: store_word_0_100 %r10_0, MC0_DRAM_DATA
3618: store_word_0_100 %r10_0, MC0_DRAM_DATA
361c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3620: store_word_0_100 %r10_0, MC0_DRAM_DATA
3624: store_word_0_100 %r10_0, MC0_DRAM_DATA
3628: store_word_0_100 %r10_0, MC0_DRAM_DATA
362c: %r10_0 = 0
3630: %r11_1 = rotlw_by_25_then_and %r10_1, 1
3634: beq %r11_1, 1 -> 0x363c v
3638: %r10_0 = -1
363c: store_word %r11_0, MC0_DRAM_DATA
3640: %r10_0 = xor %r11_0, -1
3644: store_word %r11_0, MC1_DRAM_DATA
3648: store_word_0_100 %r10_0, MC0_DRAM_DATA
364c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3650: store_word_0_100 %r10_0, MC0_DRAM_DATA
3654: store_word_0_100 %r10_0, MC0_DRAM_DATA
3658: %r10_0 = xor %r10_0, -1
365c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3660: store_word_0_100 %r10_0, MC0_DRAM_DATA
3664: %r10_0 = xor %r10_0, -1
3668: store_word_0_100 %r10_0, MC0_DRAM_DATA
366c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3670: %r10_0 = xor %r10_0, -1
3674: %r10_0 = 0x0f2c0000
367c: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
3684: %r10_0 = or %r11_0, %r11_1
3688: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
3690: %r10_0 = or %r11_0, %r11_1
3694: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
369c: %r10_0 = or %r11_0, %r11_1
36a0: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
36a8: %r10_0 = or %r11_0, %r11_1
36ac: store_word_0_100 %r11_0, MC0_DRAM_CMD
36b0: %r10_0 = and %r11_0, 0x0003e000
36b8: %r10_0 = xor %r11_0, 0x00008000
36c0: %r10_0 = or %r11_0, 0x012c0000
36c8: store_word_0_100 %r11_0, MC0_DRAM_CMD
36cc: %r10_0 = xor %r11_0, 0x00008000
36d4: %r10_0 = and %r11_0, 0x0003e000
36dc: %r10_0 = or %r11_0, 0x01b00000
36e4: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
36ec: %r10_0 = or %r11_0, %r11_1
36f0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
36f8: %r10_0 = or %r11_0, %r11_1
36fc: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
3704: %r10_0 = or %r11_0, %r11_1
3708: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
3710: %r10_0 = or %r11_0, %r11_1
3714: store_word_0_100 %r11_0, MC0_DRAM_CMD
3718: %r10_0 = or %r11_0, 0x02000000
3720: store_word_0_100 %r11_0, MC0_DRAM_CMD
3724: %r10_0 = and %r11_0, 0x0003e000
372c: %r10_0 = xor %r11_0, 0x00010000
3734: %r10_0 = or %r11_0, 0x1f2c0000
373c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3740: %r10_0 = xor %r11_0, 0x00010000
3748: %r10_0 = and %r11_0, 0x0003e000
3750: %r10_0 = or %r11_0, 0x1f280000
3758: store_word_0_100 %r11_0, MC0_DRAM_CMD
375c: %r10_0 = xor %r11_0, 0x00008000
3764: store_word_0_100 %r11_0, MC0_DRAM_CMD
3768: %r10_0 = xor %r11_0, 0x00008000
3770: %r10_0 = xor %r11_0, 0x00010000
3778: store_word_0_100 %r11_0, MC0_DRAM_CMD
377c: %r10_0 = xor %r11_0, 0x00010000
3784: store_word_0_100 2, MC0_CNTL
3788: store_word_0_100 0x00001605, MC0_CNTL
3790: store_word_0_100 0x00000605, MC0_CNTL
3798: %r10_1 = add %r10_1, 0x00000020
37a0: store_word_0_100 0, MC0_CNTL
37a4: store_word_0_100 0, MC0_POINTER
37a8: %r10_0 = 0
37ac: %r11_1 = rotlw_by_25_then_and %r10_1, 1
37b0: beq %r11_1, 1 -> 0x37b8 v
37b4: %r10_0 = -1
37b8: store_word %r11_0, MC0_DRAM_DATA
37bc: %r10_0 = xor %r11_0, -1
37c0: store_word %r11_0, MC1_DRAM_DATA
37c4: store_word_0_100 %r10_0, MC0_DRAM_DATA
37c8: store_word_0_100 %r10_0, MC0_DRAM_DATA
37cc: store_word_0_100 %r10_0, MC0_DRAM_DATA
37d0: store_word_0_100 %r10_0, MC0_DRAM_DATA
37d4: store_word_0_100 %r10_0, MC0_DRAM_DATA
37d8: store_word_0_100 %r10_0, MC0_DRAM_DATA
37dc: store_word_0_100 %r10_0, MC0_DRAM_DATA
37e0: store_word_0_100 %r10_0, MC0_DRAM_DATA
37e4: %r10_0 = 0
37e8: %r11_1 = rotlw_by_25_then_and %r10_1, 1
37ec: beq %r11_1, 1 -> 0x37f4 v
37f0: %r10_0 = -1
37f4: store_word %r11_0, MC0_DRAM_DATA
37f8: %r10_0 = xor %r11_0, -1
37fc: store_word %r11_0, MC1_DRAM_DATA
3800: store_word_0_100 %r10_0, MC0_DRAM_DATA
3804: store_word_0_100 %r10_0, MC0_DRAM_DATA
3808: store_word_0_100 %r10_0, MC0_DRAM_DATA
380c: store_word_0_100 %r10_0, MC0_DRAM_DATA
3810: %r10_0 = xor %r10_0, -1
3814: store_word_0_100 %r10_0, MC0_DRAM_DATA
3818: store_word_0_100 %r10_0, MC0_DRAM_DATA
381c: %r10_0 = xor %r10_0, -1
3820: store_word_0_100 %r10_0, MC0_DRAM_DATA
3824: store_word_0_100 %r10_0, MC0_DRAM_DATA
3828: %r10_0 = xor %r10_0, -1
382c: %r10_0 = 0x0f2c0000
3834: %r11_1 = rotlw_by_1_then_and %r10_1, 0x00008000
383c: %r10_0 = or %r11_0, %r11_1
3840: %r11_1 = rotlw_by_5_then_and %r10_1, 0x00010000
3848: %r10_0 = or %r11_0, %r11_1
384c: %r11_1 = rotlw_by_2_then_and %r10_1, 0x00020000
3854: %r10_0 = or %r11_0, %r11_1
3858: %r11_1 = rotlw_by_16_then_and %r10_1, 0x00001fff
3860: %r10_0 = or %r11_0, %r11_1
3864: store_word_0_100 %r11_0, MC0_DRAM_CMD
3868: %r10_0 = and %r11_0, 0x0003e000
3870: %r10_0 = xor %r11_0, 0x00008000
3878: %r10_0 = or %r11_0, 0x012c0000
3880: store_word_0_100 %r11_0, MC0_DRAM_CMD
3884: %r10_0 = xor %r11_0, 0x00008000
388c: %r10_0 = and %r11_0, 0x0003e000
3894: %r10_0 = or %r11_0, 0x01b00000
389c: %r11_1 = rotlw_by_29_then_and %r10_1, 0x0000000f
38a4: %r10_0 = or %r11_0, %r11_1
38a8: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000070
38b0: %r10_0 = or %r11_0, %r11_1
38b4: %r11_1 = rotlw_by_27_then_and %r10_1, 0x00000080
38bc: %r10_0 = or %r11_0, %r11_1
38c0: %r11_1 = rotlw_by_28_then_and %r10_1, 0x00000200
38c8: %r10_0 = or %r11_0, %r11_1
38cc: store_word_0_100 %r11_0, MC0_DRAM_CMD
38d0: %r10_0 = or %r11_0, 0x02000000
38d8: store_word_0_100 %r11_0, MC0_DRAM_CMD
38dc: %r10_0 = and %r11_0, 0x0003e000
38e4: %r10_0 = xor %r11_0, 0x00010000
38ec: %r10_0 = or %r11_0, 0x1f2c0000
38f4: store_word_0_100 %r11_0, MC0_DRAM_CMD
38f8: %r10_0 = xor %r11_0, 0x00010000
3900: %r10_0 = and %r11_0, 0x0003e000
3908: %r10_0 = or %r11_0, 0x1f280000
3910: store_word_0_100 %r11_0, MC0_DRAM_CMD
3914: %r10_0 = xor %r11_0, 0x00008000
391c: store_word_0_100 %r11_0, MC0_DRAM_CMD
3920: %r10_0 = xor %r11_0, 0x00008000
3928: %r10_0 = xor %r11_0, 0x00010000
3930: store_word_0_100 %r11_0, MC0_DRAM_CMD
3934: %r10_0 = xor %r11_0, 0x00010000
393c: store_word_0_100 2, MC0_CNTL
3940: store_word_0_100 0x00001605, MC0_CNTL
3948: store_word_0_100 0x00000605, MC0_CNTL
3950: %r10_1 = add %r10_1, 0x00000020
3958: return
395c: %r10_1 = 0x00001800
3964: %r10_0 = 0x01800180
396c: call 0x2b98
3970: %r10_0 = 0x02400240
3978: call 0x2b98
397c: %r10_0 = 0x04200420
3984: call 0x2b98
3988: %r10_0 = 0x08100810
3990: call 0x2b98
3994: %r10_0 = 0x10081008
399c: call 0x2b98
39a0: %r10_0 = 0x20042004
39a8: call 0x2b98
39ac: %r10_0 = 0x40024002
39b4: call 0x2b98
39b8: %r10_0 = 0x80018001
39c0: call 0x2b98
39c4: return
39c8: %r10_0 = load_word -4
39cc: %r11_1 = xor %r11_1, %r10_0
39d0: %r13_1 = or %r13_1, %r11_1
39d4: %r10_1 = add %r10_1, 0x00000008
39dc: %r10_0 = xor %r10_0, -1
39e0: %r10_0 = load_word -4
39e4: %r11_1 = xor %r11_1, %r10_0
39e8: %r13_1 = or %r13_1, %r11_1
39ec: %r10_1 = add %r10_1, 0x00000008
39f4: %r10_0 = xor %r10_0, -1
39f8: %r10_0 = load_word -4
39fc: %r11_1 = xor %r11_1, %r10_0
3a00: %r13_1 = or %r13_1, %r11_1
3a04: %r10_1 = add %r10_1, 0x00000008
3a0c: %r10_0 = xor %r10_0, -1
3a10: %r10_0 = load_word -4
3a14: %r11_1 = xor %r11_1, %r10_0
3a18: %r13_1 = or %r13_1, %r11_1
3a1c: %r10_1 = add %r10_1, 0x00000008
3a24: %r10_0 = load_word -4
3a28: %r11_1 = xor %r11_1, %r10_0
3a2c: %r13_1 = or %r13_1, %r11_1
3a30: %r10_1 = add %r10_1, 0x00000008
3a38: %r10_0 = xor %r10_0, -1
3a3c: %r10_0 = load_word -4
3a40: %r11_1 = xor %r11_1, %r10_0
3a44: %r13_1 = or %r13_1, %r11_1
3a48: %r10_1 = add %r10_1, 0x00000008
3a50: %r10_0 = xor %r10_0, -1
3a54: %r10_0 = load_word -4
3a58: %r11_1 = xor %r11_1, %r10_0
3a5c: %r13_1 = or %r13_1, %r11_1
3a60: %r10_1 = add %r10_1, 0x00000008
3a68: %r10_0 = xor %r10_0, -1
3a6c: %r10_0 = load_word -4
3a70: %r11_1 = xor %r11_1, %r10_0
3a74: %r13_1 = or %r13_1, %r11_1
3a78: %r10_1 = add %r10_1, 0x00000008
3a80: %r10_1 = add %r10_1, 0x000000c0
3a88: return
3a8c: %r13_1 = 0
3a90: store_word_0_100 0x00001605, MC0_CNTL
3a98: store_word_0_100 0x00000605, MC0_CNTL
3aa0: %r10_0 = 0x01800180
3aa8: call 0x39c8
3aac: %r10_0 = 0x02400240
3ab4: call 0x39c8
3ab8: %r10_0 = 0x04200420
3ac0: call 0x39c8
3ac4: %r10_0 = 0x08100810
3acc: call 0x39c8
3ad0: %r10_0 = 0x10081008
3ad8: call 0x39c8
3adc: %r10_0 = 0x20042004
3ae4: call 0x39c8
3ae8: %r10_0 = 0x40024002
3af0: call 0x39c8
3af4: %r10_0 = 0x80018001
3afc: call 0x39c8
3b00: %r12_0 = %r13_1
3b04: %r13_1 = 0
3b08: %r12_0 = load_word -4
3b0c: branch_cond2 %r11_1, 0x00000018 -> 0x3bac v
3b14: %r10_0 = load_word -4
3b18: %r11_1 = rotlw_by_31_then_and %r11_1, 0x7fffffff
3b20: %r10_1 = add %r10_1, %r11_1
3b24: %r10_1 = subf %r10_1, 0x00000800
3b2c: store_word_0_100 0x00001605, MC0_CNTL
3b34: store_word_0_100 0x00000605, MC0_CNTL
3b3c: %r10_0 = 0x01800180
3b44: call 0x39c8
3b48: %r10_0 = 0x02400240
3b50: call 0x39c8
3b54: %r10_0 = 0x04200420
3b5c: call 0x39c8
3b60: %r10_0 = 0x08100810
3b68: call 0x39c8
3b6c: %r10_0 = 0x10081008
3b74: call 0x39c8
3b78: %r10_0 = 0x20042004
3b80: call 0x39c8
3b84: %r10_0 = 0x40024002
3b8c: call 0x39c8
3b90: %r10_0 = 0x80018001
3b98: call 0x39c8
3b9c: %r10_0 = load_word -4
3ba0: %r11_1 = rotlw_by_31_then_and %r11_1, 0x7fffffff
3ba8: %r10_1 = subf %r10_1, %r11_1
3bac: %r12_1 = %r13_1
3bb0: %r13_1 = or %r13_1, %r12_0
3bb4: return
3bb8: %r10_0 = xor %r10_0, -1
3bbc: %r10_0 = load_word -1
3bc0: %r12_0 = xor %r13_0, %r10_0
3bc4: %r12_1 = or %r12_1, %r13_0
3bc8: %r12_0 = xor %r13_0, -1
3bcc: %r12_0 = or %r12_0, %r13_0
3bd0: %r10_1 = add %r10_1, 0x00000008
3bd8: %r10_0 = xor %r10_0, -1
3bdc: %r10_0 = load_word -1
3be0: %r12_0 = xor %r13_0, %r10_0
3be4: %r12_1 = or %r12_1, %r13_0
3be8: %r12_0 = xor %r13_0, -1
3bec: %r12_0 = or %r12_0, %r13_0
3bf0: %r10_1 = add %r10_1, 0x00000008
3bf8: %r10_0 = xor %r10_0, -1
3bfc: %r10_1 = add %r10_1, 0x00000010
3c04: %r10_0 = xor %r10_0, -1
3c08: %r10_0 = load_word -1
3c0c: %r12_0 = xor %r13_0, %r10_0
3c10: %r12_1 = or %r12_1, %r13_0
3c14: %r12_0 = xor %r13_0, -1
3c18: %r12_0 = or %r12_0, %r13_0
3c1c: %r10_1 = add %r10_1, 0x00000008
3c24: %r10_0 = xor %r10_0, -1
3c28: %r10_0 = load_word -1
3c2c: %r12_0 = xor %r13_0, %r10_0
3c30: %r12_1 = or %r12_1, %r13_0
3c34: %r12_0 = xor %r13_0, -1
3c38: %r12_0 = or %r12_0, %r13_0
3c3c: %r10_1 = add %r10_1, 0x00000008
3c44: %r10_0 = xor %r10_0, -1
3c48: %r10_1 = add %r10_1, 0x00000010
3c50: %r10_1 = add %r10_1, 0x000000c0
3c58: return
3c5c: %r12_0 = 0
3c60: %r12_1 = 0
3c64: %r10_0 = 0x01800180
3c6c: call 0x3bb8
3c70: %r10_0 = 0x02400240
3c78: call 0x3bb8
3c7c: %r10_0 = 0x04200420
3c84: call 0x3bb8
3c88: %r10_0 = 0x08100810
3c90: call 0x3bb8
3c94: %r10_0 = 0x10081008
3c9c: call 0x3bb8
3ca0: %r10_0 = 0x20042004
3ca8: call 0x3bb8
3cac: %r10_0 = 0x40024002
3cb4: call 0x3bb8
3cb8: %r10_0 = 0x80018001
3cc0: call 0x3bb8
3cc4: %r10_0 = or %r11_0, %r12_0
3cc8: %r11_1 = or %r11_1, %r12_1
3ccc: return
3cd0: %r10_0 = xor %r10_0, -1
3cd4: %r10_0 = load_word -1
3cd8: %r12_0 = xor %r13_0, %r10_0
3cdc: %r12_1 = or %r12_1, %r13_0
3ce0: %r12_0 = xor %r13_0, -1
3ce4: %r12_0 = or %r12_0, %r13_0
3ce8: %r10_1 = add %r10_1, 0x00000008
3cf0: %r10_0 = xor %r10_0, -1
3cf4: %r10_0 = load_word -1
3cf8: %r12_0 = xor %r13_0, %r10_0
3cfc: %r12_1 = or %r12_1, %r13_0
3d00: %r12_0 = xor %r13_0, -1
3d04: %r12_0 = or %r12_0, %r13_0
3d08: %r10_1 = add %r10_1, 0x00000008
3d10: %r10_0 = xor %r10_0, -1
3d14: %r10_1 = add %r10_1, 0x00000010
3d1c: %r10_0 = xor %r10_0, -1
3d20: %r10_0 = load_word -1
3d24: %r12_0 = xor %r13_0, %r10_0
3d28: %r12_1 = or %r12_1, %r13_0
3d2c: %r12_0 = xor %r13_0, -1
3d30: %r12_0 = or %r12_0, %r13_0
3d34: %r10_1 = add %r10_1, 0x00000008
3d3c: %r10_0 = xor %r10_0, -1
3d40: %r10_0 = load_word -1
3d44: %r12_0 = xor %r13_0, %r10_0
3d48: %r12_1 = or %r12_1, %r13_0
3d4c: %r12_0 = xor %r13_0, -1
3d50: %r12_0 = or %r12_0, %r13_0
3d54: %r10_1 = add %r10_1, 0x00000008
3d5c: %r10_0 = xor %r10_0, -1
3d60: %r10_1 = add %r10_1, 0x00000010
3d68: %r10_1 = add %r10_1, 0x00000008
3d70: %r10_0 = xor %r10_0, -1
3d74: %r10_0 = load_word -1
3d78: %r12_0 = xor %r13_0, %r10_0
3d7c: %r12_1 = or %r12_1, %r13_0
3d80: %r12_0 = xor %r13_0, -1
3d84: %r12_0 = or %r12_0, %r13_0
3d88: %r10_1 = add %r10_1, 0x00000008
3d90: %r10_0 = xor %r10_0, -1
3d94: %r10_0 = load_word -1
3d98: %r12_0 = xor %r13_0, %r10_0
3d9c: %r12_1 = or %r12_1, %r13_0
3da0: %r12_0 = xor %r13_0, -1
3da4: %r12_0 = or %r12_0, %r13_0
3da8: %r10_1 = add %r10_1, 0x00000008
3db0: %r10_0 = xor %r10_0, -1
3db4: %r10_1 = add %r10_1, 0x00000010
3dbc: %r10_0 = xor %r10_0, -1
3dc0: %r10_0 = load_word -1
3dc4: %r12_0 = xor %r13_0, %r10_0
3dc8: %r12_1 = or %r12_1, %r13_0
3dcc: %r12_0 = xor %r13_0, -1
3dd0: %r12_0 = or %r12_0, %r13_0
3dd4: %r10_1 = add %r10_1, 0x00000008
3ddc: %r10_0 = xor %r10_0, -1
3de0: %r10_0 = load_word -1
3de4: %r12_0 = xor %r13_0, %r10_0
3de8: %r12_1 = or %r12_1, %r13_0
3dec: %r12_0 = xor %r13_0, -1
3df0: %r12_0 = or %r12_0, %r13_0
3df4: %r10_1 = add %r10_1, 0x00000008
3dfc: %r10_0 = xor %r10_0, -1
3e00: %r10_1 = add %r10_1, 0x00000010
3e08: %r10_1 = add %r10_1, 0x00000078
3e10: return
3e14: store_word %r12_0, 0xe400001c
3e18: %r12_0 = 0
3e1c: %r12_1 = 0
3e20: %r10_0 = 0x01800180
3e28: call 0x3cd0
3e2c: %r10_0 = 0x02400240
3e34: call 0x3cd0
3e38: %r10_0 = 0x04200420
3e40: call 0x3cd0
3e44: %r10_0 = 0x08100810
3e4c: call 0x3cd0
3e50: %r10_0 = 0x10081008
3e58: call 0x3cd0
3e5c: %r10_0 = 0x20042004
3e64: call 0x3cd0
3e68: %r10_0 = 0x40024002
3e70: call 0x3cd0
3e74: %r10_0 = 0x80018001
3e7c: call 0x3cd0
3e80: %r10_0 = or %r11_0, %r12_0
3e84: %r11_1 = or %r11_1, %r12_1
3e88: return
3e8c: %r10_0 = and %r11_1, 0x000000ff
3e94: branch_cond0 %r10_0, 0 -> 0x3eac v
3e98: %r12_0 = *(0xe400001c)
3e9c: %r10_0 = and %r10_0, 0x000000ff
3ea4: %r12_0 = add %r12_0, %r10_0
3ea8: %r12_0 = add %r13_0, 1
3eac: %r10_0 = and %r11_1, 0x0000ff00
3eb4: branch_cond0 %r10_0, 0 -> 0x3ed0 v
3eb8: %r12_0 = *(0xe400001c)
3ebc: %r10_0 = rotlw_by_8_then_and %r10_0, 0x00ff0000
3ec4: %r12_0 = add %r12_0, %r10_0
3ec8: %r12_0 = add %r13_0, 0x00000100
3ed0: %r10_0 = and %r11_1, 0x00ff0000
3ed8: branch_cond0 %r10_0, 0 -> 0x3ef4 v
3edc: %r12_0 = *(0xe400001c)
3ee0: %r10_0 = rotlw_by_16_then_and %r10_0, 0x000000ff
3ee8: %r12_1 = add %r12_1, %r10_0
3eec: %r12_0 = add %r13_0, 0x00010000
3ef4: %r10_0 = and %r11_1, 0xff000000
3efc: branch_cond0 %r10_0, 0 -> 0x3f18 v
3f00: %r12_0 = *(0xe400001c)
3f04: %r10_0 = rotlw_by_24_then_and %r10_0, 0x00ff0000
3f0c: %r12_1 = add %r12_1, %r10_0
3f10: %r12_0 = add %r13_0, 0x01000000
3f18: return
3f1c: %r10_0 = and %r11_0, 0x000000ff
3f24: branch_cond0 %r10_0, 0 -> 0x3f44 v
3f28: %r12_0 = *(0xe400001c)
3f2c: %r10_0 = and %r10_0, 0x000000ff
3f34: %r12_0 = add %r12_0, %r10_0
3f38: %r12_0 = subf %r12_0, 0x00000050
3f40: %r12_0 = add %r13_0, 1
3f44: %r10_0 = and %r11_0, 0x0000ff00
3f4c: branch_cond0 %r10_0, 0 -> 0x3f70 v
3f50: %r12_0 = *(0xe400001c)
3f54: %r10_0 = rotlw_by_8_then_and %r10_0, 0x00ff0000
3f5c: %r12_0 = add %r12_0, %r10_0
3f60: %r12_0 = subf %r12_0, 0x00500000
3f68: %r12_0 = add %r13_0, 0x00000100
3f70: %r10_0 = and %r11_0, 0x00ff0000
3f78: branch_cond0 %r10_0, 0 -> 0x3f9c v
3f7c: %r12_0 = *(0xe400001c)
3f80: %r10_0 = rotlw_by_16_then_and %r10_0, 0x000000ff
3f88: %r12_1 = add %r12_1, %r10_0
3f8c: %r12_1 = subf %r12_1, 0x00000050
3f94: %r12_0 = add %r13_0, 0x00010000
3f9c: %r10_0 = and %r11_0, 0xff000000
3fa4: branch_cond0 %r10_0, 0 -> 0x3fc8 v
3fa8: %r12_0 = *(0xe400001c)
3fac: %r10_0 = rotlw_by_24_then_and %r10_0, 0x00ff0000
3fb4: %r12_1 = add %r12_1, %r10_0
3fb8: %r12_1 = subf %r12_1, 0x00500000
3fc0: %r12_0 = add %r13_0, 0x01000000
3fc8: return
3fcc: %r10_0 = and %r11_1, 0x000000ff
3fd4: branch_cond0 %r10_0, 0 -> 0x3fec v
3fd8: %r10_0 = *(0xe4000018)
3fdc: %r10_0 = and %r10_0, 0x000000ff
3fe4: %r12_0 = add %r12_0, %r10_0
3fe8: %r12_0 = add %r13_0, 1
3fec: %r10_0 = and %r11_1, 0x0000ff00
3ff4: branch_cond0 %r10_0, 0 -> 0x4010 v
3ff8: %r10_0 = *(0xe4000018)
3ffc: %r10_0 = and %r10_0, 0x00ff0000
4004: %r12_0 = add %r12_0, %r10_0
4008: %r12_0 = add %r13_0, 0x00000100
4010: %r10_0 = and %r11_1, 0x00ff0000
4018: branch_cond0 %r10_0, 0 -> 0x4034 v
401c: %r10_0 = *(0xe4000018)
4020: %r10_0 = and %r10_0, 0x000000ff
4028: %r12_1 = add %r12_1, %r10_0
402c: %r12_0 = add %r13_0, 0x00010000
4034: %r10_0 = and %r11_1, 0xff000000
403c: branch_cond0 %r10_0, 0 -> 0x4058 v
4040: %r10_0 = *(0xe4000018)
4044: %r10_0 = and %r10_0, 0x00ff0000
404c: %r12_1 = add %r12_1, %r10_0
4050: %r12_0 = add %r13_0, 0x01000000
4058: return
405c: %r10_0 = and %r11_0, 0x000000ff
4064: branch_cond0 %r10_0, 0 -> 0x4084 v
4068: %r10_0 = *(0xe4000018)
406c: %r10_0 = and %r10_0, 0x000000ff
4074: %r12_0 = add %r12_0, %r10_0
4078: %r12_0 = subf %r12_0, 0x00000050
4080: %r12_0 = add %r13_0, 1
4084: %r10_0 = and %r11_0, 0x0000ff00
408c: branch_cond0 %r10_0, 0 -> 0x40b0 v
4090: %r10_0 = *(0xe4000018)
4094: %r10_0 = and %r10_0, 0x00ff0000
409c: %r12_0 = add %r12_0, %r10_0
40a0: %r12_0 = subf %r12_0, 0x00500000
40a8: %r12_0 = add %r13_0, 0x00000100
40b0: %r10_0 = and %r11_0, 0x00ff0000
40b8: branch_cond0 %r10_0, 0 -> 0x40dc v
40bc: %r10_0 = *(0xe4000018)
40c0: %r10_0 = and %r10_0, 0x000000ff
40c8: %r12_1 = add %r12_1, %r10_0
40cc: %r12_1 = subf %r12_1, 0x00000050
40d4: %r12_0 = add %r13_0, 0x00010000
40dc: %r10_0 = and %r11_0, 0xff000000
40e4: branch_cond0 %r10_0, 0 -> 0x4108 v
40e8: %r10_0 = *(0xe4000018)
40ec: %r10_0 = and %r10_0, 0x00ff0000
40f4: %r12_1 = add %r12_1, %r10_0
40f8: %r12_1 = subf %r12_1, 0x00500000
4100: %r12_0 = add %r13_0, 0x01000000
4108: return
410c: op_1E %r10_0, -7
4110: op_1E 0, -7
4114: call 0x0b38
4118: op_1E 0, -7
411c: op_1E 1, -7
4120: call 0x0b38
4124: op_1E 1, -7
4128: op_1E 2, -7
412c: call 0x0b38
4130: op_1E 2, -7
4134: op_1E 3, -7
4138: call 0x0b38
413c: op_1E 3, -7
4140: store_word 0x0012129a, 0xe4000024
4148: call 0x0ad0
414c: %r10_0 = 0x0a0a0a0a
4154: store_word_0_100 %r10_0, MC0_RD_STR_DLY_0
4158: store_word_0_100 %r10_0, MC0_RD_STR_DLY_1
415c: %r10_0 = 0x0f0f0f0f
4164: store_word_0_100 %r10_0, MC0_WR_STR_DLL_0
4168: store_word_0_100 %r10_0, MC0_WR_STR_DLL_1
416c: %r12_0 = *(MC1_WR_STR_DLL_1)
4170: sync
4174: delay -7
4178: jmp 0x2750 ^
417c: %r10_0 = load_word -4
4180: %r11_1 = and %r11_1, 0x0000000f
4188: branch_cond0 %r11_1, 0 -> 0x41ec v
418c: %r13_1 = 0x0000000f
4194: jmp 0x2248 ^
4198: %r10_0 = load_word -4
419c: %r11_1 = and %r11_1, 0x0000000f
41a4: branch_cond0 %r11_1, 0 -> 0x41ec v
41a8: %r13_1 = or %r13_1, 0x00000f00
41b0: jmp 0x226c ^
41b4: %r10_0 = load_word -4
41b8: %r11_1 = and %r11_1, 0x0000000f
41c0: branch_cond0 %r11_1, 0 -> 0x41ec v
41c4: %r13_1 = or %r13_1, 0x000f0000
41cc: jmp 0x2290 ^
41d0: %r10_0 = load_word -4
41d4: %r11_1 = and %r11_1, 0x0000000f
41dc: branch_cond0 %r11_1, 0 -> 0x41ec v
41e0: %r13_1 = or %r13_1, 0x0f000000
41e8: jmp 0x22b4 ^
41ec: op_1E %r10_0, -7
41f0: op_1E 0, -7
41f4: call 0x0b38
41f8: op_1E 0, -7
41fc: op_1E 1, -7
4200: call 0x0b38
4204: op_1E 1, -7
4208: op_1E 2, -7
420c: call 0x0b38
4210: op_1E 2, -7
4214: op_1E 3, -7
4218: call 0x0b38
421c: op_1E 3, -7
4220: store_word 0x0013139a, 0xe4000024
4228: call 0x0ad0
422c: jmp 0x414c ^
4230: store_word 0x00000515, 0xe1020008
4238: store_word 0x00000010, 0xe1060030
4240: %r10_0 = load_word -5
4248: %r10_0 = and %r11_0, 0xffffe3ff
4250: %r10_0 = or %r11_0, 0x00001000
4258: store_word %r11_0, 0xe1060034
4260: %r12_0 = load_word -5
4264: %r10_0 = or %r11_0, 0x08000000
426c: store_word %r11_0, 0xe1040024
4270: return
