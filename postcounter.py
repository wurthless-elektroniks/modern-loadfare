from patcher import *
from signature import SignatureBuilder

def assemble_hwinit_postcount_block_universal(cbb_image: bytes,
                                              address: int,
                                              hwinit_register_setup_fcn_address: int,
                                              hwinit_interpreter_top_address: int,
                                              hwinit_exit_address: int,
                                              fast_delay: bool = False):
    hwinit_postcount_block_new = bytearray([
        0x48, 0x00, 0x00, 0x18, 0x48, 0x00, 0x00, 0x44, 0x48, 0x00, 0x00, 0x60, 0x48, 0x00, 0x00, 0x00, 
        0x48, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x7c, 0xcc, 0x42, 0xa6, 0x74, 0xc6, 0x01, 
        0x00, 0xf8, 0xc1, 0xff, 0x58, 0x3c, 0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 
        0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 0xe0, 0x00, 0xa2, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 
        0xe5, 0x10, 0x10, 0x4b, 0xff, 0xff, 0xcd, 0x4b, 0xff, 0xff, 0xcc, 0x1c, 0xc6, 0x00, 0x32, 
        0x7d, 0x0c, 0x42, 0xa6, 0x7d, 0x08, 0x32, 0x14, 0x7c, 0xec, 0x42, 0xa6, 0x7c, 0x27, 0x40, 
        0x40, 0x41, 0x81, 0xff, 0xb4, 0x48, 0x00, 0x00, 0x2d, 0x4b, 0xff, 0xff, 0xf0, 0x3c, 0xa0, 
        0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 0x38, 
        0xe0, 0x00, 0x2e, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0x38, 0xa0, 0x00, 0x01, 
        0x4b, 0xff, 0xff, 0x8c, 0xf8, 0xa1, 0xff, 0x50, 0xf8, 0xc1, 0xff, 0x48, 0xf8, 0xe1, 0xff, 
        0x40, 0xf9, 0x01, 0xff, 0x38, 0xe8, 0xc1, 0xff, 0x58, 0x7c, 0xac, 0x42, 0xa6, 0x74, 0xa7, 
        0x01, 0x00, 0x7c, 0x26, 0x38, 0x40, 0x41, 0x82, 0x00, 0x30, 0xf8, 0xe1, 0xff, 0x58, 0x3c, 
        0xa0, 0x80, 0x00, 0x60, 0xa5, 0x02, 0x00, 0x78, 0xa5, 0x07, 0xc6, 0x64, 0xa5, 0x00, 0x06, 
        0x38, 0xe0, 0x00, 0xa2, 0x2c, 0x06, 0x00, 0x00, 0x41, 0x82, 0x00, 0x08, 0x60, 0xe7, 0x00, 
        0x40, 0x78, 0xe7, 0xc1, 0xc6, 0xf8, 0xe5, 0x10, 0x10, 0xe8, 0xa1, 0xff, 0x50, 0xe8, 0xc1, 
        0xff, 0x48, 0xe8, 0xe1, 0xff, 0x40, 0xe9, 0x01, 0xff, 0x38, 0x4e, 0x80, 0x00, 0x20, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    ])

    hwinit_postcount_block_size = len(hwinit_postcount_block_new)
    if hwinit_postcount_block_size > 256:
        raise RuntimeError("hwinit postcount block too big - must be 256 bytes or less")

    if fast_delay is True:
        mulli_r6_r6_50 = SignatureBuilder() \
            .pattern([0x1c, 0xc6, 0x00, 0x32]) \
            .build()
        
        delaymult_pos = mulli_r6_r6_50.find(hwinit_postcount_block_new)
        if delaymult_pos is None:
            raise RuntimeError("cannot find mulli r6,r6,50 in postcounter block")

        hwinit_postcount_block_new[delaymult_pos:delaymult_pos+4] = bytes([0x1c, 0xc6, 0x00, 0x0a])

    cbb_image[address:address+hwinit_postcount_block_size] = hwinit_postcount_block_new

    cbb_image, _ = assemble_branch(cbb_image, address+0x0C, hwinit_register_setup_fcn_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x10, hwinit_interpreter_top_address)
    cbb_image, _ = assemble_branch(cbb_image, address+0x14, hwinit_exit_address)

    return cbb_image
