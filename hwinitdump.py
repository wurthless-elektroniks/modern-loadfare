'''
Script to bulk dump hwinit bytecode to hwinit_bytecode/.
'''

import os
import hashlib

from hwinitpatcher import hwinit_extract_bytecode

def main():
    # points sha -> list of cbs that use it
    hwinit_pokeball = {}

    with open(os.path.join("hwinit_bytecode", "README"), "w", encoding='utf8') as freadme:
        print("--- this report autogenerated by hwinit_bytecode ---", file=freadme)

        for cbbfile in os.listdir("cbb"):
            if cbbfile.endswith('.bin') is False:
                continue

            cbb = None
            with open(os.path.join("cbb",cbbfile), "rb") as f:
                cbb = f.read()
            
            hwinit_bytecode = hwinit_extract_bytecode(cbb)
            
            if hwinit_bytecode is None:
                print(f"{cbbfile} - NOT SUPPORTED", file=freadme)
                continue

            hwinit_hash = hashlib.sha1(hwinit_bytecode).hexdigest()
            if hwinit_hash not in hwinit_pokeball:
                hwinit_pokeball[hwinit_hash] = []
            
                with open(os.path.join("hwinit_bytecode", f"{hwinit_hash}.bin"), "wb") as f:
                    f.write(hwinit_bytecode)

            hwinit_pokeball[hwinit_hash].append(cbbfile)

            print(f"{cbbfile} - {hwinit_hash}", file=freadme)
        
        print("\n\n\nunique hwinit bytecodes are:\n", file=freadme)
        for sha,files in hwinit_pokeball.items():
            print(f"{sha}", file=freadme)
            for file in files:
                print(f"\t{file}", file=freadme)
            print("\n", file=freadme)

if __name__ == '__main__':
    main()
