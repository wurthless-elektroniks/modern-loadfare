'''
Script to bulk dump hwinit bytecode to hwinit_bytecode/.
'''

import os
import hashlib

from hwinitpatcher import hwinit_extract_bytecode
from hwinitdasm import hwinit_disassemble

KNOWN_SHAS = {
    "e2809475df5ac611b355e9917518a6b76b5c5904": "xenon_v1",
    "7ad71fc6ef3347f1a2624131be1c704d427ab627": "xenon_v2",
    "2dbc0bc80e668070f34c3fa2ca97381cdd697123": "xenon_v3",
    "027509bc3e02adaf673716b00faf662de8584b96": "xenon_v4",
    "e109b34ad7644c0739e84f3e90d287ab6e577e09": "xenon_v5",
    "943664cc4d67141d44accc836bee961b5251763c": "elpis",
    "80f1b93d0f7bf6f8d5c27a5b9d97d8d37ef302d3": "zephyr_v1",
    "3e556ef2210dc528ed0897dacea37b6dad278ad7": "zephyr_v2",
    "88193d53f447a2e030898cb754c2d1e5783f2c78": "zephyr_v3",
    "71a8a655730cc69626b215b7e559e137b99fe2a7": "falcon_v1",
    "1d107e2710b427e376a69767f29245c30bf4ff29": "falcon_v2",
    "952ce2f32728474c13ee87993b941b43e208c9a9": "jasper_v1",
    "cf3d52079480eb55fa8455752fded1b6ce551597": "jasper_v2",
    "d56091e03d8f5e83c4635a94f4989b8b77f3ab7a": "jasper_v3",
    "83cc835193a946ebb77b147058e9e7e088cfe0b8": "trinity_v1",
    "5926a2328f53ac053bd7f71a4b2e9ce1ab77e037": "trinity_v2",
    "34519b4ccd3199222756d128779734ce40af2982": "corona_v1",
    "b6ab0fa2285deb0e08513c06fb324a619a22c6ba": "corona_v2",
}

def main():
    # points sha -> list of cbs that use it
    hwinit_pokeball = {}

    with open(os.path.join("hwinit_bytecode", "README"), "w", encoding='utf8') as freadme:
        print("--- this report autogenerated by hwinitdump ---", file=freadme)

        for cbbfile in os.listdir("cbb"):
            if cbbfile.endswith('.bin') is False:
                continue

            cbb = None
            with open(os.path.join("cbb",cbbfile), "rb") as f:
                cbb = f.read()
            
            hwinit_bytecode = hwinit_extract_bytecode(cbb)
            
            if hwinit_bytecode is None:
                print(f"{cbbfile} - NOT SUPPORTED", file=freadme)
                continue

            hwinit_hash = hashlib.sha1(hwinit_bytecode).hexdigest()
            if hwinit_hash not in hwinit_pokeball:
                hwinit_pokeball[hwinit_hash] = []

                fname = f"{hwinit_hash}" if hwinit_hash not in KNOWN_SHAS else f"{KNOWN_SHAS[hwinit_hash]}"
                with open(os.path.join("hwinit_bytecode", f"{fname}.bin"), "wb") as f:
                    f.write(hwinit_bytecode)
                with open(os.path.join("hwinit_bytecode", f"{fname}.txt"), "w", encoding='utf8') as f:
                    hwinit_disassemble(hwinit_bytecode, fout=f)

            hwinit_pokeball[hwinit_hash].append(cbbfile)

            if hwinit_hash in KNOWN_SHAS:
                print(f"{cbbfile} - {hwinit_hash} == {KNOWN_SHAS[hwinit_hash]}", file=freadme)
            else:
                print(f"{cbbfile} - {hwinit_hash}", file=freadme)
        
        print("\n\n\nunique hwinit bytecodes are:\n", file=freadme)
        for sha,files in hwinit_pokeball.items():
            print(f"{sha}", file=freadme)
            for file in files:
                print(f"\t{file}", file=freadme)
            print("\n", file=freadme)

if __name__ == '__main__':
    main()
